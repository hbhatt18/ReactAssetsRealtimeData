{"ast":null,"code":"\"use strict\";\n\nvar __extends = this && this.__extends || function (d, b) {\n  for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n\n  function __() {\n    this.constructor = d;\n  }\n\n  d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\n\nvar Subscriber_1 = require('../Subscriber');\n\nvar noop_1 = require('../util/noop');\n/**\n * Ignores all items emitted by the source Observable and only passes calls of `complete` or `error`.\n *\n * <img src=\"./img/ignoreElements.png\" width=\"100%\">\n *\n * @return {Observable} An empty Observable that only calls `complete`\n * or `error`, based on which one is called by the source Observable.\n * @method ignoreElements\n * @owner Observable\n */\n\n\nfunction ignoreElements() {\n  return function ignoreElementsOperatorFunction(source) {\n    return source.lift(new IgnoreElementsOperator());\n  };\n}\n\nexports.ignoreElements = ignoreElements;\n\nvar IgnoreElementsOperator = function () {\n  function IgnoreElementsOperator() {}\n\n  IgnoreElementsOperator.prototype.call = function (subscriber, source) {\n    return source.subscribe(new IgnoreElementsSubscriber(subscriber));\n  };\n\n  return IgnoreElementsOperator;\n}();\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\n\n\nvar IgnoreElementsSubscriber = function (_super) {\n  __extends(IgnoreElementsSubscriber, _super);\n\n  function IgnoreElementsSubscriber() {\n    _super.apply(this, arguments);\n  }\n\n  IgnoreElementsSubscriber.prototype._next = function (unused) {\n    noop_1.noop();\n  };\n\n  return IgnoreElementsSubscriber;\n}(Subscriber_1.Subscriber);","map":{"version":3,"sources":["../../src/operators/ignoreElements.ts"],"names":[],"mappings":";;;;;;;;;;;;AAEA,IAAA,YAAA,GAAA,OAAA,CAA2B,eAA3B,CAAA;;AACA,IAAA,MAAA,GAAA,OAAA,CAAqB,cAArB,CAAA;AAGA;;;;;;;;;;;;AAUA,SAAA,cAAA,GAAA;AACE,SAAO,SAAA,8BAAA,CAAwC,MAAxC,EAA6D;AAClE,WAAO,MAAM,CAAC,IAAP,CAAY,IAAI,sBAAJ,EAAZ,CAAP;AACD,GAFD;AAGD;;AAJe,OAAA,CAAA,cAAA,GAAc,cAAd;;AAMhB,IAAA,sBAAA,GAAA,YAAA;AAAA,WAAA,sBAAA,GAAA,CAIC;;AAHC,EAAA,sBAAA,CAAA,SAAA,CAAA,IAAA,GAAA,UAAK,UAAL,EAAgC,MAAhC,EAA2C;AACzC,WAAO,MAAM,CAAC,SAAP,CAAiB,IAAI,wBAAJ,CAA6B,UAA7B,CAAjB,CAAP;AACD,GAFD;;AAGF,SAAA,sBAAA;AAAC,CAJD,EAAA;AAMA;;;;;;;AAKA,IAAA,wBAAA,GAAA,UAAA,MAAA,EAAA;AAA0C,EAAA,SAAA,CAAA,wBAAA,EAAA,MAAA,CAAA;;AAA1C,WAAA,wBAAA,GAAA;AAA0C,IAAA,MAAA,CAAA,KAAA,CAAA,IAAA,EAAA,SAAA;AAIzC;;AAHW,EAAA,wBAAA,CAAA,SAAA,CAAA,KAAA,GAAV,UAAgB,MAAhB,EAAyB;AACvB,IAAA,MAAA,CAAA,IAAA;AACD,GAFS;;AAGZ,SAAA,wBAAA;AAAC,CAJD,CAA0C,YAAA,CAAA,UAA1C,CAAA","sourcesContent":["import { Observable } from '../Observable';\nimport { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { noop } from '../util/noop';\nimport { MonoTypeOperatorFunction } from '../interfaces';\n\n/**\n * Ignores all items emitted by the source Observable and only passes calls of `complete` or `error`.\n *\n * <img src=\"./img/ignoreElements.png\" width=\"100%\">\n *\n * @return {Observable} An empty Observable that only calls `complete`\n * or `error`, based on which one is called by the source Observable.\n * @method ignoreElements\n * @owner Observable\n */\nexport function ignoreElements<T>(): MonoTypeOperatorFunction<T> {\n  return function ignoreElementsOperatorFunction(source: Observable<T>) {\n    return source.lift(new IgnoreElementsOperator());\n  };\n}\n\nclass IgnoreElementsOperator<T, R> implements Operator<T, R> {\n  call(subscriber: Subscriber<R>, source: any): any {\n    return source.subscribe(new IgnoreElementsSubscriber(subscriber));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass IgnoreElementsSubscriber<T> extends Subscriber<T> {\n  protected _next(unused: T): void {\n    noop();\n  }\n}\n"],"sourceRoot":""},"metadata":{},"sourceType":"script"}