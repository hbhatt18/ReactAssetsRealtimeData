{"ast":null,"code":"\"use strict\";\n\nvar __extends = this && this.__extends || function (d, b) {\n  for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n\n  function __() {\n    this.constructor = d;\n  }\n\n  d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\n\nvar AsyncAction_1 = require('./AsyncAction');\n\nvar AsyncScheduler_1 = require('./AsyncScheduler');\n\nvar VirtualTimeScheduler = function (_super) {\n  __extends(VirtualTimeScheduler, _super);\n\n  function VirtualTimeScheduler(SchedulerAction, maxFrames) {\n    var _this = this;\n\n    if (SchedulerAction === void 0) {\n      SchedulerAction = VirtualAction;\n    }\n\n    if (maxFrames === void 0) {\n      maxFrames = Number.POSITIVE_INFINITY;\n    }\n\n    _super.call(this, SchedulerAction, function () {\n      return _this.frame;\n    });\n\n    this.maxFrames = maxFrames;\n    this.frame = 0;\n    this.index = -1;\n  }\n  /**\n   * Prompt the Scheduler to execute all of its queued actions, therefore\n   * clearing its queue.\n   * @return {void}\n   */\n\n\n  VirtualTimeScheduler.prototype.flush = function () {\n    var _a = this,\n        actions = _a.actions,\n        maxFrames = _a.maxFrames;\n\n    var error, action;\n\n    while ((action = actions.shift()) && (this.frame = action.delay) <= maxFrames) {\n      if (error = action.execute(action.state, action.delay)) {\n        break;\n      }\n    }\n\n    if (error) {\n      while (action = actions.shift()) {\n        action.unsubscribe();\n      }\n\n      throw error;\n    }\n  };\n\n  VirtualTimeScheduler.frameTimeFactor = 10;\n  return VirtualTimeScheduler;\n}(AsyncScheduler_1.AsyncScheduler);\n\nexports.VirtualTimeScheduler = VirtualTimeScheduler;\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\n\nvar VirtualAction = function (_super) {\n  __extends(VirtualAction, _super);\n\n  function VirtualAction(scheduler, work, index) {\n    if (index === void 0) {\n      index = scheduler.index += 1;\n    }\n\n    _super.call(this, scheduler, work);\n\n    this.scheduler = scheduler;\n    this.work = work;\n    this.index = index;\n    this.active = true;\n    this.index = scheduler.index = index;\n  }\n\n  VirtualAction.prototype.schedule = function (state, delay) {\n    if (delay === void 0) {\n      delay = 0;\n    }\n\n    if (!this.id) {\n      return _super.prototype.schedule.call(this, state, delay);\n    }\n\n    this.active = false; // If an action is rescheduled, we save allocations by mutating its state,\n    // pushing it to the end of the scheduler queue, and recycling the action.\n    // But since the VirtualTimeScheduler is used for testing, VirtualActions\n    // must be immutable so they can be inspected later.\n\n    var action = new VirtualAction(this.scheduler, this.work);\n    this.add(action);\n    return action.schedule(state, delay);\n  };\n\n  VirtualAction.prototype.requestAsyncId = function (scheduler, id, delay) {\n    if (delay === void 0) {\n      delay = 0;\n    }\n\n    this.delay = scheduler.frame + delay;\n    var actions = scheduler.actions;\n    actions.push(this);\n    actions.sort(VirtualAction.sortActions);\n    return true;\n  };\n\n  VirtualAction.prototype.recycleAsyncId = function (scheduler, id, delay) {\n    if (delay === void 0) {\n      delay = 0;\n    }\n\n    return undefined;\n  };\n\n  VirtualAction.prototype._execute = function (state, delay) {\n    if (this.active === true) {\n      return _super.prototype._execute.call(this, state, delay);\n    }\n  };\n\n  VirtualAction.sortActions = function (a, b) {\n    if (a.delay === b.delay) {\n      if (a.index === b.index) {\n        return 0;\n      } else if (a.index > b.index) {\n        return 1;\n      } else {\n        return -1;\n      }\n    } else if (a.delay > b.delay) {\n      return 1;\n    } else {\n      return -1;\n    }\n  };\n\n  return VirtualAction;\n}(AsyncAction_1.AsyncAction);\n\nexports.VirtualAction = VirtualAction;","map":{"version":3,"sources":["../../src/scheduler/VirtualTimeScheduler.ts"],"names":[],"mappings":"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","sourcesContent":["import { AsyncAction } from './AsyncAction';\nimport { Subscription } from '../Subscription';\nimport { AsyncScheduler } from './AsyncScheduler';\n\nexport class VirtualTimeScheduler extends AsyncScheduler {\n\n  protected static frameTimeFactor: number = 10;\n\n  public frame: number = 0;\n  public index: number = -1;\n\n  constructor(SchedulerAction: typeof AsyncAction = VirtualAction,\n              public maxFrames: number = Number.POSITIVE_INFINITY) {\n    super(SchedulerAction, () => this.frame);\n  }\n\n  /**\n   * Prompt the Scheduler to execute all of its queued actions, therefore\n   * clearing its queue.\n   * @return {void}\n   */\n  public flush(): void {\n\n    const {actions, maxFrames} = this;\n    let error: any, action: AsyncAction<any>;\n\n    while ((action = actions.shift()) && (this.frame = action.delay) <= maxFrames) {\n      if (error = action.execute(action.state, action.delay)) {\n        break;\n      }\n    }\n\n    if (error) {\n      while (action = actions.shift()) {\n        action.unsubscribe();\n      }\n      throw error;\n    }\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nexport class VirtualAction<T> extends AsyncAction<T> {\n\n  protected active: boolean = true;\n\n  constructor(protected scheduler: VirtualTimeScheduler,\n              protected work: (this: VirtualAction<T>, state?: T) => void,\n              protected index: number = scheduler.index += 1) {\n    super(scheduler, work);\n    this.index = scheduler.index = index;\n  }\n\n  public schedule(state?: T, delay: number = 0): Subscription {\n    if (!this.id) {\n      return super.schedule(state, delay);\n    }\n    this.active = false;\n    // If an action is rescheduled, we save allocations by mutating its state,\n    // pushing it to the end of the scheduler queue, and recycling the action.\n    // But since the VirtualTimeScheduler is used for testing, VirtualActions\n    // must be immutable so they can be inspected later.\n    const action = new VirtualAction(this.scheduler, this.work);\n    this.add(action);\n    return action.schedule(state, delay);\n  }\n\n  protected requestAsyncId(scheduler: VirtualTimeScheduler, id?: any, delay: number = 0): any {\n    this.delay = scheduler.frame + delay;\n    const {actions} = scheduler;\n    actions.push(this);\n    actions.sort(VirtualAction.sortActions);\n    return true;\n  }\n\n  protected recycleAsyncId(scheduler: VirtualTimeScheduler, id?: any, delay: number = 0): any {\n    return undefined;\n  }\n\n  protected _execute(state: T, delay: number): any {\n    if (this.active === true) {\n      return super._execute(state, delay);\n    }\n  }\n\n  public static sortActions<T>(a: VirtualAction<T>, b: VirtualAction<T>) {\n    if (a.delay === b.delay) {\n      if (a.index === b.index) {\n        return 0;\n      } else if (a.index > b.index) {\n        return 1;\n      } else {\n        return -1;\n      }\n    } else if (a.delay > b.delay) {\n      return 1;\n    } else {\n      return -1;\n    }\n  }\n}\n"],"sourceRoot":""},"metadata":{},"sourceType":"script"}