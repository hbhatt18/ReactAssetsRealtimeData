{"ast":null,"code":"\"use strict\";\n\nvar __extends = this && this.__extends || function (d, b) {\n  for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n\n  function __() {\n    this.constructor = d;\n  }\n\n  d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\n\nvar Subscriber_1 = require('../Subscriber');\n\nvar EmptyError_1 = require('../util/EmptyError');\n/**\n * Returns an Observable that emits the single item emitted by the source Observable that matches a specified\n * predicate, if that Observable emits one such item. If the source Observable emits more than one such item or no\n * such items, notify of an IllegalArgumentException or NoSuchElementException respectively.\n *\n * <img src=\"./img/single.png\" width=\"100%\">\n *\n * @throws {EmptyError} Delivers an EmptyError to the Observer's `error`\n * callback if the Observable completes before any `next` notification was sent.\n * @param {Function} predicate - A predicate function to evaluate items emitted by the source Observable.\n * @return {Observable<T>} An Observable that emits the single item emitted by the source Observable that matches\n * the predicate.\n .\n * @method single\n * @owner Observable\n */\n\n\nfunction single(predicate) {\n  return function (source) {\n    return source.lift(new SingleOperator(predicate, source));\n  };\n}\n\nexports.single = single;\n\nvar SingleOperator = function () {\n  function SingleOperator(predicate, source) {\n    this.predicate = predicate;\n    this.source = source;\n  }\n\n  SingleOperator.prototype.call = function (subscriber, source) {\n    return source.subscribe(new SingleSubscriber(subscriber, this.predicate, this.source));\n  };\n\n  return SingleOperator;\n}();\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\n\n\nvar SingleSubscriber = function (_super) {\n  __extends(SingleSubscriber, _super);\n\n  function SingleSubscriber(destination, predicate, source) {\n    _super.call(this, destination);\n\n    this.predicate = predicate;\n    this.source = source;\n    this.seenValue = false;\n    this.index = 0;\n  }\n\n  SingleSubscriber.prototype.applySingleValue = function (value) {\n    if (this.seenValue) {\n      this.destination.error('Sequence contains more than one element');\n    } else {\n      this.seenValue = true;\n      this.singleValue = value;\n    }\n  };\n\n  SingleSubscriber.prototype._next = function (value) {\n    var index = this.index++;\n\n    if (this.predicate) {\n      this.tryNext(value, index);\n    } else {\n      this.applySingleValue(value);\n    }\n  };\n\n  SingleSubscriber.prototype.tryNext = function (value, index) {\n    try {\n      if (this.predicate(value, index, this.source)) {\n        this.applySingleValue(value);\n      }\n    } catch (err) {\n      this.destination.error(err);\n    }\n  };\n\n  SingleSubscriber.prototype._complete = function () {\n    var destination = this.destination;\n\n    if (this.index > 0) {\n      destination.next(this.seenValue ? this.singleValue : undefined);\n      destination.complete();\n    } else {\n      destination.error(new EmptyError_1.EmptyError());\n    }\n  };\n\n  return SingleSubscriber;\n}(Subscriber_1.Subscriber);","map":{"version":3,"sources":["../../src/operators/single.ts"],"names":[],"mappings":"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","sourcesContent":["import { Observable } from '../Observable';\nimport { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { Observer } from '../Observer';\nimport { EmptyError } from '../util/EmptyError';\nimport { TeardownLogic } from '../Subscription';\n\nimport { MonoTypeOperatorFunction } from '../interfaces';\n\n/**\n * Returns an Observable that emits the single item emitted by the source Observable that matches a specified\n * predicate, if that Observable emits one such item. If the source Observable emits more than one such item or no\n * such items, notify of an IllegalArgumentException or NoSuchElementException respectively.\n *\n * <img src=\"./img/single.png\" width=\"100%\">\n *\n * @throws {EmptyError} Delivers an EmptyError to the Observer's `error`\n * callback if the Observable completes before any `next` notification was sent.\n * @param {Function} predicate - A predicate function to evaluate items emitted by the source Observable.\n * @return {Observable<T>} An Observable that emits the single item emitted by the source Observable that matches\n * the predicate.\n .\n * @method single\n * @owner Observable\n */\nexport function single<T>(predicate?: (value: T, index: number, source: Observable<T>) => boolean): MonoTypeOperatorFunction<T> {\n  return (source: Observable<T>) => source.lift(new SingleOperator(predicate, source));\n}\n\nclass SingleOperator<T> implements Operator<T, T> {\n  constructor(private predicate?: (value: T, index: number, source: Observable<T>) => boolean,\n              private source?: Observable<T>) {\n  }\n\n  call(subscriber: Subscriber<T>, source: any): TeardownLogic {\n    return source.subscribe(new SingleSubscriber(subscriber, this.predicate, this.source));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass SingleSubscriber<T> extends Subscriber<T> {\n  private seenValue: boolean = false;\n  private singleValue: T;\n  private index: number = 0;\n\n  constructor(destination: Observer<T>,\n              private predicate?: (value: T, index: number, source: Observable<T>) => boolean,\n              private source?: Observable<T>) {\n    super(destination);\n  }\n\n  private applySingleValue(value: T): void {\n    if (this.seenValue) {\n      this.destination.error('Sequence contains more than one element');\n    } else {\n      this.seenValue = true;\n      this.singleValue = value;\n    }\n  }\n\n  protected _next(value: T): void {\n    const index = this.index++;\n\n    if (this.predicate) {\n      this.tryNext(value, index);\n    } else {\n      this.applySingleValue(value);\n    }\n  }\n\n  private tryNext(value: T, index: number): void {\n    try {\n      if (this.predicate(value, index, this.source)) {\n        this.applySingleValue(value);\n      }\n    } catch (err) {\n      this.destination.error(err);\n    }\n  }\n\n  protected _complete(): void {\n    const destination = this.destination;\n\n    if (this.index > 0) {\n      destination.next(this.seenValue ? this.singleValue : undefined);\n      destination.complete();\n    } else {\n      destination.error(new EmptyError);\n    }\n  }\n}\n"],"sourceRoot":""},"metadata":{},"sourceType":"script"}