{"ast":null,"code":"\"use strict\";\n\nvar __extends = this && this.__extends || function (d, b) {\n  for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n\n  function __() {\n    this.constructor = d;\n  }\n\n  d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\n\nvar Subscriber_1 = require('../Subscriber');\n/**\n * Returns an Observable that skips the first `count` items emitted by the source Observable.\n *\n * <img src=\"./img/skip.png\" width=\"100%\">\n *\n * @param {Number} count - The number of times, items emitted by source Observable should be skipped.\n * @return {Observable} An Observable that skips values emitted by the source Observable.\n *\n * @method skip\n * @owner Observable\n */\n\n\nfunction skip(count) {\n  return function (source) {\n    return source.lift(new SkipOperator(count));\n  };\n}\n\nexports.skip = skip;\n\nvar SkipOperator = function () {\n  function SkipOperator(total) {\n    this.total = total;\n  }\n\n  SkipOperator.prototype.call = function (subscriber, source) {\n    return source.subscribe(new SkipSubscriber(subscriber, this.total));\n  };\n\n  return SkipOperator;\n}();\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\n\n\nvar SkipSubscriber = function (_super) {\n  __extends(SkipSubscriber, _super);\n\n  function SkipSubscriber(destination, total) {\n    _super.call(this, destination);\n\n    this.total = total;\n    this.count = 0;\n  }\n\n  SkipSubscriber.prototype._next = function (x) {\n    if (++this.count > this.total) {\n      this.destination.next(x);\n    }\n  };\n\n  return SkipSubscriber;\n}(Subscriber_1.Subscriber);","map":{"version":3,"sources":["../../src/operators/skip.ts"],"names":[],"mappings":";;;;;;;;;;;;AACA,IAAA,YAAA,GAAA,OAAA,CAA2B,eAA3B,CAAA;AAKA;;;;;;;;;;;;;AAWA,SAAA,IAAA,CAAwB,KAAxB,EAAqC;AACnC,SAAO,UAAC,MAAD,EAAsB;AAAK,WAAA,MAAM,CAAC,IAAP,CAAY,IAAI,YAAJ,CAAZ,KAAY,CAAZ,CAAA;AAAoC,GAAtE;AACD;;AAFe,OAAA,CAAA,IAAA,GAAI,IAAJ;;AAIhB,IAAA,YAAA,GAAA,YAAA;AACE,WAAA,YAAA,CAAoB,KAApB,EAAiC;AAAb,SAAA,KAAA,GAAA,KAAA;AACnB;;AAED,EAAA,YAAA,CAAA,SAAA,CAAA,IAAA,GAAA,UAAK,UAAL,EAAgC,MAAhC,EAA2C;AACzC,WAAO,MAAM,CAAC,SAAP,CAAiB,IAAI,cAAJ,CAAmB,UAAnB,EAA+B,KAAK,KAApC,CAAjB,CAAP;AACD,GAFD;;AAGF,SAAA,YAAA;AAAC,CAPD,EAAA;AASA;;;;;;;AAKA,IAAA,cAAA,GAAA,UAAA,MAAA,EAAA;AAAgC,EAAA,SAAA,CAAA,cAAA,EAAA,MAAA,CAAA;;AAG9B,WAAA,cAAA,CAAY,WAAZ,EAAgD,KAAhD,EAA6D;AAC3D,IAAA,MAAA,CAAA,IAAA,CAAA,IAAA,EAAM,WAAN;;AAD8C,SAAA,KAAA,GAAA,KAAA;AAFhD,SAAA,KAAA,GAAgB,CAAhB;AAIC;;AAES,EAAA,cAAA,CAAA,SAAA,CAAA,KAAA,GAAV,UAAgB,CAAhB,EAAoB;AAClB,QAAI,EAAE,KAAK,KAAP,GAAe,KAAK,KAAxB,EAA+B;AAC7B,WAAK,WAAL,CAAiB,IAAjB,CAAsB,CAAtB;AACD;AACF,GAJS;;AAKZ,SAAA,cAAA;AAAC,CAZD,CAAgC,YAAA,CAAA,UAAhC,CAAA","sourcesContent":["import { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { Observable } from '../Observable';\nimport { TeardownLogic } from '../Subscription';\nimport { MonoTypeOperatorFunction } from '../interfaces';\n\n/**\n * Returns an Observable that skips the first `count` items emitted by the source Observable.\n *\n * <img src=\"./img/skip.png\" width=\"100%\">\n *\n * @param {Number} count - The number of times, items emitted by source Observable should be skipped.\n * @return {Observable} An Observable that skips values emitted by the source Observable.\n *\n * @method skip\n * @owner Observable\n */\nexport function skip<T>(count: number): MonoTypeOperatorFunction<T> {\n  return (source: Observable<T>) => source.lift(new SkipOperator(count));\n}\n\nclass SkipOperator<T> implements Operator<T, T> {\n  constructor(private total: number) {\n  }\n\n  call(subscriber: Subscriber<T>, source: any): TeardownLogic {\n    return source.subscribe(new SkipSubscriber(subscriber, this.total));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass SkipSubscriber<T> extends Subscriber<T> {\n  count: number = 0;\n\n  constructor(destination: Subscriber<T>, private total: number) {\n    super(destination);\n  }\n\n  protected _next(x: T) {\n    if (++this.count > this.total) {\n      this.destination.next(x);\n    }\n  }\n}\n"],"sourceRoot":""},"metadata":{},"sourceType":"script"}