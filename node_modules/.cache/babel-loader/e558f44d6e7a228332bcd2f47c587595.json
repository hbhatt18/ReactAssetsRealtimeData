{"ast":null,"code":"\"use strict\";\n\nvar pluck_1 = require('../operators/pluck');\n/**\n * Maps each source value (an object) to its specified nested property.\n *\n * <span class=\"informal\">Like {@link map}, but meant only for picking one of\n * the nested properties of every emitted object.</span>\n *\n * <img src=\"./img/pluck.png\" width=\"100%\">\n *\n * Given a list of strings describing a path to an object property, retrieves\n * the value of a specified nested property from all values in the source\n * Observable. If a property can't be resolved, it will return `undefined` for\n * that value.\n *\n * @example <caption>Map every click to the tagName of the clicked target element</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var tagNames = clicks.pluck('target', 'tagName');\n * tagNames.subscribe(x => console.log(x));\n *\n * @see {@link map}\n *\n * @param {...string} properties The nested properties to pluck from each source\n * value (an object).\n * @return {Observable} A new Observable of property values from the source values.\n * @method pluck\n * @owner Observable\n */\n\n\nfunction pluck() {\n  var properties = [];\n\n  for (var _i = 0; _i < arguments.length; _i++) {\n    properties[_i - 0] = arguments[_i];\n  }\n\n  return pluck_1.pluck.apply(void 0, properties)(this);\n}\n\nexports.pluck = pluck;","map":{"version":3,"sources":["../../src/operator/pluck.ts"],"names":[],"mappings":";;AACA,IAAA,OAAA,GAAA,OAAA,CAAqC,oBAArC,CAAA;AAEA;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA0BA,SAAA,KAAA,GAAA;AAAiD,MAAA,UAAA,GAAA,EAAA;;OAAA,IAAA,EAAA,GAAA,C,EAAA,EAAA,GAAA,SAAA,CAAA,M,EAAA,EAAA,E,EAAuB;AAAvB,IAAA,UAAA,CAAA,EAAA,GAAA,CAAA,CAAA,GAAA,SAAA,CAAA,EAAA,CAAA;;;AAC/C,SAAO,OAAA,CAAA,KAAA,CAAW,KAAX,CAAW,KAAA,CAAX,EAAe,UAAf,EAA2B,IAA3B,CAAP;AACD;;AAFe,OAAA,CAAA,KAAA,GAAK,KAAL","sourcesContent":["import { Observable } from '../Observable';\nimport { pluck as higherOrder } from '../operators/pluck';\n\n/**\n * Maps each source value (an object) to its specified nested property.\n *\n * <span class=\"informal\">Like {@link map}, but meant only for picking one of\n * the nested properties of every emitted object.</span>\n *\n * <img src=\"./img/pluck.png\" width=\"100%\">\n *\n * Given a list of strings describing a path to an object property, retrieves\n * the value of a specified nested property from all values in the source\n * Observable. If a property can't be resolved, it will return `undefined` for\n * that value.\n *\n * @example <caption>Map every click to the tagName of the clicked target element</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var tagNames = clicks.pluck('target', 'tagName');\n * tagNames.subscribe(x => console.log(x));\n *\n * @see {@link map}\n *\n * @param {...string} properties The nested properties to pluck from each source\n * value (an object).\n * @return {Observable} A new Observable of property values from the source values.\n * @method pluck\n * @owner Observable\n */\nexport function pluck<T, R>(this: Observable<T>, ...properties: string[]): Observable<R> {\n  return higherOrder(...properties)(this) as Observable<R>;\n}\n"],"sourceRoot":""},"metadata":{},"sourceType":"script"}