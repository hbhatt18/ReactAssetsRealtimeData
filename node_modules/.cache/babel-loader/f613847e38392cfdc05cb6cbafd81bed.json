{"ast":null,"code":"\"use strict\";\n\nvar __extends = this && this.__extends || function (d, b) {\n  for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n\n  function __() {\n    this.constructor = d;\n  }\n\n  d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\n\nvar OuterSubscriber_1 = require('../OuterSubscriber');\n\nvar subscribeToResult_1 = require('../util/subscribeToResult');\n/* tslint:enable:max-line-length */\n\n/**\n * Projects each source value to an Observable which is merged in the output\n * Observable, emitting values only from the most recently projected Observable.\n *\n * <span class=\"informal\">Maps each value to an Observable, then flattens all of\n * these inner Observables using {@link switch}.</span>\n *\n * <img src=\"./img/switchMap.png\" width=\"100%\">\n *\n * Returns an Observable that emits items based on applying a function that you\n * supply to each item emitted by the source Observable, where that function\n * returns an (so-called \"inner\") Observable. Each time it observes one of these\n * inner Observables, the output Observable begins emitting the items emitted by\n * that inner Observable. When a new inner Observable is emitted, `switchMap`\n * stops emitting items from the earlier-emitted inner Observable and begins\n * emitting items from the new one. It continues to behave like this for\n * subsequent inner Observables.\n *\n * @example <caption>Rerun an interval Observable on every click event</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = clicks.switchMap((ev) => Rx.Observable.interval(1000));\n * result.subscribe(x => console.log(x));\n *\n * @see {@link concatMap}\n * @see {@link exhaustMap}\n * @see {@link mergeMap}\n * @see {@link switch}\n * @see {@link switchMapTo}\n *\n * @param {function(value: T, ?index: number): ObservableInput} project A function\n * that, when applied to an item emitted by the source Observable, returns an\n * Observable.\n * @param {function(outerValue: T, innerValue: I, outerIndex: number, innerIndex: number): any} [resultSelector]\n * A function to produce the value on the output Observable based on the values\n * and the indices of the source (outer) emission and the inner Observable\n * emission. The arguments passed to this function are:\n * - `outerValue`: the value that came from the source\n * - `innerValue`: the value that came from the projected Observable\n * - `outerIndex`: the \"index\" of the value that came from the source\n * - `innerIndex`: the \"index\" of the value from the projected Observable\n * @return {Observable} An Observable that emits the result of applying the\n * projection function (and the optional `resultSelector`) to each item emitted\n * by the source Observable and taking only the values from the most recently\n * projected inner Observable.\n * @method switchMap\n * @owner Observable\n */\n\n\nfunction switchMap(project, resultSelector) {\n  return function switchMapOperatorFunction(source) {\n    return source.lift(new SwitchMapOperator(project, resultSelector));\n  };\n}\n\nexports.switchMap = switchMap;\n\nvar SwitchMapOperator = function () {\n  function SwitchMapOperator(project, resultSelector) {\n    this.project = project;\n    this.resultSelector = resultSelector;\n  }\n\n  SwitchMapOperator.prototype.call = function (subscriber, source) {\n    return source.subscribe(new SwitchMapSubscriber(subscriber, this.project, this.resultSelector));\n  };\n\n  return SwitchMapOperator;\n}();\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\n\n\nvar SwitchMapSubscriber = function (_super) {\n  __extends(SwitchMapSubscriber, _super);\n\n  function SwitchMapSubscriber(destination, project, resultSelector) {\n    _super.call(this, destination);\n\n    this.project = project;\n    this.resultSelector = resultSelector;\n    this.index = 0;\n  }\n\n  SwitchMapSubscriber.prototype._next = function (value) {\n    var result;\n    var index = this.index++;\n\n    try {\n      result = this.project(value, index);\n    } catch (error) {\n      this.destination.error(error);\n      return;\n    }\n\n    this._innerSub(result, value, index);\n  };\n\n  SwitchMapSubscriber.prototype._innerSub = function (result, value, index) {\n    var innerSubscription = this.innerSubscription;\n\n    if (innerSubscription) {\n      innerSubscription.unsubscribe();\n    }\n\n    this.add(this.innerSubscription = subscribeToResult_1.subscribeToResult(this, result, value, index));\n  };\n\n  SwitchMapSubscriber.prototype._complete = function () {\n    var innerSubscription = this.innerSubscription;\n\n    if (!innerSubscription || innerSubscription.closed) {\n      _super.prototype._complete.call(this);\n    }\n  };\n  /** @deprecated internal use only */\n\n\n  SwitchMapSubscriber.prototype._unsubscribe = function () {\n    this.innerSubscription = null;\n  };\n\n  SwitchMapSubscriber.prototype.notifyComplete = function (innerSub) {\n    this.remove(innerSub);\n    this.innerSubscription = null;\n\n    if (this.isStopped) {\n      _super.prototype._complete.call(this);\n    }\n  };\n\n  SwitchMapSubscriber.prototype.notifyNext = function (outerValue, innerValue, outerIndex, innerIndex, innerSub) {\n    if (this.resultSelector) {\n      this._tryNotifyNext(outerValue, innerValue, outerIndex, innerIndex);\n    } else {\n      this.destination.next(innerValue);\n    }\n  };\n\n  SwitchMapSubscriber.prototype._tryNotifyNext = function (outerValue, innerValue, outerIndex, innerIndex) {\n    var result;\n\n    try {\n      result = this.resultSelector(outerValue, innerValue, outerIndex, innerIndex);\n    } catch (err) {\n      this.destination.error(err);\n      return;\n    }\n\n    this.destination.next(result);\n  };\n\n  return SwitchMapSubscriber;\n}(OuterSubscriber_1.OuterSubscriber);","map":{"version":3,"sources":["../../src/operators/switchMap.ts"],"names":[],"mappings":"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","sourcesContent":["import { Operator } from '../Operator';\nimport { Observable, ObservableInput } from '../Observable';\nimport { Subscriber } from '../Subscriber';\nimport { Subscription } from '../Subscription';\nimport { OuterSubscriber } from '../OuterSubscriber';\nimport { InnerSubscriber } from '../InnerSubscriber';\nimport { subscribeToResult } from '../util/subscribeToResult';\nimport { OperatorFunction } from '../interfaces';\n\n/* tslint:disable:max-line-length */\nexport function switchMap<T, R>(project: (value: T, index: number) => ObservableInput<R>): OperatorFunction<T, R>;\nexport function switchMap<T, I, R>(project: (value: T, index: number) => ObservableInput<I>, resultSelector: (outerValue: T, innerValue: I, outerIndex: number, innerIndex: number) => R): OperatorFunction<T, R>;\n/* tslint:enable:max-line-length */\n\n/**\n * Projects each source value to an Observable which is merged in the output\n * Observable, emitting values only from the most recently projected Observable.\n *\n * <span class=\"informal\">Maps each value to an Observable, then flattens all of\n * these inner Observables using {@link switch}.</span>\n *\n * <img src=\"./img/switchMap.png\" width=\"100%\">\n *\n * Returns an Observable that emits items based on applying a function that you\n * supply to each item emitted by the source Observable, where that function\n * returns an (so-called \"inner\") Observable. Each time it observes one of these\n * inner Observables, the output Observable begins emitting the items emitted by\n * that inner Observable. When a new inner Observable is emitted, `switchMap`\n * stops emitting items from the earlier-emitted inner Observable and begins\n * emitting items from the new one. It continues to behave like this for\n * subsequent inner Observables.\n *\n * @example <caption>Rerun an interval Observable on every click event</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = clicks.switchMap((ev) => Rx.Observable.interval(1000));\n * result.subscribe(x => console.log(x));\n *\n * @see {@link concatMap}\n * @see {@link exhaustMap}\n * @see {@link mergeMap}\n * @see {@link switch}\n * @see {@link switchMapTo}\n *\n * @param {function(value: T, ?index: number): ObservableInput} project A function\n * that, when applied to an item emitted by the source Observable, returns an\n * Observable.\n * @param {function(outerValue: T, innerValue: I, outerIndex: number, innerIndex: number): any} [resultSelector]\n * A function to produce the value on the output Observable based on the values\n * and the indices of the source (outer) emission and the inner Observable\n * emission. The arguments passed to this function are:\n * - `outerValue`: the value that came from the source\n * - `innerValue`: the value that came from the projected Observable\n * - `outerIndex`: the \"index\" of the value that came from the source\n * - `innerIndex`: the \"index\" of the value from the projected Observable\n * @return {Observable} An Observable that emits the result of applying the\n * projection function (and the optional `resultSelector`) to each item emitted\n * by the source Observable and taking only the values from the most recently\n * projected inner Observable.\n * @method switchMap\n * @owner Observable\n */\nexport function switchMap<T, I, R>(\n  project: (value: T, index: number) => ObservableInput<I>,\n  resultSelector?: (outerValue: T, innerValue: I, outerIndex: number, innerIndex: number) => R\n): OperatorFunction<T, I | R> {\n  return function switchMapOperatorFunction(source: Observable<T>): Observable<I | R> {\n    return source.lift(new SwitchMapOperator(project, resultSelector));\n  };\n}\n\nclass SwitchMapOperator<T, I, R> implements Operator<T, I> {\n  constructor(private project: (value: T, index: number) => ObservableInput<I>,\n              private resultSelector?: (outerValue: T, innerValue: I, outerIndex: number, innerIndex: number) => R) {\n  }\n\n  call(subscriber: Subscriber<I>, source: any): any {\n    return source.subscribe(new SwitchMapSubscriber(subscriber, this.project, this.resultSelector));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass SwitchMapSubscriber<T, I, R> extends OuterSubscriber<T, I> {\n  private index: number = 0;\n  private innerSubscription: Subscription;\n\n  constructor(destination: Subscriber<I>,\n              private project: (value: T, index: number) => ObservableInput<I>,\n              private resultSelector?: (outerValue: T, innerValue: I, outerIndex: number, innerIndex: number) => R) {\n    super(destination);\n  }\n\n  protected _next(value: T) {\n    let result: ObservableInput<I>;\n    const index = this.index++;\n    try {\n      result = this.project(value, index);\n    } catch (error) {\n      this.destination.error(error);\n      return;\n    }\n    this._innerSub(result, value, index);\n  }\n\n  private _innerSub(result: ObservableInput<I>, value: T, index: number) {\n    const innerSubscription = this.innerSubscription;\n    if (innerSubscription) {\n      innerSubscription.unsubscribe();\n    }\n    this.add(this.innerSubscription = subscribeToResult(this, result, value, index));\n  }\n\n  protected _complete(): void {\n    const {innerSubscription} = this;\n    if (!innerSubscription || innerSubscription.closed) {\n      super._complete();\n    }\n  }\n\n  /** @deprecated internal use only */ _unsubscribe() {\n    this.innerSubscription = null;\n  }\n\n  notifyComplete(innerSub: Subscription): void {\n    this.remove(innerSub);\n    this.innerSubscription = null;\n    if (this.isStopped) {\n      super._complete();\n    }\n  }\n\n  notifyNext(outerValue: T, innerValue: I,\n             outerIndex: number, innerIndex: number,\n             innerSub: InnerSubscriber<T, I>): void {\n    if (this.resultSelector) {\n      this._tryNotifyNext(outerValue, innerValue, outerIndex, innerIndex);\n    } else {\n      this.destination.next(innerValue);\n    }\n  }\n\n  private _tryNotifyNext(outerValue: T, innerValue: I, outerIndex: number, innerIndex: number): void {\n    let result: R;\n    try {\n      result = this.resultSelector(outerValue, innerValue, outerIndex, innerIndex);\n    } catch (err) {\n      this.destination.error(err);\n      return;\n    }\n    this.destination.next(result);\n  }\n}\n"],"sourceRoot":""},"metadata":{},"sourceType":"script"}