{"ast":null,"code":"/**\nSome credit for this helper goes to http://github.com/YuzuJS/setImmediate\n*/\n\"use strict\";\n\nvar root_1 = require('./root');\n\nvar ImmediateDefinition = function () {\n  function ImmediateDefinition(root) {\n    this.root = root;\n\n    if (root.setImmediate && typeof root.setImmediate === 'function') {\n      this.setImmediate = root.setImmediate.bind(root);\n      this.clearImmediate = root.clearImmediate.bind(root);\n    } else {\n      this.nextHandle = 1;\n      this.tasksByHandle = {};\n      this.currentlyRunningATask = false; // Don't get fooled by e.g. browserify environments.\n\n      if (this.canUseProcessNextTick()) {\n        // For Node.js before 0.9\n        this.setImmediate = this.createProcessNextTickSetImmediate();\n      } else if (this.canUsePostMessage()) {\n        // For non-IE10 modern browsers\n        this.setImmediate = this.createPostMessageSetImmediate();\n      } else if (this.canUseMessageChannel()) {\n        // For web workers, where supported\n        this.setImmediate = this.createMessageChannelSetImmediate();\n      } else if (this.canUseReadyStateChange()) {\n        // For IE 6â€“8\n        this.setImmediate = this.createReadyStateChangeSetImmediate();\n      } else {\n        // For older browsers\n        this.setImmediate = this.createSetTimeoutSetImmediate();\n      }\n\n      var ci = function clearImmediate(handle) {\n        delete clearImmediate.instance.tasksByHandle[handle];\n      };\n\n      ci.instance = this;\n      this.clearImmediate = ci;\n    }\n  }\n\n  ImmediateDefinition.prototype.identify = function (o) {\n    return this.root.Object.prototype.toString.call(o);\n  };\n\n  ImmediateDefinition.prototype.canUseProcessNextTick = function () {\n    return this.identify(this.root.process) === '[object process]';\n  };\n\n  ImmediateDefinition.prototype.canUseMessageChannel = function () {\n    return Boolean(this.root.MessageChannel);\n  };\n\n  ImmediateDefinition.prototype.canUseReadyStateChange = function () {\n    var document = this.root.document;\n    return Boolean(document && 'onreadystatechange' in document.createElement('script'));\n  };\n\n  ImmediateDefinition.prototype.canUsePostMessage = function () {\n    var root = this.root; // The test against `importScripts` prevents this implementation from being installed inside a web worker,\n    // where `root.postMessage` means something completely different and can't be used for this purpose.\n\n    if (root.postMessage && !root.importScripts) {\n      var postMessageIsAsynchronous_1 = true;\n      var oldOnMessage = root.onmessage;\n\n      root.onmessage = function () {\n        postMessageIsAsynchronous_1 = false;\n      };\n\n      root.postMessage('', '*');\n      root.onmessage = oldOnMessage;\n      return postMessageIsAsynchronous_1;\n    }\n\n    return false;\n  }; // This function accepts the same arguments as setImmediate, but\n  // returns a function that requires no arguments.\n\n\n  ImmediateDefinition.prototype.partiallyApplied = function (handler) {\n    var args = [];\n\n    for (var _i = 1; _i < arguments.length; _i++) {\n      args[_i - 1] = arguments[_i];\n    }\n\n    var fn = function result() {\n      var _a = result,\n          handler = _a.handler,\n          args = _a.args;\n\n      if (typeof handler === 'function') {\n        handler.apply(undefined, args);\n      } else {\n        new Function('' + handler)();\n      }\n    };\n\n    fn.handler = handler;\n    fn.args = args;\n    return fn;\n  };\n\n  ImmediateDefinition.prototype.addFromSetImmediateArguments = function (args) {\n    this.tasksByHandle[this.nextHandle] = this.partiallyApplied.apply(undefined, args);\n    return this.nextHandle++;\n  };\n\n  ImmediateDefinition.prototype.createProcessNextTickSetImmediate = function () {\n    var fn = function setImmediate() {\n      var instance = setImmediate.instance;\n      var handle = instance.addFromSetImmediateArguments(arguments);\n      instance.root.process.nextTick(instance.partiallyApplied(instance.runIfPresent, handle));\n      return handle;\n    };\n\n    fn.instance = this;\n    return fn;\n  };\n\n  ImmediateDefinition.prototype.createPostMessageSetImmediate = function () {\n    // Installs an event handler on `global` for the `message` event: see\n    // * https://developer.mozilla.org/en/DOM/window.postMessage\n    // * http://www.whatwg.org/specs/web-apps/current-work/multipage/comms.html#crossDocumentMessages\n    var root = this.root;\n    var messagePrefix = 'setImmediate$' + root.Math.random() + '$';\n\n    var onGlobalMessage = function globalMessageHandler(event) {\n      var instance = globalMessageHandler.instance;\n\n      if (event.source === root && typeof event.data === 'string' && event.data.indexOf(messagePrefix) === 0) {\n        instance.runIfPresent(+event.data.slice(messagePrefix.length));\n      }\n    };\n\n    onGlobalMessage.instance = this;\n    root.addEventListener('message', onGlobalMessage, false);\n\n    var fn = function setImmediate() {\n      var _a = setImmediate,\n          messagePrefix = _a.messagePrefix,\n          instance = _a.instance;\n      var handle = instance.addFromSetImmediateArguments(arguments);\n      instance.root.postMessage(messagePrefix + handle, '*');\n      return handle;\n    };\n\n    fn.instance = this;\n    fn.messagePrefix = messagePrefix;\n    return fn;\n  };\n\n  ImmediateDefinition.prototype.runIfPresent = function (handle) {\n    // From the spec: 'Wait until any invocations of this algorithm started before this one have completed.'\n    // So if we're currently running a task, we'll need to delay this invocation.\n    if (this.currentlyRunningATask) {\n      // Delay by doing a setTimeout. setImmediate was tried instead, but in Firefox 7 it generated a\n      // 'too much recursion' error.\n      this.root.setTimeout(this.partiallyApplied(this.runIfPresent, handle), 0);\n    } else {\n      var task = this.tasksByHandle[handle];\n\n      if (task) {\n        this.currentlyRunningATask = true;\n\n        try {\n          task();\n        } finally {\n          this.clearImmediate(handle);\n          this.currentlyRunningATask = false;\n        }\n      }\n    }\n  };\n\n  ImmediateDefinition.prototype.createMessageChannelSetImmediate = function () {\n    var _this = this;\n\n    var channel = new this.root.MessageChannel();\n\n    channel.port1.onmessage = function (event) {\n      var handle = event.data;\n\n      _this.runIfPresent(handle);\n    };\n\n    var fn = function setImmediate() {\n      var _a = setImmediate,\n          channel = _a.channel,\n          instance = _a.instance;\n      var handle = instance.addFromSetImmediateArguments(arguments);\n      channel.port2.postMessage(handle);\n      return handle;\n    };\n\n    fn.channel = channel;\n    fn.instance = this;\n    return fn;\n  };\n\n  ImmediateDefinition.prototype.createReadyStateChangeSetImmediate = function () {\n    var fn = function setImmediate() {\n      var instance = setImmediate.instance;\n      var root = instance.root;\n      var doc = root.document;\n      var html = doc.documentElement;\n      var handle = instance.addFromSetImmediateArguments(arguments); // Create a <script> element; its readystatechange event will be fired asynchronously once it is inserted\n      // into the document. Do so, thus queuing up the task. Remember to clean up once it's been called.\n\n      var script = doc.createElement('script');\n\n      script.onreadystatechange = function () {\n        instance.runIfPresent(handle);\n        script.onreadystatechange = null;\n        html.removeChild(script);\n        script = null;\n      };\n\n      html.appendChild(script);\n      return handle;\n    };\n\n    fn.instance = this;\n    return fn;\n  };\n\n  ImmediateDefinition.prototype.createSetTimeoutSetImmediate = function () {\n    var fn = function setImmediate() {\n      var instance = setImmediate.instance;\n      var handle = instance.addFromSetImmediateArguments(arguments);\n      instance.root.setTimeout(instance.partiallyApplied(instance.runIfPresent, handle), 0);\n      return handle;\n    };\n\n    fn.instance = this;\n    return fn;\n  };\n\n  return ImmediateDefinition;\n}();\n\nexports.ImmediateDefinition = ImmediateDefinition;\nexports.Immediate = new ImmediateDefinition(root_1.root);","map":{"version":3,"sources":["../../src/util/Immediate.ts"],"names":[],"mappings":"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","sourcesContent":["/**\nSome credit for this helper goes to http://github.com/YuzuJS/setImmediate\n*/\n\nimport {  root  } from './root';\n\nexport class ImmediateDefinition {\n  setImmediate: (cb: () => void) => number;\n\n  clearImmediate: (handle: number) => void;\n\n  private identify(o: any): string {\n    return this.root.Object.prototype.toString.call(o);\n  }\n\n  tasksByHandle: any;\n\n  nextHandle: number;\n\n  currentlyRunningATask: boolean;\n\n  constructor(private root: any) {\n    if (root.setImmediate && typeof root.setImmediate === 'function') {\n      this.setImmediate = root.setImmediate.bind(root);\n      this.clearImmediate = root.clearImmediate.bind(root);\n    } else {\n      this.nextHandle = 1;\n      this.tasksByHandle = {};\n      this.currentlyRunningATask = false;\n\n      // Don't get fooled by e.g. browserify environments.\n      if (this.canUseProcessNextTick()) {\n        // For Node.js before 0.9\n        this.setImmediate = this.createProcessNextTickSetImmediate();\n      } else if (this.canUsePostMessage()) {\n        // For non-IE10 modern browsers\n        this.setImmediate = this.createPostMessageSetImmediate();\n      } else if (this.canUseMessageChannel()) {\n        // For web workers, where supported\n        this.setImmediate = this.createMessageChannelSetImmediate();\n      } else if (this.canUseReadyStateChange()) {\n        // For IE 6â€“8\n        this.setImmediate = this.createReadyStateChangeSetImmediate();\n      } else {\n        // For older browsers\n        this.setImmediate = this.createSetTimeoutSetImmediate();\n      }\n\n      let ci = function clearImmediate(handle: any) {\n        delete (<any>clearImmediate).instance.tasksByHandle[handle];\n      };\n\n      (<any>ci).instance = this;\n\n      this.clearImmediate = ci;\n    }\n  }\n\n  canUseProcessNextTick() {\n    return this.identify(this.root.process) === '[object process]';\n  }\n\n  canUseMessageChannel() {\n    return Boolean(this.root.MessageChannel);\n  }\n\n  canUseReadyStateChange() {\n    const document = this.root.document;\n    return Boolean(document && 'onreadystatechange' in document.createElement('script'));\n  }\n\n  canUsePostMessage() {\n    const root = this.root;\n    // The test against `importScripts` prevents this implementation from being installed inside a web worker,\n    // where `root.postMessage` means something completely different and can't be used for this purpose.\n    if (root.postMessage && !root.importScripts) {\n      let postMessageIsAsynchronous = true;\n      let oldOnMessage = root.onmessage;\n      root.onmessage = function() {\n        postMessageIsAsynchronous = false;\n      };\n      root.postMessage('', '*');\n      root.onmessage = oldOnMessage;\n      return postMessageIsAsynchronous;\n    }\n\n    return false;\n  }\n\n  // This function accepts the same arguments as setImmediate, but\n  // returns a function that requires no arguments.\n  partiallyApplied(handler: any, ...args: any[]) {\n    let fn = function result () {\n      const { handler, args } = <any>result;\n      if (typeof handler === 'function') {\n        handler.apply(undefined, args);\n      } else {\n        (new Function('' + handler))();\n      }\n    };\n\n    (<any>fn).handler = handler;\n    (<any>fn).args = args;\n\n    return fn;\n  }\n\n  addFromSetImmediateArguments(args: any[]) {\n    this.tasksByHandle[this.nextHandle] = this.partiallyApplied.apply(undefined, args);\n    return this.nextHandle++;\n  }\n\n  createProcessNextTickSetImmediate() {\n    let fn = function setImmediate() {\n      const { instance } = (<any>setImmediate);\n      let handle = instance.addFromSetImmediateArguments(arguments);\n      instance.root.process.nextTick(instance.partiallyApplied(instance.runIfPresent, handle));\n      return handle;\n    };\n\n    (<any>fn).instance = this;\n\n    return fn;\n  }\n\n  createPostMessageSetImmediate() {\n    // Installs an event handler on `global` for the `message` event: see\n    // * https://developer.mozilla.org/en/DOM/window.postMessage\n    // * http://www.whatwg.org/specs/web-apps/current-work/multipage/comms.html#crossDocumentMessages\n    const root = this.root;\n\n    let messagePrefix = 'setImmediate$' + root.Math.random() + '$';\n    let onGlobalMessage = function globalMessageHandler(event: any) {\n      const instance = (<any>globalMessageHandler).instance;\n      if (event.source === root &&\n        typeof event.data === 'string' &&\n        event.data.indexOf(messagePrefix) === 0) {\n        instance.runIfPresent(+event.data.slice(messagePrefix.length));\n      }\n    };\n    (<any>onGlobalMessage).instance = this;\n\n    root.addEventListener('message', onGlobalMessage, false);\n\n    let fn = function setImmediate() {\n      const { messagePrefix, instance } = (<any>setImmediate);\n      let handle = instance.addFromSetImmediateArguments(arguments);\n      instance.root.postMessage(messagePrefix + handle, '*');\n      return handle;\n    };\n\n    (<any>fn).instance = this;\n    (<any>fn).messagePrefix = messagePrefix;\n\n    return fn;\n  }\n\n  runIfPresent(handle: any) {\n    // From the spec: 'Wait until any invocations of this algorithm started before this one have completed.'\n    // So if we're currently running a task, we'll need to delay this invocation.\n    if (this.currentlyRunningATask) {\n      // Delay by doing a setTimeout. setImmediate was tried instead, but in Firefox 7 it generated a\n      // 'too much recursion' error.\n      this.root.setTimeout(this.partiallyApplied(this.runIfPresent, handle), 0);\n    } else {\n      let task = this.tasksByHandle[handle];\n      if (task) {\n        this.currentlyRunningATask = true;\n        try {\n          task();\n        } finally {\n          this.clearImmediate(handle);\n          this.currentlyRunningATask = false;\n        }\n      }\n    }\n  }\n\n  createMessageChannelSetImmediate() {\n    let channel = new this.root.MessageChannel();\n    channel.port1.onmessage = (event: any) => {\n      let handle = event.data;\n      this.runIfPresent(handle);\n    };\n\n    let fn = function setImmediate() {\n      const { channel, instance } = (<any>setImmediate);\n      let handle = instance.addFromSetImmediateArguments(arguments);\n      channel.port2.postMessage(handle);\n      return handle;\n    };\n\n    (<any>fn).channel = channel;\n    (<any>fn).instance = this;\n\n    return fn;\n  }\n\n  createReadyStateChangeSetImmediate() {\n    let fn = function setImmediate() {\n      const instance = (<any>setImmediate).instance;\n      const root = instance.root;\n      const doc = root.document;\n      const html = doc.documentElement;\n\n      let handle = instance.addFromSetImmediateArguments(arguments);\n      // Create a <script> element; its readystatechange event will be fired asynchronously once it is inserted\n      // into the document. Do so, thus queuing up the task. Remember to clean up once it's been called.\n      let script = doc.createElement('script');\n      script.onreadystatechange = () => {\n        instance.runIfPresent(handle);\n        script.onreadystatechange = null;\n        html.removeChild(script);\n        script = null;\n      };\n      html.appendChild(script);\n      return handle;\n    };\n\n    (<any>fn).instance = this;\n\n    return fn;\n  }\n\n  createSetTimeoutSetImmediate() {\n    let fn = function setImmediate() {\n      const instance = (<any>setImmediate).instance;\n      let handle = instance.addFromSetImmediateArguments(arguments);\n      instance.root.setTimeout(instance.partiallyApplied(instance.runIfPresent, handle), 0);\n      return handle;\n    };\n\n    (<any>fn).instance = this;\n\n    return fn;\n  }\n}\nexport const Immediate = new ImmediateDefinition(root);\n"],"sourceRoot":""},"metadata":{},"sourceType":"script"}