{"ast":null,"code":"\"use strict\";\n\nvar __extends = this && this.__extends || function (d, b) {\n  for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n\n  function __() {\n    this.constructor = d;\n  }\n\n  d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\n\nvar OuterSubscriber_1 = require('../OuterSubscriber');\n\nvar subscribeToResult_1 = require('../util/subscribeToResult');\n\nvar Set_1 = require('../util/Set');\n/**\n * Returns an Observable that emits all items emitted by the source Observable that are distinct by comparison from previous items.\n *\n * If a keySelector function is provided, then it will project each value from the source observable into a new value that it will\n * check for equality with previously projected values. If a keySelector function is not provided, it will use each value from the\n * source observable directly with an equality check against previous values.\n *\n * In JavaScript runtimes that support `Set`, this operator will use a `Set` to improve performance of the distinct value checking.\n *\n * In other runtimes, this operator will use a minimal implementation of `Set` that relies on an `Array` and `indexOf` under the\n * hood, so performance will degrade as more values are checked for distinction. Even in newer browsers, a long-running `distinct`\n * use might result in memory leaks. To help alleviate this in some scenarios, an optional `flushes` parameter is also provided so\n * that the internal `Set` can be \"flushed\", basically clearing it of values.\n *\n * @example <caption>A simple example with numbers</caption>\n * Observable.of(1, 1, 2, 2, 2, 1, 2, 3, 4, 3, 2, 1)\n *   .distinct()\n *   .subscribe(x => console.log(x)); // 1, 2, 3, 4\n *\n * @example <caption>An example using a keySelector function</caption>\n * interface Person {\n *    age: number,\n *    name: string\n * }\n *\n * Observable.of<Person>(\n *     { age: 4, name: 'Foo'},\n *     { age: 7, name: 'Bar'},\n *     { age: 5, name: 'Foo'})\n *     .distinct((p: Person) => p.name)\n *     .subscribe(x => console.log(x));\n *\n * // displays:\n * // { age: 4, name: 'Foo' }\n * // { age: 7, name: 'Bar' }\n *\n * @see {@link distinctUntilChanged}\n * @see {@link distinctUntilKeyChanged}\n *\n * @param {function} [keySelector] Optional function to select which value you want to check as distinct.\n * @param {Observable} [flushes] Optional Observable for flushing the internal HashSet of the operator.\n * @return {Observable} An Observable that emits items from the source Observable with distinct values.\n * @method distinct\n * @owner Observable\n */\n\n\nfunction distinct(keySelector, flushes) {\n  return function (source) {\n    return source.lift(new DistinctOperator(keySelector, flushes));\n  };\n}\n\nexports.distinct = distinct;\n\nvar DistinctOperator = function () {\n  function DistinctOperator(keySelector, flushes) {\n    this.keySelector = keySelector;\n    this.flushes = flushes;\n  }\n\n  DistinctOperator.prototype.call = function (subscriber, source) {\n    return source.subscribe(new DistinctSubscriber(subscriber, this.keySelector, this.flushes));\n  };\n\n  return DistinctOperator;\n}();\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\n\n\nvar DistinctSubscriber = function (_super) {\n  __extends(DistinctSubscriber, _super);\n\n  function DistinctSubscriber(destination, keySelector, flushes) {\n    _super.call(this, destination);\n\n    this.keySelector = keySelector;\n    this.values = new Set_1.Set();\n\n    if (flushes) {\n      this.add(subscribeToResult_1.subscribeToResult(this, flushes));\n    }\n  }\n\n  DistinctSubscriber.prototype.notifyNext = function (outerValue, innerValue, outerIndex, innerIndex, innerSub) {\n    this.values.clear();\n  };\n\n  DistinctSubscriber.prototype.notifyError = function (error, innerSub) {\n    this._error(error);\n  };\n\n  DistinctSubscriber.prototype._next = function (value) {\n    if (this.keySelector) {\n      this._useKeySelector(value);\n    } else {\n      this._finalizeNext(value, value);\n    }\n  };\n\n  DistinctSubscriber.prototype._useKeySelector = function (value) {\n    var key;\n    var destination = this.destination;\n\n    try {\n      key = this.keySelector(value);\n    } catch (err) {\n      destination.error(err);\n      return;\n    }\n\n    this._finalizeNext(key, value);\n  };\n\n  DistinctSubscriber.prototype._finalizeNext = function (key, value) {\n    var values = this.values;\n\n    if (!values.has(key)) {\n      values.add(key);\n      this.destination.next(value);\n    }\n  };\n\n  return DistinctSubscriber;\n}(OuterSubscriber_1.OuterSubscriber);\n\nexports.DistinctSubscriber = DistinctSubscriber;","map":{"version":3,"sources":["../../src/operators/distinct.ts"],"names":[],"mappings":";;;;;;;;;;;;AAIA,IAAA,iBAAA,GAAA,OAAA,CAAgC,oBAAhC,CAAA;;AAEA,IAAA,mBAAA,GAAA,OAAA,CAAkC,2BAAlC,CAAA;;AACA,IAAA,KAAA,GAAA,OAAA,CAA0B,aAA1B,CAAA;AAGA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA6CA,SAAA,QAAA,CAA+B,WAA/B,EAC+B,OAD/B,EACwD;AACtD,SAAO,UAAC,MAAD,EAAsB;AAAK,WAAA,MAAM,CAAC,IAAP,CAAY,IAAI,gBAAJ,CAAqB,WAArB,EAAZ,OAAY,CAAZ,CAAA;AAAuD,GAAzF;AACD;;AAHe,OAAA,CAAA,QAAA,GAAQ,QAAR;;AAKhB,IAAA,gBAAA,GAAA,YAAA;AACE,WAAA,gBAAA,CAAoB,WAApB,EAA0D,OAA1D,EAAkF;AAA9D,SAAA,WAAA,GAAA,WAAA;AAAsC,SAAA,OAAA,GAAA,OAAA;AACzD;;AAED,EAAA,gBAAA,CAAA,SAAA,CAAA,IAAA,GAAA,UAAK,UAAL,EAAgC,MAAhC,EAA2C;AACzC,WAAO,MAAM,CAAC,SAAP,CAAiB,IAAI,kBAAJ,CAAuB,UAAvB,EAAmC,KAAK,WAAxC,EAAqD,KAAK,OAA1D,CAAjB,CAAP;AACD,GAFD;;AAGF,SAAA,gBAAA;AAAC,CAPD,EAAA;AASA;;;;;;;AAKA,IAAA,kBAAA,GAAA,UAAA,MAAA,EAAA;AAA8C,EAAA,SAAA,CAAA,kBAAA,EAAA,MAAA,CAAA;;AAG5C,WAAA,kBAAA,CAAY,WAAZ,EAAgD,WAAhD,EAA8E,OAA9E,EAAsG;AACpG,IAAA,MAAA,CAAA,IAAA,CAAA,IAAA,EAAM,WAAN;;AAD8C,SAAA,WAAA,GAAA,WAAA;AAFxC,SAAA,MAAA,GAAkB,IAAI,KAAA,CAAA,GAAJ,EAAlB;;AAKN,QAAI,OAAJ,EAAa;AACX,WAAK,GAAL,CAAS,mBAAA,CAAA,iBAAA,CAAkB,IAAlB,EAAwB,OAAxB,CAAT;AACD;AACF;;AAED,EAAA,kBAAA,CAAA,SAAA,CAAA,UAAA,GAAA,UAAW,UAAX,EAA0B,UAA1B,EACW,UADX,EAC+B,UAD/B,EAEW,QAFX,EAE0C;AACxC,SAAK,MAAL,CAAY,KAAZ;AACD,GAJD;;AAMA,EAAA,kBAAA,CAAA,SAAA,CAAA,WAAA,GAAA,UAAY,KAAZ,EAAwB,QAAxB,EAAuD;AACrD,SAAK,MAAL,CAAY,KAAZ;AACD,GAFD;;AAIU,EAAA,kBAAA,CAAA,SAAA,CAAA,KAAA,GAAV,UAAgB,KAAhB,EAAwB;AACtB,QAAI,KAAK,WAAT,EAAsB;AACpB,WAAK,eAAL,CAAqB,KAArB;AACD,KAFD,MAEO;AACL,WAAK,aAAL,CAAmB,KAAnB,EAA0B,KAA1B;AACD;AACF,GANS;;AAQF,EAAA,kBAAA,CAAA,SAAA,CAAA,eAAA,GAAR,UAAwB,KAAxB,EAAgC;AAC9B,QAAI,GAAJ;AACQ,QAAA,WAAA,GAAA,KAAA,WAAA;;AACR,QAAI;AACF,MAAA,GAAG,GAAG,KAAK,WAAL,CAAiB,KAAjB,CAAN;AACA,KAFF,CAEE,OAAO,GAAP,EAAY;AACZ,MAAA,WAAW,CAAC,KAAZ,CAAkB,GAAlB;AACA;AACD;;AACD,SAAK,aAAL,CAAmB,GAAnB,EAAwB,KAAxB;AACD,GAVO;;AAYA,EAAA,kBAAA,CAAA,SAAA,CAAA,aAAA,GAAR,UAAsB,GAAtB,EAAgC,KAAhC,EAAwC;AAC9B,QAAA,MAAA,GAAA,KAAA,MAAA;;AACR,QAAI,CAAC,MAAM,CAAC,GAAP,CAAc,GAAd,CAAL,EAAyB;AACvB,MAAA,MAAM,CAAC,GAAP,CAAc,GAAd;AACA,WAAK,WAAL,CAAiB,IAAjB,CAAsB,KAAtB;AACD;AACF,GANO;;AAQV,SAAA,kBAAA;AAAC,CAjDD,CAA8C,iBAAA,CAAA,eAA9C,CAAA;;AAAa,OAAA,CAAA,kBAAA,GAAkB,kBAAlB","sourcesContent":["import { Observable } from '../Observable';\nimport { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { TeardownLogic } from '../Subscription';\nimport { OuterSubscriber } from '../OuterSubscriber';\nimport { InnerSubscriber } from '../InnerSubscriber';\nimport { subscribeToResult } from '../util/subscribeToResult';\nimport { ISet, Set } from '../util/Set';\nimport { MonoTypeOperatorFunction } from '../interfaces';\n\n/**\n * Returns an Observable that emits all items emitted by the source Observable that are distinct by comparison from previous items.\n *\n * If a keySelector function is provided, then it will project each value from the source observable into a new value that it will\n * check for equality with previously projected values. If a keySelector function is not provided, it will use each value from the\n * source observable directly with an equality check against previous values.\n *\n * In JavaScript runtimes that support `Set`, this operator will use a `Set` to improve performance of the distinct value checking.\n *\n * In other runtimes, this operator will use a minimal implementation of `Set` that relies on an `Array` and `indexOf` under the\n * hood, so performance will degrade as more values are checked for distinction. Even in newer browsers, a long-running `distinct`\n * use might result in memory leaks. To help alleviate this in some scenarios, an optional `flushes` parameter is also provided so\n * that the internal `Set` can be \"flushed\", basically clearing it of values.\n *\n * @example <caption>A simple example with numbers</caption>\n * Observable.of(1, 1, 2, 2, 2, 1, 2, 3, 4, 3, 2, 1)\n *   .distinct()\n *   .subscribe(x => console.log(x)); // 1, 2, 3, 4\n *\n * @example <caption>An example using a keySelector function</caption>\n * interface Person {\n *    age: number,\n *    name: string\n * }\n *\n * Observable.of<Person>(\n *     { age: 4, name: 'Foo'},\n *     { age: 7, name: 'Bar'},\n *     { age: 5, name: 'Foo'})\n *     .distinct((p: Person) => p.name)\n *     .subscribe(x => console.log(x));\n *\n * // displays:\n * // { age: 4, name: 'Foo' }\n * // { age: 7, name: 'Bar' }\n *\n * @see {@link distinctUntilChanged}\n * @see {@link distinctUntilKeyChanged}\n *\n * @param {function} [keySelector] Optional function to select which value you want to check as distinct.\n * @param {Observable} [flushes] Optional Observable for flushing the internal HashSet of the operator.\n * @return {Observable} An Observable that emits items from the source Observable with distinct values.\n * @method distinct\n * @owner Observable\n */\nexport function distinct<T, K>(keySelector?: (value: T) => K,\n                               flushes?: Observable<any>): MonoTypeOperatorFunction<T> {\n  return (source: Observable<T>) => source.lift(new DistinctOperator(keySelector, flushes));\n}\n\nclass DistinctOperator<T, K> implements Operator<T, T> {\n  constructor(private keySelector: (value: T) => K, private flushes: Observable<any>) {\n  }\n\n  call(subscriber: Subscriber<T>, source: any): TeardownLogic {\n    return source.subscribe(new DistinctSubscriber(subscriber, this.keySelector, this.flushes));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nexport class DistinctSubscriber<T, K> extends OuterSubscriber<T, T> {\n  private values: ISet<K> = new Set<K>();\n\n  constructor(destination: Subscriber<T>, private keySelector: (value: T) => K, flushes: Observable<any>) {\n    super(destination);\n\n    if (flushes) {\n      this.add(subscribeToResult(this, flushes));\n    }\n  }\n\n  notifyNext(outerValue: T, innerValue: T,\n             outerIndex: number, innerIndex: number,\n             innerSub: InnerSubscriber<T, T>): void {\n    this.values.clear();\n  }\n\n  notifyError(error: any, innerSub: InnerSubscriber<T, T>): void {\n    this._error(error);\n  }\n\n  protected _next(value: T): void {\n    if (this.keySelector) {\n      this._useKeySelector(value);\n    } else {\n      this._finalizeNext(value, value);\n    }\n  }\n\n  private _useKeySelector(value: T): void {\n    let key: K;\n    const { destination } = this;\n    try {\n      key = this.keySelector(value);\n    } catch (err) {\n      destination.error(err);\n      return;\n    }\n    this._finalizeNext(key, value);\n  }\n\n  private _finalizeNext(key: K|T, value: T) {\n    const { values } = this;\n    if (!values.has(<K>key)) {\n      values.add(<K>key);\n      this.destination.next(value);\n    }\n  }\n\n}\n"],"sourceRoot":""},"metadata":{},"sourceType":"script"}