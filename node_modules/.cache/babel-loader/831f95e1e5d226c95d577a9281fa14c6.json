{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\het\\\\ReactProject\\\\ch02\\\\02_02\\\\start\\\\test\\\\src\\\\index.js\";\nimport React, { Component } from 'react';\nimport ReactDOM from 'react-dom';\nimport { render } from 'react-dom';\nimport './index.css';\nimport * as serviceWorker from './serviceWorker';\nimport './App.css';\nimport Rx from 'rxjs/Rx';\nimport DataTable from 'react-data-table-component';\nconst timeObservable = Rx.Observable.interval(9000);\nexport const mock = Rx.Observable.create(ob => {\n  timeObservable.subscribe(() => {\n    Rx.Observable.from(assets).map(asset => {\n      const random = Math.random();\n      asset.price = random >= 0.5 ? asset.price + random : asset.price - random;\n      asset.lastUpdate = Date.now();\n      return asset;\n    }).subscribe(asset => ob.next(asset));\n  });\n  return () => null; // we don't care about unsubscribe just for a test\n});\n\nconst createAsset = (id, type) => {\n  return {\n    id: id,\n    assetName: type === 'Stock' ? ['AAPL', 'GOOGL', 'FB', 'TSLA', 'MSFT'][Math.floor(Math.random() * 4)] : ['EUR', 'USD', 'GBP', 'NIS', 'AUD'][Math.floor(Math.random() * 4)],\n    price: Math.random() * 13,\n    lastUpdate: Date.now(),\n    //new Date(Date.now()).toString().slice(3,24),\n    type: type\n  };\n};\n\nconst getAllAssets = n => {\n  const result = [];\n\n  for (let i = 0; i < n; i++) {\n    result.push(createAsset(i, 'Stock'));\n    result.push(createAsset(i + n, 'Currency'));\n  }\n\n  return result;\n};\n\nconst assets = getAllAssets(200);\n\nclass Table extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      assets: getAllAssets(200)\n    };\n\n    this.updateState = state => {\n      this.setState({\n        selectedRows: state.selectedRows\n      }); // triggers MyComponent to re-render with new state\n    };\n  }\n\n  componentDidMount() {\n    const mock = Rx.Observable.create(ob => {\n      timeObservable.subscribe(() => {\n        Rx.Observable.from(this.state.assets).map(asset => {\n          const random = Math.random();\n          asset.price = random >= 0.5 ? asset.price + random : asset.price - random;\n          this.onSelectedRowsChange();\n          ReactDOM.render( /*#__PURE__*/React.createElement(Table, {\n            __self: this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 66,\n              columnNumber: 26\n            }\n          }), document.getElementById('root'));\n          return asset;\n        }).subscribe(asset => ob.next(asset));\n      });\n      return () => null;\n    });\n    const p = mock.subscribe(asset => {\n      asset.price = asset.price;\n    });\n  }\n\n  renderTableHeader() {\n    let header = Object.keys(this.state.assets[0]);\n    return header.map((key, index) => {\n      if (key == \"lastUpdate\") return /*#__PURE__*/React.createElement(\"th\", {\n        style: {\n          padding: \"15px\"\n        },\n        key: index,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 81,\n          columnNumber: 40\n        }\n      }, key.toUpperCase());else return /*#__PURE__*/React.createElement(\"th\", {\n        style: {\n          padding: \"15px\"\n        },\n        key: index,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 82,\n          columnNumber: 22\n        }\n      }, key.toUpperCase());\n    });\n  }\n\n  renderTableData() {\n    return this.state.assets.map((asset, index) => {\n      const {\n        id,\n        assetName,\n        price,\n        lastUpdate,\n        type\n      } = asset; //destructuring\n\n      return /*#__PURE__*/React.createElement(\"tr\", {\n        key: id,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 90,\n          columnNumber: 12\n        }\n      }, /*#__PURE__*/React.createElement(\"td\", {\n        style: {\n          padding: \"15px\"\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 91,\n          columnNumber: 15\n        }\n      }, id), /*#__PURE__*/React.createElement(\"td\", {\n        style: {\n          padding: \"15px\"\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 92,\n          columnNumber: 15\n        }\n      }, assetName), /*#__PURE__*/React.createElement(\"td\", {\n        style: {\n          padding: \"15px\"\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 93,\n          columnNumber: 15\n        }\n      }, price), /*#__PURE__*/React.createElement(\"td\", {\n        style: {\n          padding: \"15px\"\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 94,\n          columnNumber: 15\n        }\n      }, lastUpdate), /*#__PURE__*/React.createElement(\"td\", {\n        style: {\n          padding: \"15px\"\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 95,\n          columnNumber: 15\n        }\n      }, type));\n    });\n  }\n  /*//                 <tr>{this.renderTableHeader()}</tr>\r\n    //               {this.renderTableData()}\r\n  */\n\n\n  render() {\n    const columns = [{\n      name: 'id',\n      selector: 'id',\n      sortable: true\n    }, {\n      name: 'assetName',\n      selector: 'assetName',\n      sortable: true\n    }, {\n      name: 'price',\n      selector: 'price',\n      sortable: true\n    }, {\n      name: 'lastUpdate',\n      selector: 'lastUpdate',\n      sortable: true\n    }, {\n      name: 'type',\n      selector: 'type',\n      sortable: true\n    }]; //const domContainer = document.querySelector('#Table');\n\n    return /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 136,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(\"h1\", {\n      id: \"title\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 137,\n        columnNumber: 12\n      }\n    }, \"Assets Realtime Details\"), /*#__PURE__*/React.createElement(\"table\", {\n      id: \"assets\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 138,\n        columnNumber: 12\n      }\n    }, /*#__PURE__*/React.createElement(\"tbody\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 139,\n        columnNumber: 15\n      }\n    }, /*#__PURE__*/React.createElement(DataTable, {\n      title: \"Assets List\",\n      columns: columns,\n      data: this.state.assets,\n      defaultSortField: \"price\",\n      onSelectedRowsChange: this.updateState,\n      selectableRows: true,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 140,\n        columnNumber: 15\n      }\n    }))));\n  }\n\n}\n\nReactDOM.render( /*#__PURE__*/React.createElement(Table, {\n  __self: this,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 155,\n    columnNumber: 17\n  }\n}), document.getElementById('root'));\nserviceWorker.unregister();","map":{"version":3,"sources":["C:/Users/het/ReactProject/ch02/02_02/start/test/src/index.js"],"names":["React","Component","ReactDOM","render","serviceWorker","Rx","DataTable","timeObservable","Observable","interval","mock","create","ob","subscribe","from","assets","map","asset","random","Math","price","lastUpdate","Date","now","next","createAsset","id","type","assetName","floor","getAllAssets","n","result","i","push","Table","constructor","props","state","updateState","setState","selectedRows","componentDidMount","onSelectedRowsChange","document","getElementById","p","renderTableHeader","header","Object","keys","key","index","padding","toUpperCase","renderTableData","columns","name","selector","sortable","unregister"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,OAAOC,QAAP,MAAqB,WAArB;AACA,SAASC,MAAT,QAAuB,WAAvB;AACA,OAAO,aAAP;AACA,OAAO,KAAKC,aAAZ,MAA+B,iBAA/B;AACA,OAAO,WAAP;AACA,OAAOC,EAAP,MAAe,SAAf;AACA,OAAOC,SAAP,MAAsB,4BAAtB;AAGA,MAAMC,cAAc,GAAGF,EAAE,CAACG,UAAH,CAAcC,QAAd,CAAuB,IAAvB,CAAvB;AACA,OAAO,MAAMC,IAAI,GAAGL,EAAE,CAACG,UAAH,CAAcG,MAAd,CAAsBC,EAAD,IAAQ;AAChDL,EAAAA,cAAc,CAACM,SAAf,CAAyB,MAAM;AAC7BR,IAAAA,EAAE,CAACG,UAAH,CAAcM,IAAd,CAAmBC,MAAnB,EACAC,GADA,CACIC,KAAK,IAAI;AACZ,YAAMC,MAAM,GAAGC,IAAI,CAACD,MAAL,EAAf;AACAD,MAAAA,KAAK,CAACG,KAAN,GAAcF,MAAM,IAAI,GAAV,GAAgBD,KAAK,CAACG,KAAN,GAAcF,MAA9B,GAAuCD,KAAK,CAACG,KAAN,GAAcF,MAAnE;AACID,MAAAA,KAAK,CAACI,UAAN,GAAmBC,IAAI,CAACC,GAAL,EAAnB;AACJ,aAAON,KAAP;AACD,KANA,EAOAJ,SAPA,CAOUI,KAAK,IAAIL,EAAE,CAACY,IAAH,CAAQP,KAAR,CAPnB;AAQD,GATD;AAUA,SAAO,MAAM,IAAb,CAXgD,CAW7B;AACnB,CAZmB,CAAb;;AAcP,MAAMQ,WAAW,GAAG,CAACC,EAAD,EAAKC,IAAL,KAAc;AAC/B,SAAO;AACLD,IAAAA,EAAE,EAAEA,EADC;AAELE,IAAAA,SAAS,EAAED,IAAI,KAAK,OAAT,GAAmB,CAAC,MAAD,EAAQ,OAAR,EAAgB,IAAhB,EAAsB,MAAtB,EAA8B,MAA9B,EAAsCR,IAAI,CAACU,KAAL,CAAWV,IAAI,CAACD,MAAL,KAAgB,CAA3B,CAAtC,CAAnB,GAA0F,CAAC,KAAD,EAAO,KAAP,EAAa,KAAb,EAAoB,KAApB,EAA2B,KAA3B,EAAkCC,IAAI,CAACU,KAAL,CAAWV,IAAI,CAACD,MAAL,KAAgB,CAA3B,CAAlC,CAFhG;AAGLE,IAAAA,KAAK,EAAED,IAAI,CAACD,MAAL,KAAc,EAHhB;AAILG,IAAAA,UAAU,EAAEC,IAAI,CAACC,GAAL,EAJP;AAIkB;AACvBI,IAAAA,IAAI,EAAEA;AALD,GAAP;AAOD,CARF;;AAUC,MAAMG,YAAY,GAAIC,CAAD,IAAO;AAC1B,QAAMC,MAAM,GAAG,EAAf;;AACA,OAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGF,CAApB,EAAuBE,CAAC,EAAxB,EAA4B;AAC1BD,IAAAA,MAAM,CAACE,IAAP,CAAYT,WAAW,CAACQ,CAAD,EAAI,OAAJ,CAAvB;AACAD,IAAAA,MAAM,CAACE,IAAP,CAAYT,WAAW,CAACQ,CAAC,GAACF,CAAH,EAAM,UAAN,CAAvB;AACD;;AACD,SAAOC,MAAP;AACD,CAPD;;AASD,MAAMjB,MAAM,GAAGe,YAAY,CAAC,GAAD,CAA3B;;AAGA,MAAMK,KAAN,SAAoBnC,KAAK,CAACC,SAA1B,CAAoC;AAClCmC,EAAAA,WAAW,CAACC,KAAD,EAAQ;AAChB,UAAMA,KAAN;AACA,SAAKC,KAAL,GAAa;AACVvB,MAAAA,MAAM,EAAEe,YAAY,CAAC,GAAD;AADV,KAAb;;AAGA,SAAKS,WAAL,GAAmBD,KAAK,IAAI;AAC3B,WAAKE,QAAL,CAAc;AAAEC,QAAAA,YAAY,EAAEH,KAAK,CAACG;AAAtB,OAAd,EAD2B,CAC0B;AACtD,KAFA;AAGF;;AAEFC,EAAAA,iBAAiB,GAAG;AAClB,UAAMhC,IAAI,GAAGL,EAAE,CAACG,UAAH,CAAcG,MAAd,CAAsBC,EAAD,IAAQ;AACxCL,MAAAA,cAAc,CAACM,SAAf,CAAyB,MAAM;AAC7BR,QAAAA,EAAE,CAACG,UAAH,CAAcM,IAAd,CAAmB,KAAKwB,KAAL,CAAWvB,MAA9B,EAAsCC,GAAtC,CAA2CC,KAAD,IAAW;AACnD,gBAAMC,MAAM,GAAGC,IAAI,CAACD,MAAL,EAAf;AACAD,UAAAA,KAAK,CAACG,KAAN,GAAcF,MAAM,IAAI,GAAV,GAAgBD,KAAK,CAACG,KAAN,GAAcF,MAA9B,GAAuCD,KAAK,CAACG,KAAN,GAAcF,MAAnE;AACA,eAAKyB,oBAAL;AACAzC,UAAAA,QAAQ,CAACC,MAAT,eAAgB,oBAAC,KAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YAAhB,EAA2ByC,QAAQ,CAACC,cAAT,CAAwB,MAAxB,CAA3B;AACA,iBAAO5B,KAAP;AACD,SAND,EAMGJ,SANH,CAMcI,KAAD,IAAWL,EAAE,CAACY,IAAH,CAAQP,KAAR,CANxB;AAOD,OARD;AASA,aAAO,MAAM,IAAb;AACD,KAXY,CAAb;AAYA,UAAM6B,CAAC,GAAGpC,IAAI,CAACG,SAAL,CAAgBI,KAAD,IAAW;AACjCA,MAAAA,KAAK,CAACG,KAAN,GAAcH,KAAK,CAACG,KAApB;AACD,KAFQ,CAAV;AAGD;;AAGA2B,EAAAA,iBAAiB,GAAG;AACjB,QAAIC,MAAM,GAAGC,MAAM,CAACC,IAAP,CAAY,KAAKZ,KAAL,CAAWvB,MAAX,CAAkB,CAAlB,CAAZ,CAAb;AACA,WAAOiC,MAAM,CAAChC,GAAP,CAAW,CAACmC,GAAD,EAAMC,KAAN,KAAgB;AAC/B,UAAGD,GAAG,IAAI,YAAV,EAAwB,oBAAO;AAAI,QAAA,KAAK,EAAE;AAAEE,UAAAA,OAAO,EAAE;AAAX,SAAX;AAAgC,QAAA,GAAG,EAAED,KAArC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAA6CD,GAAG,CAACG,WAAJ,EAA7C,CAAP,CAAxB,KACM,oBAAO;AAAI,QAAA,KAAK,EAAE;AAAED,UAAAA,OAAO,EAAE;AAAX,SAAX;AAAgC,QAAA,GAAG,EAAED,KAArC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAA6CD,GAAG,CAACG,WAAJ,EAA7C,CAAP;AACR,KAHM,CAAP;AAIF;;AAEDC,EAAAA,eAAe,GAAG;AACf,WAAO,KAAKjB,KAAL,CAAWvB,MAAX,CAAkBC,GAAlB,CAAsB,CAACC,KAAD,EAAQmC,KAAR,KAAkB;AAC5C,YAAM;AAAE1B,QAAAA,EAAF;AAAME,QAAAA,SAAN;AAAiBR,QAAAA,KAAjB;AAAwBC,QAAAA,UAAxB;AAAoCM,QAAAA;AAApC,UAA6CV,KAAnD,CAD4C,CACa;;AACzD,0BACG;AAAI,QAAA,GAAG,EAAES,EAAT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sBACG;AAAI,QAAA,KAAK,EAAE;AAAE2B,UAAAA,OAAO,EAAE;AAAX,SAAX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAAiC3B,EAAjC,CADH,eAEG;AAAI,QAAA,KAAK,EAAE;AAAE2B,UAAAA,OAAO,EAAE;AAAX,SAAX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAAiCzB,SAAjC,CAFH,eAGG;AAAI,QAAA,KAAK,EAAE;AAAEyB,UAAAA,OAAO,EAAE;AAAX,SAAX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAAiCjC,KAAjC,CAHH,eAIG;AAAI,QAAA,KAAK,EAAE;AAAEiC,UAAAA,OAAO,EAAE;AAAX,SAAX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAAiChC,UAAjC,CAJH,eAKG;AAAI,QAAA,KAAK,EAAE;AAAEgC,UAAAA,OAAO,EAAE;AAAX,SAAX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAAiC1B,IAAjC,CALH,CADH;AASF,KAXM,CAAP;AAYF;AACH;;;;;AAGExB,EAAAA,MAAM,GAAG;AAEP,UAAMqD,OAAO,GAAG,CACd;AACEC,MAAAA,IAAI,EAAE,IADR;AAEEC,MAAAA,QAAQ,EAAE,IAFZ;AAGEC,MAAAA,QAAQ,EAAE;AAHZ,KADc,EAMd;AACEF,MAAAA,IAAI,EAAE,WADR;AAEEC,MAAAA,QAAQ,EAAE,WAFZ;AAGEC,MAAAA,QAAQ,EAAE;AAHZ,KANc,EAWd;AACEF,MAAAA,IAAI,EAAE,OADR;AAEEC,MAAAA,QAAQ,EAAE,OAFZ;AAGEC,MAAAA,QAAQ,EAAE;AAHZ,KAXc,EAgBd;AACEF,MAAAA,IAAI,EAAE,YADR;AAEEC,MAAAA,QAAQ,EAAE,YAFZ;AAGEC,MAAAA,QAAQ,EAAE;AAHZ,KAhBc,EAqBd;AACEF,MAAAA,IAAI,EAAE,MADR;AAEEC,MAAAA,QAAQ,EAAE,MAFZ;AAGEC,MAAAA,QAAQ,EAAE;AAHZ,KArBc,CAAhB,CAFO,CA+BP;;AACC,wBACG;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACG;AAAI,MAAA,EAAE,EAAC,OAAP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,iCADH,eAEG;AAAO,MAAA,EAAE,EAAC,QAAV;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACG;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACA,oBAAC,SAAD;AACI,MAAA,KAAK,EAAC,aADV;AAEI,MAAA,OAAO,EAAEH,OAFb;AAGI,MAAA,IAAI,EAAE,KAAKlB,KAAL,CAAWvB,MAHrB;AAII,MAAA,gBAAgB,EAAC,OAJrB;AAKI,MAAA,oBAAoB,EAAE,KAAKwB,WAL/B;AAMI,MAAA,cAAc,MANlB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADA,CADH,CAFH,CADH;AAiBF;;AAxGiC;;AA2GpCrC,QAAQ,CAACC,MAAT,eAAgB,oBAAC,KAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAAhB,EAA2ByC,QAAQ,CAACC,cAAT,CAAwB,MAAxB,CAA3B;AAEAzC,aAAa,CAACwD,UAAd","sourcesContent":["import React, { Component } from 'react'\r\nimport ReactDOM from 'react-dom';\r\nimport { render } from 'react-dom'\r\nimport './index.css'\r\nimport * as serviceWorker from './serviceWorker'\r\nimport './App.css';\r\nimport Rx from 'rxjs/Rx'\r\nimport DataTable from 'react-data-table-component';\r\n\r\n\r\nconst timeObservable = Rx.Observable.interval(9000);\r\nexport const mock = Rx.Observable.create((ob) => {\r\n\ttimeObservable.subscribe(() => {\r\n\t  Rx.Observable.from(assets)\r\n\t\t.map(asset => {\r\n\t\t  const random = Math.random();\r\n\t\t  asset.price = random >= 0.5 ? asset.price + random : asset.price - random;\r\n        asset.lastUpdate = Date.now();\r\n\t\t  return asset;\r\n\t\t})\r\n\t\t.subscribe(asset => ob.next(asset));\r\n\t});\r\n\treturn () => null; // we don't care about unsubscribe just for a test\r\n});\r\n\r\nconst createAsset = (id, type) => {\r\n   return {\r\n     id: id,\r\n     assetName: type === 'Stock' ? ['AAPL','GOOGL','FB', 'TSLA', 'MSFT'][Math.floor(Math.random() * 4)] : ['EUR','USD','GBP', 'NIS', 'AUD'][Math.floor(Math.random() * 4)],\r\n     price: Math.random()*13,\r\n     lastUpdate: Date.now(),//new Date(Date.now()).toString().slice(3,24),\r\n     type: type\r\n   }\r\n };\r\n \r\n const getAllAssets = (n) => {\r\n   const result = [];\r\n   for (let i = 0; i < n; i++) {\r\n     result.push(createAsset(i, 'Stock'));\r\n     result.push(createAsset(i+n, 'Currency'));\r\n   }\r\n   return result;\r\n }\r\n \r\nconst assets = getAllAssets(200);\r\n\r\n\r\nclass Table extends React.Component {\r\n  constructor(props) {\r\n     super(props)\r\n     this.state = {\r\n        assets: getAllAssets(200)\r\n     }\r\n     this.updateState = state => {\r\n      this.setState({ selectedRows: state.selectedRows }); // triggers MyComponent to re-render with new state\r\n    }\r\n  }\r\n\r\n componentDidMount() {\r\n   const mock = Rx.Observable.create((ob) => {\r\n     timeObservable.subscribe(() => {\r\n       Rx.Observable.from(this.state.assets).map((asset) => {\r\n         const random = Math.random();\r\n         asset.price = random >= 0.5 ? asset.price + random : asset.price - random;\r\n         this.onSelectedRowsChange();\r\n         ReactDOM.render(<Table />, document.getElementById('root'));\r\n         return asset;\r\n       }).subscribe((asset) => ob.next(asset));\r\n     });\r\n     return () => null;\r\n   });\r\n   const p = mock.subscribe((asset) => {\r\n      asset.price = asset.price;\r\n    });\r\n }\r\n\r\n\r\n  renderTableHeader() {\r\n     let header = Object.keys(this.state.assets[0])\r\n     return header.map((key, index) => {\r\n        if(key == \"lastUpdate\") return <th style={{ padding: \"15px\" }} key={index}>{key.toUpperCase()}</th>\r\n         else return <th style={{ padding: \"15px\" }} key={index}>{key.toUpperCase()}</th>\r\n     })\r\n  }\r\n\r\n  renderTableData() {\r\n     return this.state.assets.map((asset, index) => {\r\n        const { id, assetName, price, lastUpdate, type } = asset //destructuring\r\n        return (\r\n           <tr key={id}>\r\n              <td style={{ padding: \"15px\" }}>{id}</td>\r\n              <td style={{ padding: \"15px\" }}>{assetName}</td>\r\n              <td style={{ padding: \"15px\" }}>{price}</td>\r\n              <td style={{ padding: \"15px\" }}>{lastUpdate}</td>\r\n              <td style={{ padding: \"15px\" }}>{type}</td>\r\n           </tr>\r\n        )\r\n     })\r\n  }\r\n/*//                 <tr>{this.renderTableHeader()}</tr>\r\n  //               {this.renderTableData()}\r\n*/\r\n  render() {\r\n\r\n    const columns = [\r\n      {\r\n        name: 'id',\r\n        selector: 'id',\r\n        sortable: true,\r\n      },\r\n      {\r\n        name: 'assetName',\r\n        selector: 'assetName',\r\n        sortable: true,\r\n      },\r\n      {\r\n        name: 'price',\r\n        selector: 'price',\r\n        sortable: true,\r\n      },\r\n      {\r\n        name: 'lastUpdate',\r\n        selector: 'lastUpdate',\r\n        sortable: true,\r\n      },\r\n      {\r\n        name: 'type',\r\n        selector: 'type',\r\n        sortable: true,\r\n      },\r\n    ];\r\n    \r\n\r\n    //const domContainer = document.querySelector('#Table');\r\n     return (\r\n        <div>\r\n           <h1 id='title'>Assets Realtime Details</h1>\r\n           <table id='assets'>\r\n              <tbody>\r\n              <DataTable\r\n                  title=\"Assets List\"\r\n                  columns={columns}\r\n                  data={this.state.assets}\r\n                  defaultSortField=\"price\"\r\n                  onSelectedRowsChange={this.updateState}\r\n                  selectableRows\r\n                /> \r\n              </tbody>\r\n           </table>\r\n        </div>\r\n     )\r\n  }\r\n}\r\n\r\nReactDOM.render(<Table />, document.getElementById('root'));\r\n\r\nserviceWorker.unregister()"]},"metadata":{},"sourceType":"module"}