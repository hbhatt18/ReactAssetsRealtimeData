{"ast":null,"code":"\"use strict\";\n\nvar __extends = this && this.__extends || function (d, b) {\n  for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n\n  function __() {\n    this.constructor = d;\n  }\n\n  d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\n\nvar Subscriber_1 = require('../Subscriber');\n/* tslint:enable:max-line-length */\n\n/**\n * Emits a given value if the source Observable completes without emitting any\n * `next` value, otherwise mirrors the source Observable.\n *\n * <span class=\"informal\">If the source Observable turns out to be empty, then\n * this operator will emit a default value.</span>\n *\n * <img src=\"./img/defaultIfEmpty.png\" width=\"100%\">\n *\n * `defaultIfEmpty` emits the values emitted by the source Observable or a\n * specified default value if the source Observable is empty (completes without\n * having emitted any `next` value).\n *\n * @example <caption>If no clicks happen in 5 seconds, then emit \"no clicks\"</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var clicksBeforeFive = clicks.takeUntil(Rx.Observable.interval(5000));\n * var result = clicksBeforeFive.defaultIfEmpty('no clicks');\n * result.subscribe(x => console.log(x));\n *\n * @see {@link empty}\n * @see {@link last}\n *\n * @param {any} [defaultValue=null] The default value used if the source\n * Observable is empty.\n * @return {Observable} An Observable that emits either the specified\n * `defaultValue` if the source Observable emits no items, or the values emitted\n * by the source Observable.\n * @method defaultIfEmpty\n * @owner Observable\n */\n\n\nfunction defaultIfEmpty(defaultValue) {\n  if (defaultValue === void 0) {\n    defaultValue = null;\n  }\n\n  return function (source) {\n    return source.lift(new DefaultIfEmptyOperator(defaultValue));\n  };\n}\n\nexports.defaultIfEmpty = defaultIfEmpty;\n\nvar DefaultIfEmptyOperator = function () {\n  function DefaultIfEmptyOperator(defaultValue) {\n    this.defaultValue = defaultValue;\n  }\n\n  DefaultIfEmptyOperator.prototype.call = function (subscriber, source) {\n    return source.subscribe(new DefaultIfEmptySubscriber(subscriber, this.defaultValue));\n  };\n\n  return DefaultIfEmptyOperator;\n}();\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\n\n\nvar DefaultIfEmptySubscriber = function (_super) {\n  __extends(DefaultIfEmptySubscriber, _super);\n\n  function DefaultIfEmptySubscriber(destination, defaultValue) {\n    _super.call(this, destination);\n\n    this.defaultValue = defaultValue;\n    this.isEmpty = true;\n  }\n\n  DefaultIfEmptySubscriber.prototype._next = function (value) {\n    this.isEmpty = false;\n    this.destination.next(value);\n  };\n\n  DefaultIfEmptySubscriber.prototype._complete = function () {\n    if (this.isEmpty) {\n      this.destination.next(this.defaultValue);\n    }\n\n    this.destination.complete();\n  };\n\n  return DefaultIfEmptySubscriber;\n}(Subscriber_1.Subscriber);","map":{"version":3,"sources":["../../src/operators/defaultIfEmpty.ts"],"names":[],"mappings":";;;;;;;;;;;;AAEA,IAAA,YAAA,GAAA,OAAA,CAA2B,eAA3B,CAAA;AAMA;;AAEA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA8BA,SAAA,cAAA,CAAqC,YAArC,EAA2D;AAAtB,MAAA,YAAA,KAAA,KAAA,CAAA,EAAsB;AAAtB,IAAA,YAAA,GAAA,IAAA;AAAsB;;AACzD,SAAO,UAAC,MAAD,EAAsB;AAAK,WAAA,MAAM,CAAC,IAAP,CAAY,IAAI,sBAAJ,CAAZ,YAAY,CAAZ,CAAA;AAA0E,GAA5G;AACD;;AAFe,OAAA,CAAA,cAAA,GAAc,cAAd;;AAIhB,IAAA,sBAAA,GAAA,YAAA;AAEE,WAAA,sBAAA,CAAoB,YAApB,EAAmC;AAAf,SAAA,YAAA,GAAA,YAAA;AACnB;;AAED,EAAA,sBAAA,CAAA,SAAA,CAAA,IAAA,GAAA,UAAK,UAAL,EAAoC,MAApC,EAA+C;AAC7C,WAAO,MAAM,CAAC,SAAP,CAAiB,IAAI,wBAAJ,CAA6B,UAA7B,EAAyC,KAAK,YAA9C,CAAjB,CAAP;AACD,GAFD;;AAGF,SAAA,sBAAA;AAAC,CARD,EAAA;AAUA;;;;;;;AAKA,IAAA,wBAAA,GAAA,UAAA,MAAA,EAAA;AAA6C,EAAA,SAAA,CAAA,wBAAA,EAAA,MAAA,CAAA;;AAG3C,WAAA,wBAAA,CAAY,WAAZ,EAAoD,YAApD,EAAmE;AACjE,IAAA,MAAA,CAAA,IAAA,CAAA,IAAA,EAAM,WAAN;;AADkD,SAAA,YAAA,GAAA,YAAA;AAF5C,SAAA,OAAA,GAAmB,IAAnB;AAIP;;AAES,EAAA,wBAAA,CAAA,SAAA,CAAA,KAAA,GAAV,UAAgB,KAAhB,EAAwB;AACtB,SAAK,OAAL,GAAe,KAAf;AACA,SAAK,WAAL,CAAiB,IAAjB,CAAsB,KAAtB;AACD,GAHS;;AAKA,EAAA,wBAAA,CAAA,SAAA,CAAA,SAAA,GAAV,YAAA;AACE,QAAI,KAAK,OAAT,EAAkB;AAChB,WAAK,WAAL,CAAiB,IAAjB,CAAsB,KAAK,YAA3B;AACD;;AACD,SAAK,WAAL,CAAiB,QAAjB;AACD,GALS;;AAMZ,SAAA,wBAAA;AAAC,CAlBD,CAA6C,YAAA,CAAA,UAA7C,CAAA","sourcesContent":["import { Operator } from '../Operator';\nimport { Observable } from '../Observable';\nimport { Subscriber } from '../Subscriber';\nimport { OperatorFunction, MonoTypeOperatorFunction } from '../interfaces';\n\n/* tslint:disable:max-line-length */\nexport function defaultIfEmpty<T>(defaultValue?: T): MonoTypeOperatorFunction<T>;\nexport function defaultIfEmpty<T, R>(defaultValue?: R): OperatorFunction<T, T | R>;\n/* tslint:enable:max-line-length */\n\n/**\n * Emits a given value if the source Observable completes without emitting any\n * `next` value, otherwise mirrors the source Observable.\n *\n * <span class=\"informal\">If the source Observable turns out to be empty, then\n * this operator will emit a default value.</span>\n *\n * <img src=\"./img/defaultIfEmpty.png\" width=\"100%\">\n *\n * `defaultIfEmpty` emits the values emitted by the source Observable or a\n * specified default value if the source Observable is empty (completes without\n * having emitted any `next` value).\n *\n * @example <caption>If no clicks happen in 5 seconds, then emit \"no clicks\"</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var clicksBeforeFive = clicks.takeUntil(Rx.Observable.interval(5000));\n * var result = clicksBeforeFive.defaultIfEmpty('no clicks');\n * result.subscribe(x => console.log(x));\n *\n * @see {@link empty}\n * @see {@link last}\n *\n * @param {any} [defaultValue=null] The default value used if the source\n * Observable is empty.\n * @return {Observable} An Observable that emits either the specified\n * `defaultValue` if the source Observable emits no items, or the values emitted\n * by the source Observable.\n * @method defaultIfEmpty\n * @owner Observable\n */\nexport function defaultIfEmpty<T, R>(defaultValue: R = null): OperatorFunction<T, T | R> {\n  return (source: Observable<T>) => source.lift(new DefaultIfEmptyOperator(defaultValue)) as Observable<T | R>;\n}\n\nclass DefaultIfEmptyOperator<T, R> implements Operator<T, T | R> {\n\n  constructor(private defaultValue: R) {\n  }\n\n  call(subscriber: Subscriber<T | R>, source: any): any {\n    return source.subscribe(new DefaultIfEmptySubscriber(subscriber, this.defaultValue));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass DefaultIfEmptySubscriber<T, R> extends Subscriber<T> {\n  private isEmpty: boolean = true;\n\n  constructor(destination: Subscriber<T | R>, private defaultValue: R) {\n    super(destination);\n  }\n\n  protected _next(value: T): void {\n    this.isEmpty = false;\n    this.destination.next(value);\n  }\n\n  protected _complete(): void {\n    if (this.isEmpty) {\n      this.destination.next(this.defaultValue);\n    }\n    this.destination.complete();\n  }\n}"],"sourceRoot":""},"metadata":{},"sourceType":"script"}