{"ast":null,"code":"\"use strict\";\n\nvar ReplaySubject_1 = require('../ReplaySubject');\n/**\n * @method shareReplay\n * @owner Observable\n */\n\n\nfunction shareReplay(bufferSize, windowTime, scheduler) {\n  return function (source) {\n    return source.lift(shareReplayOperator(bufferSize, windowTime, scheduler));\n  };\n}\n\nexports.shareReplay = shareReplay;\n\nfunction shareReplayOperator(bufferSize, windowTime, scheduler) {\n  var subject;\n  var refCount = 0;\n  var subscription;\n  var hasError = false;\n  var isComplete = false;\n  return function shareReplayOperation(source) {\n    refCount++;\n\n    if (!subject || hasError) {\n      hasError = false;\n      subject = new ReplaySubject_1.ReplaySubject(bufferSize, windowTime, scheduler);\n      subscription = source.subscribe({\n        next: function (value) {\n          subject.next(value);\n        },\n        error: function (err) {\n          hasError = true;\n          subject.error(err);\n        },\n        complete: function () {\n          isComplete = true;\n          subject.complete();\n        }\n      });\n    }\n\n    var innerSub = subject.subscribe(this);\n    return function () {\n      refCount--;\n      innerSub.unsubscribe();\n\n      if (subscription && refCount === 0 && isComplete) {\n        subscription.unsubscribe();\n      }\n    };\n  };\n}\n\n;","map":{"version":3,"sources":["../../src/operators/shareReplay.ts"],"names":[],"mappings":";;AACA,IAAA,eAAA,GAAA,OAAA,CAA8B,kBAA9B,CAAA;AAMA;;;;;;AAIA,SAAA,WAAA,CAA+B,UAA/B,EAAoD,UAApD,EAAyE,SAAzE,EAA+F;AAC7F,SAAO,UAAC,MAAD,EAAsB;AAAK,WAAA,MAAM,CAAC,IAAP,CAAY,mBAAmB,CAAC,UAAD,EAAa,UAAb,EAA/B,SAA+B,CAA/B,CAAA;AAAmE,GAArG;AACD;;AAFe,OAAA,CAAA,WAAA,GAAW,WAAX;;AAIhB,SAAA,mBAAA,CAAgC,UAAhC,EAAqD,UAArD,EAA0E,SAA1E,EAAgG;AAC9F,MAAI,OAAJ;AACA,MAAI,QAAQ,GAAG,CAAf;AACA,MAAI,YAAJ;AACA,MAAI,QAAQ,GAAG,KAAf;AACA,MAAI,UAAU,GAAG,KAAjB;AAEA,SAAO,SAAA,oBAAA,CAAmD,MAAnD,EAAwE;AAC7E,IAAA,QAAQ;;AACR,QAAI,CAAC,OAAD,IAAY,QAAhB,EAA0B;AACxB,MAAA,QAAQ,GAAG,KAAX;AACA,MAAA,OAAO,GAAG,IAAI,eAAA,CAAA,aAAJ,CAAqB,UAArB,EAAiC,UAAjC,EAA6C,SAA7C,CAAV;AACA,MAAA,YAAY,GAAG,MAAM,CAAC,SAAP,CAAiB;AAC9B,QAAA,IAAI,EAAA,UAAC,KAAD,EAAM;AAAI,UAAA,OAAO,CAAC,IAAR,CAAa,KAAb;AAAsB,SADN;AAE9B,QAAA,KAAK,EAAA,UAAC,GAAD,EAAI;AACP,UAAA,QAAQ,GAAG,IAAX;AACA,UAAA,OAAO,CAAC,KAAR,CAAc,GAAd;AACD,SAL6B;AAM9B,QAAA,QAAQ,EAAA,YAAA;AACN,UAAA,UAAU,GAAG,IAAb;AACA,UAAA,OAAO,CAAC,QAAR;AACD;AAT6B,OAAjB,CAAf;AAWD;;AAED,QAAM,QAAQ,GAAG,OAAO,CAAC,SAAR,CAAkB,IAAlB,CAAjB;AAEA,WAAO,YAAA;AACL,MAAA,QAAQ;AACR,MAAA,QAAQ,CAAC,WAAT;;AACA,UAAI,YAAY,IAAI,QAAQ,KAAK,CAA7B,IAAkC,UAAtC,EAAkD;AAChD,QAAA,YAAY,CAAC,WAAb;AACD;AACF,KAND;AAOD,GA3BD;AA4BD;;AAAA","sourcesContent":["import { Observable } from '../Observable';\nimport { ReplaySubject } from '../ReplaySubject';\nimport { IScheduler } from '../Scheduler';\nimport { Subscription } from '../Subscription';\nimport { MonoTypeOperatorFunction } from '../interfaces';\nimport { Subscriber } from '../Subscriber';\n\n/**\n * @method shareReplay\n * @owner Observable\n */\nexport function shareReplay<T>(bufferSize?: number, windowTime?: number, scheduler?: IScheduler ): MonoTypeOperatorFunction<T> {\n  return (source: Observable<T>) => source.lift(shareReplayOperator(bufferSize, windowTime, scheduler));\n}\n\nfunction shareReplayOperator<T>(bufferSize?: number, windowTime?: number, scheduler?: IScheduler) {\n  let subject: ReplaySubject<T>;\n  let refCount = 0;\n  let subscription: Subscription;\n  let hasError = false;\n  let isComplete = false;\n\n  return function shareReplayOperation(this: Subscriber<T>, source: Observable<T>) {\n    refCount++;\n    if (!subject || hasError) {\n      hasError = false;\n      subject = new ReplaySubject<T>(bufferSize, windowTime, scheduler);\n      subscription = source.subscribe({\n        next(value) { subject.next(value); },\n        error(err) {\n          hasError = true;\n          subject.error(err);\n        },\n        complete() {\n          isComplete = true;\n          subject.complete();\n        },\n      });\n    }\n\n    const innerSub = subject.subscribe(this);\n\n    return () => {\n      refCount--;\n      innerSub.unsubscribe();\n      if (subscription && refCount === 0 && isComplete) {\n        subscription.unsubscribe();\n      }\n    };\n  };\n};\n"],"sourceRoot":""},"metadata":{},"sourceType":"script"}