{"ast":null,"code":"\"use strict\";\n\nvar skipWhile_1 = require('../operators/skipWhile');\n/**\n * Returns an Observable that skips all items emitted by the source Observable as long as a specified condition holds\n * true, but emits all further source items as soon as the condition becomes false.\n *\n * <img src=\"./img/skipWhile.png\" width=\"100%\">\n *\n * @param {Function} predicate - A function to test each item emitted from the source Observable.\n * @return {Observable<T>} An Observable that begins emitting items emitted by the source Observable when the\n * specified predicate becomes false.\n * @method skipWhile\n * @owner Observable\n */\n\n\nfunction skipWhile(predicate) {\n  return skipWhile_1.skipWhile(predicate)(this);\n}\n\nexports.skipWhile = skipWhile;","map":{"version":3,"sources":["../../src/operator/skipWhile.ts"],"names":[],"mappings":";;AACA,IAAA,WAAA,GAAA,OAAA,CAAyC,wBAAzC,CAAA;AAEA;;;;;;;;;;;;;;AAYA,SAAA,SAAA,CAAkD,SAAlD,EAAiG;AAC/F,SAAO,WAAA,CAAA,SAAA,CAAY,SAAZ,EAAuB,IAAvB,CAAP;AACD;;AAFe,OAAA,CAAA,SAAA,GAAS,SAAT","sourcesContent":["import { Observable } from '../Observable';\nimport { skipWhile as higherOrder } from '../operators/skipWhile';\n\n/**\n * Returns an Observable that skips all items emitted by the source Observable as long as a specified condition holds\n * true, but emits all further source items as soon as the condition becomes false.\n *\n * <img src=\"./img/skipWhile.png\" width=\"100%\">\n *\n * @param {Function} predicate - A function to test each item emitted from the source Observable.\n * @return {Observable<T>} An Observable that begins emitting items emitted by the source Observable when the\n * specified predicate becomes false.\n * @method skipWhile\n * @owner Observable\n */\nexport function skipWhile<T>(this: Observable<T>, predicate: (value: T, index: number) => boolean): Observable<T> {\n  return higherOrder(predicate)(this);\n}\n"],"sourceRoot":""},"metadata":{},"sourceType":"script"}