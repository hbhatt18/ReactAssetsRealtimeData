{"ast":null,"code":"\"use strict\";\n\nvar Subject_1 = require('../Subject');\n\nvar multicast_1 = require('./multicast');\n/* tslint:enable:max-line-length */\n\n/**\n * Returns a ConnectableObservable, which is a variety of Observable that waits until its connect method is called\n * before it begins emitting items to those Observers that have subscribed to it.\n *\n * <img src=\"./img/publish.png\" width=\"100%\">\n *\n * @param {Function} [selector] - Optional selector function which can use the multicasted source sequence as many times\n * as needed, without causing multiple subscriptions to the source sequence.\n * Subscribers to the given source will receive all notifications of the source from the time of the subscription on.\n * @return A ConnectableObservable that upon connection causes the source Observable to emit items to its Observers.\n * @method publish\n * @owner Observable\n */\n\n\nfunction publish(selector) {\n  return selector ? multicast_1.multicast(function () {\n    return new Subject_1.Subject();\n  }, selector) : multicast_1.multicast(new Subject_1.Subject());\n}\n\nexports.publish = publish;","map":{"version":3,"sources":["../../src/operators/publish.ts"],"names":[],"mappings":";;AACA,IAAA,SAAA,GAAA,OAAA,CAAwB,YAAxB,CAAA;;AACA,IAAA,WAAA,GAAA,OAAA,CAA0B,aAA1B,CAAA;AAQA;;AAEA;;;;;;;;;;;;;;;AAaA,SAAA,OAAA,CAA8B,QAA9B,EAA+D;AAC7D,SAAO,QAAQ,GACb,WAAA,CAAA,SAAA,CAAU,YAAA;AAAM,WAAA,IAAI,SAAA,CAAJ,OAAA,EAAA;AAAgB,GAAhC,EAAkC,QAAlC,CADa,GAEb,WAAA,CAAA,SAAA,CAAU,IAAI,SAAA,CAAA,OAAJ,EAAV,CAFF;AAGD;;AAJe,OAAA,CAAA,OAAA,GAAO,OAAP","sourcesContent":["import { Observable } from '../Observable';\nimport { Subject } from '../Subject';\nimport { multicast } from './multicast';\nimport { ConnectableObservable } from '../observable/ConnectableObservable';\nimport { MonoTypeOperatorFunction, OperatorFunction, UnaryFunction } from '../interfaces';\n\n/* tslint:disable:max-line-length */\nexport function publish<T>(): UnaryFunction<Observable<T>, ConnectableObservable<T>>;\nexport function publish<T>(selector: MonoTypeOperatorFunction<T>): MonoTypeOperatorFunction<T>;\nexport function publish<T, R>(selector: OperatorFunction<T, R>): OperatorFunction<T, R>;\n/* tslint:enable:max-line-length */\n\n/**\n * Returns a ConnectableObservable, which is a variety of Observable that waits until its connect method is called\n * before it begins emitting items to those Observers that have subscribed to it.\n *\n * <img src=\"./img/publish.png\" width=\"100%\">\n *\n * @param {Function} [selector] - Optional selector function which can use the multicasted source sequence as many times\n * as needed, without causing multiple subscriptions to the source sequence.\n * Subscribers to the given source will receive all notifications of the source from the time of the subscription on.\n * @return A ConnectableObservable that upon connection causes the source Observable to emit items to its Observers.\n * @method publish\n * @owner Observable\n */\nexport function publish<T, R>(selector?: OperatorFunction<T, R>): MonoTypeOperatorFunction<T> | OperatorFunction<T, R> {\n  return selector ?\n    multicast(() => new Subject<T>(), selector) :\n    multicast(new Subject<T>());\n}\n"],"sourceRoot":""},"metadata":{},"sourceType":"script"}