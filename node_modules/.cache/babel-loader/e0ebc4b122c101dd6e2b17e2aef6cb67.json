{"ast":null,"code":"\"use strict\";\n\nvar __extends = this && this.__extends || function (d, b) {\n  for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n\n  function __() {\n    this.constructor = d;\n  }\n\n  d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\n\nvar Observable_1 = require('../Observable');\n\nvar subscribeToResult_1 = require('../util/subscribeToResult');\n\nvar OuterSubscriber_1 = require('../OuterSubscriber');\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @extends {Ignored}\n * @hide true\n */\n\n\nvar UsingObservable = function (_super) {\n  __extends(UsingObservable, _super);\n\n  function UsingObservable(resourceFactory, observableFactory) {\n    _super.call(this);\n\n    this.resourceFactory = resourceFactory;\n    this.observableFactory = observableFactory;\n  }\n\n  UsingObservable.create = function (resourceFactory, observableFactory) {\n    return new UsingObservable(resourceFactory, observableFactory);\n  };\n  /** @deprecated internal use only */\n\n\n  UsingObservable.prototype._subscribe = function (subscriber) {\n    var _a = this,\n        resourceFactory = _a.resourceFactory,\n        observableFactory = _a.observableFactory;\n\n    var resource;\n\n    try {\n      resource = resourceFactory();\n      return new UsingSubscriber(subscriber, resource, observableFactory);\n    } catch (err) {\n      subscriber.error(err);\n    }\n  };\n\n  return UsingObservable;\n}(Observable_1.Observable);\n\nexports.UsingObservable = UsingObservable;\n\nvar UsingSubscriber = function (_super) {\n  __extends(UsingSubscriber, _super);\n\n  function UsingSubscriber(destination, resource, observableFactory) {\n    _super.call(this, destination);\n\n    this.resource = resource;\n    this.observableFactory = observableFactory;\n    destination.add(resource);\n    this.tryUse();\n  }\n\n  UsingSubscriber.prototype.tryUse = function () {\n    try {\n      var source = this.observableFactory.call(this, this.resource);\n\n      if (source) {\n        this.add(subscribeToResult_1.subscribeToResult(this, source));\n      }\n    } catch (err) {\n      this._error(err);\n    }\n  };\n\n  return UsingSubscriber;\n}(OuterSubscriber_1.OuterSubscriber);","map":{"version":3,"sources":["../../src/observable/UsingObservable.ts"],"names":[],"mappings":";;;;;;;;;;;;AAAA,IAAA,YAAA,GAAA,OAAA,CAAkD,eAAlD,CAAA;;AAIA,IAAA,mBAAA,GAAA,OAAA,CAAkC,2BAAlC,CAAA;;AACA,IAAA,iBAAA,GAAA,OAAA,CAAgC,oBAAhC,CAAA;AACA;;;;;;;AAKA,IAAA,eAAA,GAAA,UAAA,MAAA,EAAA;AAAwC,EAAA,SAAA,CAAA,eAAA,EAAA,MAAA,CAAA;;AAOtC,WAAA,eAAA,CAAoB,eAApB,EACoB,iBADpB,EAC2G;AACzG,IAAA,MAAA,CAAA,IAAA,CAAA,IAAA;;AAFkB,SAAA,eAAA,GAAA,eAAA;AACA,SAAA,iBAAA,GAAA,iBAAA;AAEnB;;AARM,EAAA,eAAA,CAAA,MAAA,GAAP,UAAiB,eAAjB,EACiB,iBADjB,EACwG;AACtG,WAAO,IAAI,eAAJ,CAAuB,eAAvB,EAAwC,iBAAxC,CAAP;AACD,GAHM;AAUP;;;AAAqC,EAAA,eAAA,CAAA,SAAA,CAAA,UAAA,GAAA,UAAW,UAAX,EAAoC;AACvE,QAAA,EAAA,GAAA,IAAA;AAAA,QAAQ,eAAA,GAAA,EAAA,CAAA,eAAR;AAAA,QAAyB,iBAAA,GAAA,EAAA,CAAA,iBAAzB;;AAEA,QAAI,QAAJ;;AAEA,QAAI;AACF,MAAA,QAAQ,GAA0B,eAAe,EAAjD;AACA,aAAO,IAAI,eAAJ,CAAoB,UAApB,EAAgC,QAAhC,EAA0C,iBAA1C,CAAP;AACA,KAHF,CAGE,OAAO,GAAP,EAAY;AACZ,MAAA,UAAU,CAAC,KAAX,CAAiB,GAAjB;AACD;AACF,GAXoC;;AAYvC,SAAA,eAAA;AAAC,CAxBD,CAAwC,YAAA,CAAA,UAAxC,CAAA;;AAAa,OAAA,CAAA,eAAA,GAAe,eAAf;;AA0Bb,IAAA,eAAA,GAAA,UAAA,MAAA,EAAA;AAAiC,EAAA,SAAA,CAAA,eAAA,EAAA,MAAA,CAAA;;AAC/B,WAAA,eAAA,CAAY,WAAZ,EACoB,QADpB,EAEoB,iBAFpB,EAE2G;AACzG,IAAA,MAAA,CAAA,IAAA,CAAA,IAAA,EAAM,WAAN;;AAFkB,SAAA,QAAA,GAAA,QAAA;AACA,SAAA,iBAAA,GAAA,iBAAA;AAElB,IAAA,WAAW,CAAC,GAAZ,CAAgB,QAAhB;AACA,SAAK,MAAL;AACD;;AAEO,EAAA,eAAA,CAAA,SAAA,CAAA,MAAA,GAAR,YAAA;AACE,QAAI;AACF,UAAM,MAAM,GAAG,KAAK,iBAAL,CAAuB,IAAvB,CAA4B,IAA5B,EAAkC,KAAK,QAAvC,CAAf;;AACA,UAAI,MAAJ,EAAY;AACV,aAAK,GAAL,CAAS,mBAAA,CAAA,iBAAA,CAAkB,IAAlB,EAAwB,MAAxB,CAAT;AACD;AACD,KALF,CAKE,OAAO,GAAP,EAAY;AACZ,WAAK,MAAL,CAAY,GAAZ;AACD;AACF,GATO;;AAUV,SAAA,eAAA;AAAC,CAnBD,CAAiC,iBAAA,CAAA,eAAjC,CAAA","sourcesContent":["import { Observable, SubscribableOrPromise } from '../Observable';\nimport { Subscriber } from '../Subscriber';\nimport { AnonymousSubscription, TeardownLogic } from '../Subscription';\n\nimport { subscribeToResult } from '../util/subscribeToResult';\nimport { OuterSubscriber } from '../OuterSubscriber';\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @extends {Ignored}\n * @hide true\n */\nexport class UsingObservable<T> extends Observable<T> {\n\n  static create<T>(resourceFactory: () => AnonymousSubscription | void,\n                   observableFactory: (resource: AnonymousSubscription) => SubscribableOrPromise<T> | void): Observable<T> {\n    return new UsingObservable<T>(resourceFactory, observableFactory);\n  }\n\n  constructor(private resourceFactory: () => AnonymousSubscription | void,\n              private observableFactory: (resource: AnonymousSubscription) => SubscribableOrPromise<T> | void) {\n    super();\n  }\n\n  /** @deprecated internal use only */ _subscribe(subscriber: Subscriber<T>): TeardownLogic {\n    const { resourceFactory, observableFactory } = this;\n\n    let resource: AnonymousSubscription;\n\n    try {\n      resource = <AnonymousSubscription>resourceFactory();\n      return new UsingSubscriber(subscriber, resource, observableFactory);\n    } catch (err) {\n      subscriber.error(err);\n    }\n  }\n}\n\nclass UsingSubscriber<T> extends OuterSubscriber<T, T> {\n  constructor(destination: Subscriber<T>,\n              private resource: AnonymousSubscription,\n              private observableFactory: (resource: AnonymousSubscription) => SubscribableOrPromise<T> | void) {\n    super(destination);\n    destination.add(resource);\n    this.tryUse();\n  }\n\n  private tryUse(): void {\n    try {\n      const source = this.observableFactory.call(this, this.resource);\n      if (source) {\n        this.add(subscribeToResult(this, source));\n      }\n    } catch (err) {\n      this._error(err);\n    }\n  }\n}\n"],"sourceRoot":""},"metadata":{},"sourceType":"script"}