{"ast":null,"code":"\"use strict\";\n\nvar __extends = this && this.__extends || function (d, b) {\n  for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n\n  function __() {\n    this.constructor = d;\n  }\n\n  d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\n\nvar Subscriber_1 = require('../Subscriber');\n/**\n * Returns an Observable that mirrors the source Observable with the exception of an `error`. If the source Observable\n * calls `error`, this method will resubscribe to the source Observable for a maximum of `count` resubscriptions (given\n * as a number parameter) rather than propagating the `error` call.\n *\n * <img src=\"./img/retry.png\" width=\"100%\">\n *\n * Any and all items emitted by the source Observable will be emitted by the resulting Observable, even those emitted\n * during failed subscriptions. For example, if an Observable fails at first but emits [1, 2] then succeeds the second\n * time and emits: [1, 2, 3, 4, 5] then the complete stream of emissions and notifications\n * would be: [1, 2, 1, 2, 3, 4, 5, `complete`].\n * @param {number} count - Number of retry attempts before failing.\n * @return {Observable} The source Observable modified with the retry logic.\n * @method retry\n * @owner Observable\n */\n\n\nfunction retry(count) {\n  if (count === void 0) {\n    count = -1;\n  }\n\n  return function (source) {\n    return source.lift(new RetryOperator(count, source));\n  };\n}\n\nexports.retry = retry;\n\nvar RetryOperator = function () {\n  function RetryOperator(count, source) {\n    this.count = count;\n    this.source = source;\n  }\n\n  RetryOperator.prototype.call = function (subscriber, source) {\n    return source.subscribe(new RetrySubscriber(subscriber, this.count, this.source));\n  };\n\n  return RetryOperator;\n}();\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\n\n\nvar RetrySubscriber = function (_super) {\n  __extends(RetrySubscriber, _super);\n\n  function RetrySubscriber(destination, count, source) {\n    _super.call(this, destination);\n\n    this.count = count;\n    this.source = source;\n  }\n\n  RetrySubscriber.prototype.error = function (err) {\n    if (!this.isStopped) {\n      var _a = this,\n          source = _a.source,\n          count = _a.count;\n\n      if (count === 0) {\n        return _super.prototype.error.call(this, err);\n      } else if (count > -1) {\n        this.count = count - 1;\n      }\n\n      source.subscribe(this._unsubscribeAndRecycle());\n    }\n  };\n\n  return RetrySubscriber;\n}(Subscriber_1.Subscriber);","map":{"version":3,"sources":["../../src/operators/retry.ts"],"names":[],"mappings":";;;;;;;;;;;;AACA,IAAA,YAAA,GAAA,OAAA,CAA2B,eAA3B,CAAA;AAMA;;;;;;;;;;;;;;;;;;AAgBA,SAAA,KAAA,CAAyB,KAAzB,EAA2C;AAAlB,MAAA,KAAA,KAAA,KAAA,CAAA,EAAkB;AAAlB,IAAA,KAAA,GAAA,CAAiB,CAAjB;AAAkB;;AACzC,SAAO,UAAC,MAAD,EAAsB;AAAK,WAAA,MAAM,CAAC,IAAP,CAAY,IAAI,aAAJ,CAAkB,KAAlB,EAAZ,MAAY,CAAZ,CAAA;AAA6C,GAA/E;AACD;;AAFe,OAAA,CAAA,KAAA,GAAK,KAAL;;AAIhB,IAAA,aAAA,GAAA,YAAA;AACE,WAAA,aAAA,CAAoB,KAApB,EACoB,MADpB,EACyC;AADrB,SAAA,KAAA,GAAA,KAAA;AACA,SAAA,MAAA,GAAA,MAAA;AACnB;;AAED,EAAA,aAAA,CAAA,SAAA,CAAA,IAAA,GAAA,UAAK,UAAL,EAAgC,MAAhC,EAA2C;AACzC,WAAO,MAAM,CAAC,SAAP,CAAiB,IAAI,eAAJ,CAAoB,UAApB,EAAgC,KAAK,KAArC,EAA4C,KAAK,MAAjD,CAAjB,CAAP;AACD,GAFD;;AAGF,SAAA,aAAA;AAAC,CARD,EAAA;AAUA;;;;;;;AAKA,IAAA,eAAA,GAAA,UAAA,MAAA,EAAA;AAAiC,EAAA,SAAA,CAAA,eAAA,EAAA,MAAA,CAAA;;AAC/B,WAAA,eAAA,CAAY,WAAZ,EACoB,KADpB,EAEoB,MAFpB,EAEyC;AACvC,IAAA,MAAA,CAAA,IAAA,CAAA,IAAA,EAAM,WAAN;;AAFkB,SAAA,KAAA,GAAA,KAAA;AACA,SAAA,MAAA,GAAA,MAAA;AAEnB;;AACD,EAAA,eAAA,CAAA,SAAA,CAAA,KAAA,GAAA,UAAM,GAAN,EAAc;AACZ,QAAI,CAAC,KAAK,SAAV,EAAqB;AACnB,UAAA,EAAA,GAAA,IAAA;AAAA,UAAQ,MAAA,GAAA,EAAA,CAAA,MAAR;AAAA,UAAgB,KAAA,GAAA,EAAA,CAAA,KAAhB;;AACA,UAAI,KAAK,KAAK,CAAd,EAAiB;AACf,eAAO,MAAA,CAAA,SAAA,CAAM,KAAN,CAAW,IAAX,CAAW,IAAX,EAAY,GAAZ,CAAP;AACD,OAFD,MAEO,IAAI,KAAK,GAAG,CAAC,CAAb,EAAgB;AACrB,aAAK,KAAL,GAAa,KAAK,GAAG,CAArB;AACD;;AACD,MAAA,MAAM,CAAC,SAAP,CAAiB,KAAK,sBAAL,EAAjB;AACD;AACF,GAVD;;AAWF,SAAA,eAAA;AAAC,CAjBD,CAAiC,YAAA,CAAA,UAAjC,CAAA","sourcesContent":["import { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { Observable } from '../Observable';\nimport { TeardownLogic } from '../Subscription';\n\nimport { MonoTypeOperatorFunction } from '../interfaces';\n\n/**\n * Returns an Observable that mirrors the source Observable with the exception of an `error`. If the source Observable\n * calls `error`, this method will resubscribe to the source Observable for a maximum of `count` resubscriptions (given\n * as a number parameter) rather than propagating the `error` call.\n *\n * <img src=\"./img/retry.png\" width=\"100%\">\n *\n * Any and all items emitted by the source Observable will be emitted by the resulting Observable, even those emitted\n * during failed subscriptions. For example, if an Observable fails at first but emits [1, 2] then succeeds the second\n * time and emits: [1, 2, 3, 4, 5] then the complete stream of emissions and notifications\n * would be: [1, 2, 1, 2, 3, 4, 5, `complete`].\n * @param {number} count - Number of retry attempts before failing.\n * @return {Observable} The source Observable modified with the retry logic.\n * @method retry\n * @owner Observable\n */\nexport function retry<T>(count: number = -1): MonoTypeOperatorFunction<T> {\n  return (source: Observable<T>) => source.lift(new RetryOperator(count, source));\n}\n\nclass RetryOperator<T> implements Operator<T, T> {\n  constructor(private count: number,\n              private source: Observable<T>) {\n  }\n\n  call(subscriber: Subscriber<T>, source: any): TeardownLogic {\n    return source.subscribe(new RetrySubscriber(subscriber, this.count, this.source));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass RetrySubscriber<T> extends Subscriber<T> {\n  constructor(destination: Subscriber<any>,\n              private count: number,\n              private source: Observable<T>) {\n    super(destination);\n  }\n  error(err: any) {\n    if (!this.isStopped) {\n      const { source, count } = this;\n      if (count === 0) {\n        return super.error(err);\n      } else if (count > -1) {\n        this.count = count - 1;\n      }\n      source.subscribe(this._unsubscribeAndRecycle());\n    }\n  }\n}\n"],"sourceRoot":""},"metadata":{},"sourceType":"script"}