{"ast":null,"code":"\"use strict\";\n\nvar __extends = this && this.__extends || function (d, b) {\n  for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n\n  function __() {\n    this.constructor = d;\n  }\n\n  d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\n\nvar Subject_1 = require('../Subject');\n\nvar async_1 = require('../scheduler/async');\n\nvar Subscriber_1 = require('../Subscriber');\n\nvar isNumeric_1 = require('../util/isNumeric');\n\nvar isScheduler_1 = require('../util/isScheduler');\n\nfunction windowTime(windowTimeSpan) {\n  var scheduler = async_1.async;\n  var windowCreationInterval = null;\n  var maxWindowSize = Number.POSITIVE_INFINITY;\n\n  if (isScheduler_1.isScheduler(arguments[3])) {\n    scheduler = arguments[3];\n  }\n\n  if (isScheduler_1.isScheduler(arguments[2])) {\n    scheduler = arguments[2];\n  } else if (isNumeric_1.isNumeric(arguments[2])) {\n    maxWindowSize = arguments[2];\n  }\n\n  if (isScheduler_1.isScheduler(arguments[1])) {\n    scheduler = arguments[1];\n  } else if (isNumeric_1.isNumeric(arguments[1])) {\n    windowCreationInterval = arguments[1];\n  }\n\n  return function windowTimeOperatorFunction(source) {\n    return source.lift(new WindowTimeOperator(windowTimeSpan, windowCreationInterval, maxWindowSize, scheduler));\n  };\n}\n\nexports.windowTime = windowTime;\n\nvar WindowTimeOperator = function () {\n  function WindowTimeOperator(windowTimeSpan, windowCreationInterval, maxWindowSize, scheduler) {\n    this.windowTimeSpan = windowTimeSpan;\n    this.windowCreationInterval = windowCreationInterval;\n    this.maxWindowSize = maxWindowSize;\n    this.scheduler = scheduler;\n  }\n\n  WindowTimeOperator.prototype.call = function (subscriber, source) {\n    return source.subscribe(new WindowTimeSubscriber(subscriber, this.windowTimeSpan, this.windowCreationInterval, this.maxWindowSize, this.scheduler));\n  };\n\n  return WindowTimeOperator;\n}();\n\nvar CountedSubject = function (_super) {\n  __extends(CountedSubject, _super);\n\n  function CountedSubject() {\n    _super.apply(this, arguments);\n\n    this._numberOfNextedValues = 0;\n  }\n\n  CountedSubject.prototype.next = function (value) {\n    this._numberOfNextedValues++;\n\n    _super.prototype.next.call(this, value);\n  };\n\n  Object.defineProperty(CountedSubject.prototype, \"numberOfNextedValues\", {\n    get: function () {\n      return this._numberOfNextedValues;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  return CountedSubject;\n}(Subject_1.Subject);\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\n\n\nvar WindowTimeSubscriber = function (_super) {\n  __extends(WindowTimeSubscriber, _super);\n\n  function WindowTimeSubscriber(destination, windowTimeSpan, windowCreationInterval, maxWindowSize, scheduler) {\n    _super.call(this, destination);\n\n    this.destination = destination;\n    this.windowTimeSpan = windowTimeSpan;\n    this.windowCreationInterval = windowCreationInterval;\n    this.maxWindowSize = maxWindowSize;\n    this.scheduler = scheduler;\n    this.windows = [];\n    var window = this.openWindow();\n\n    if (windowCreationInterval !== null && windowCreationInterval >= 0) {\n      var closeState = {\n        subscriber: this,\n        window: window,\n        context: null\n      };\n      var creationState = {\n        windowTimeSpan: windowTimeSpan,\n        windowCreationInterval: windowCreationInterval,\n        subscriber: this,\n        scheduler: scheduler\n      };\n      this.add(scheduler.schedule(dispatchWindowClose, windowTimeSpan, closeState));\n      this.add(scheduler.schedule(dispatchWindowCreation, windowCreationInterval, creationState));\n    } else {\n      var timeSpanOnlyState = {\n        subscriber: this,\n        window: window,\n        windowTimeSpan: windowTimeSpan\n      };\n      this.add(scheduler.schedule(dispatchWindowTimeSpanOnly, windowTimeSpan, timeSpanOnlyState));\n    }\n  }\n\n  WindowTimeSubscriber.prototype._next = function (value) {\n    var windows = this.windows;\n    var len = windows.length;\n\n    for (var i = 0; i < len; i++) {\n      var window_1 = windows[i];\n\n      if (!window_1.closed) {\n        window_1.next(value);\n\n        if (window_1.numberOfNextedValues >= this.maxWindowSize) {\n          this.closeWindow(window_1);\n        }\n      }\n    }\n  };\n\n  WindowTimeSubscriber.prototype._error = function (err) {\n    var windows = this.windows;\n\n    while (windows.length > 0) {\n      windows.shift().error(err);\n    }\n\n    this.destination.error(err);\n  };\n\n  WindowTimeSubscriber.prototype._complete = function () {\n    var windows = this.windows;\n\n    while (windows.length > 0) {\n      var window_2 = windows.shift();\n\n      if (!window_2.closed) {\n        window_2.complete();\n      }\n    }\n\n    this.destination.complete();\n  };\n\n  WindowTimeSubscriber.prototype.openWindow = function () {\n    var window = new CountedSubject();\n    this.windows.push(window);\n    var destination = this.destination;\n    destination.next(window);\n    return window;\n  };\n\n  WindowTimeSubscriber.prototype.closeWindow = function (window) {\n    window.complete();\n    var windows = this.windows;\n    windows.splice(windows.indexOf(window), 1);\n  };\n\n  return WindowTimeSubscriber;\n}(Subscriber_1.Subscriber);\n\nfunction dispatchWindowTimeSpanOnly(state) {\n  var subscriber = state.subscriber,\n      windowTimeSpan = state.windowTimeSpan,\n      window = state.window;\n\n  if (window) {\n    subscriber.closeWindow(window);\n  }\n\n  state.window = subscriber.openWindow();\n  this.schedule(state, windowTimeSpan);\n}\n\nfunction dispatchWindowCreation(state) {\n  var windowTimeSpan = state.windowTimeSpan,\n      subscriber = state.subscriber,\n      scheduler = state.scheduler,\n      windowCreationInterval = state.windowCreationInterval;\n  var window = subscriber.openWindow();\n  var action = this;\n  var context = {\n    action: action,\n    subscription: null\n  };\n  var timeSpanState = {\n    subscriber: subscriber,\n    window: window,\n    context: context\n  };\n  context.subscription = scheduler.schedule(dispatchWindowClose, windowTimeSpan, timeSpanState);\n  action.add(context.subscription);\n  action.schedule(state, windowCreationInterval);\n}\n\nfunction dispatchWindowClose(state) {\n  var subscriber = state.subscriber,\n      window = state.window,\n      context = state.context;\n\n  if (context && context.action && context.subscription) {\n    context.action.remove(context.subscription);\n  }\n\n  subscriber.closeWindow(window);\n}","map":{"version":3,"sources":["../../src/operators/windowTime.ts"],"names":[],"mappings":"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","sourcesContent":["import { IScheduler } from '../Scheduler';\nimport { Action } from '../scheduler/Action';\nimport { Subject } from '../Subject';\nimport { Operator } from '../Operator';\nimport { async } from '../scheduler/async';\nimport { Subscriber } from '../Subscriber';\nimport { Observable } from '../Observable';\nimport { Subscription } from '../Subscription';\nimport { isNumeric } from '../util/isNumeric';\nimport { isScheduler } from '../util/isScheduler';\nimport { OperatorFunction } from '../interfaces';\n\n/**\n * Branch out the source Observable values as a nested Observable periodically\n * in time.\n *\n * <span class=\"informal\">It's like {@link bufferTime}, but emits a nested\n * Observable instead of an array.</span>\n *\n * <img src=\"./img/windowTime.png\" width=\"100%\">\n *\n * Returns an Observable that emits windows of items it collects from the source\n * Observable. The output Observable starts a new window periodically, as\n * determined by the `windowCreationInterval` argument. It emits each window\n * after a fixed timespan, specified by the `windowTimeSpan` argument. When the\n * source Observable completes or encounters an error, the output Observable\n * emits the current window and propagates the notification from the source\n * Observable. If `windowCreationInterval` is not provided, the output\n * Observable starts a new window when the previous window of duration\n * `windowTimeSpan` completes. If `maxWindowCount` is provided, each window\n * will emit at most fixed number of values. Window will complete immediately\n * after emitting last value and next one still will open as specified by\n * `windowTimeSpan` and `windowCreationInterval` arguments.\n *\n * @example <caption>In every window of 1 second each, emit at most 2 click events</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = clicks.windowTime(1000)\n *   .map(win => win.take(2)) // each window has at most 2 emissions\n *   .mergeAll(); // flatten the Observable-of-Observables\n * result.subscribe(x => console.log(x));\n *\n * @example <caption>Every 5 seconds start a window 1 second long, and emit at most 2 click events per window</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = clicks.windowTime(1000, 5000)\n *   .map(win => win.take(2)) // each window has at most 2 emissions\n *   .mergeAll(); // flatten the Observable-of-Observables\n * result.subscribe(x => console.log(x));\n *\n * @example <caption>Same as example above but with maxWindowCount instead of take</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = clicks.windowTime(1000, 5000, 2) // each window has still at most 2 emissions\n *   .mergeAll(); // flatten the Observable-of-Observables\n * result.subscribe(x => console.log(x));\n\n * @see {@link window}\n * @see {@link windowCount}\n * @see {@link windowToggle}\n * @see {@link windowWhen}\n * @see {@link bufferTime}\n *\n * @param {number} windowTimeSpan The amount of time to fill each window.\n * @param {number} [windowCreationInterval] The interval at which to start new\n * windows.\n * @param {number} [maxWindowSize=Number.POSITIVE_INFINITY] Max number of\n * values each window can emit before completion.\n * @param {Scheduler} [scheduler=async] The scheduler on which to schedule the\n * intervals that determine window boundaries.\n * @return {Observable<Observable<T>>} An observable of windows, which in turn\n * are Observables.\n * @method windowTime\n * @owner Observable\n */\nexport function windowTime<T>(windowTimeSpan: number,\n                              scheduler?: IScheduler): OperatorFunction<T, Observable<T>>;\nexport function windowTime<T>(windowTimeSpan: number,\n                              windowCreationInterval: number,\n                              scheduler?: IScheduler): OperatorFunction<T, Observable<T>>;\nexport function windowTime<T>(windowTimeSpan: number,\n                              windowCreationInterval: number,\n                              maxWindowSize: number,\n                              scheduler?: IScheduler): OperatorFunction<T, Observable<T>>;\n\nexport function windowTime<T>(windowTimeSpan: number): OperatorFunction<T, Observable<T>> {\n  let scheduler: IScheduler = async;\n  let windowCreationInterval: number = null;\n  let maxWindowSize: number = Number.POSITIVE_INFINITY;\n\n  if (isScheduler(arguments[3])) {\n    scheduler = arguments[3];\n  }\n\n  if (isScheduler(arguments[2])) {\n    scheduler = arguments[2];\n  } else if (isNumeric(arguments[2])) {\n    maxWindowSize = arguments[2];\n  }\n\n  if (isScheduler(arguments[1])) {\n    scheduler = arguments[1];\n  } else if (isNumeric(arguments[1])) {\n    windowCreationInterval = arguments[1];\n  }\n\n  return function windowTimeOperatorFunction(source: Observable<T>) {\n    return source.lift(new WindowTimeOperator<T>(windowTimeSpan, windowCreationInterval, maxWindowSize, scheduler));\n  };\n}\n\nclass WindowTimeOperator<T> implements Operator<T, Observable<T>> {\n\n  constructor(private windowTimeSpan: number,\n              private windowCreationInterval: number | null,\n              private maxWindowSize: number,\n              private scheduler: IScheduler) {\n  }\n\n  call(subscriber: Subscriber<Observable<T>>, source: any): any {\n    return source.subscribe(new WindowTimeSubscriber(\n      subscriber, this.windowTimeSpan, this.windowCreationInterval, this.maxWindowSize, this.scheduler\n    ));\n  }\n}\n\ninterface CreationState<T> {\n  windowTimeSpan: number;\n  windowCreationInterval: number;\n  subscriber: WindowTimeSubscriber<T>;\n  scheduler: IScheduler;\n}\n\ninterface TimeSpanOnlyState<T> {\n    window: CountedSubject<T>;\n    windowTimeSpan: number;\n    subscriber: WindowTimeSubscriber<T>;\n  }\n\ninterface CloseWindowContext<T> {\n  action: Action<CreationState<T>>;\n  subscription: Subscription;\n}\n\ninterface CloseState<T> {\n  subscriber: WindowTimeSubscriber<T>;\n  window: CountedSubject<T>;\n  context: CloseWindowContext<T>;\n}\n\nclass CountedSubject<T> extends Subject<T> {\n  private _numberOfNextedValues: number = 0;\n\n  next(value?: T): void {\n    this._numberOfNextedValues++;\n    super.next(value);\n  }\n\n  get numberOfNextedValues(): number {\n    return this._numberOfNextedValues;\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass WindowTimeSubscriber<T> extends Subscriber<T> {\n  private windows: CountedSubject<T>[] = [];\n\n  constructor(protected destination: Subscriber<Observable<T>>,\n              private windowTimeSpan: number,\n              private windowCreationInterval: number | null,\n              private maxWindowSize: number,\n              private scheduler: IScheduler) {\n    super(destination);\n\n    const window = this.openWindow();\n    if (windowCreationInterval !== null && windowCreationInterval >= 0) {\n      const closeState: CloseState<T> = { subscriber: this, window, context: <any>null };\n      const creationState: CreationState<T> = { windowTimeSpan, windowCreationInterval, subscriber: this, scheduler };\n      this.add(scheduler.schedule(dispatchWindowClose, windowTimeSpan, closeState));\n      this.add(scheduler.schedule(dispatchWindowCreation, windowCreationInterval, creationState));\n    } else {\n      const timeSpanOnlyState: TimeSpanOnlyState<T> = { subscriber: this, window, windowTimeSpan };\n      this.add(scheduler.schedule(dispatchWindowTimeSpanOnly, windowTimeSpan, timeSpanOnlyState));\n    }\n  }\n\n  protected _next(value: T): void {\n    const windows = this.windows;\n    const len = windows.length;\n    for (let i = 0; i < len; i++) {\n      const window = windows[i];\n      if (!window.closed) {\n        window.next(value);\n        if (window.numberOfNextedValues >= this.maxWindowSize) {\n          this.closeWindow(window);\n        }\n      }\n    }\n  }\n\n  protected _error(err: any): void {\n    const windows = this.windows;\n    while (windows.length > 0) {\n      windows.shift().error(err);\n    }\n    this.destination.error(err);\n  }\n\n  protected _complete(): void {\n    const windows = this.windows;\n    while (windows.length > 0) {\n      const window = windows.shift();\n      if (!window.closed) {\n        window.complete();\n      }\n    }\n    this.destination.complete();\n  }\n\n  public openWindow(): CountedSubject<T> {\n    const window = new CountedSubject<T>();\n    this.windows.push(window);\n    const destination = this.destination;\n    destination.next(window);\n    return window;\n  }\n\n  public closeWindow(window: CountedSubject<T>): void {\n    window.complete();\n    const windows = this.windows;\n    windows.splice(windows.indexOf(window), 1);\n  }\n}\n\nfunction dispatchWindowTimeSpanOnly<T>(this: Action<TimeSpanOnlyState<T>>, state: TimeSpanOnlyState<T>): void {\n  const { subscriber, windowTimeSpan, window } = state;\n  if (window) {\n    subscriber.closeWindow(window);\n  }\n  state.window = subscriber.openWindow();\n  this.schedule(state, windowTimeSpan);\n}\n\nfunction dispatchWindowCreation<T>(this: Action<CreationState<T>>, state: CreationState<T>): void {\n  const { windowTimeSpan, subscriber, scheduler, windowCreationInterval } = state;\n  const window = subscriber.openWindow();\n  const action = this;\n  let context: CloseWindowContext<T> = { action, subscription: <any>null };\n  const timeSpanState: CloseState<T> = { subscriber, window, context };\n  context.subscription = scheduler.schedule(dispatchWindowClose, windowTimeSpan, timeSpanState);\n  action.add(context.subscription);\n  action.schedule(state, windowCreationInterval);\n}\n\nfunction dispatchWindowClose<T>(state: CloseState<T>): void {\n  const { subscriber, window, context } = state;\n  if (context && context.action && context.subscription) {\n    context.action.remove(context.subscription);\n  }\n  subscriber.closeWindow(window);\n}\n"],"sourceRoot":""},"metadata":{},"sourceType":"script"}