{"ast":null,"code":"\"use strict\";\n\nvar ReplaySubject_1 = require('../ReplaySubject');\n\nvar multicast_1 = require('./multicast');\n/* tslint:enable:max-line-length */\n\n\nfunction publishReplay(bufferSize, windowTime, selectorOrScheduler, scheduler) {\n  if (selectorOrScheduler && typeof selectorOrScheduler !== 'function') {\n    scheduler = selectorOrScheduler;\n  }\n\n  var selector = typeof selectorOrScheduler === 'function' ? selectorOrScheduler : undefined;\n  var subject = new ReplaySubject_1.ReplaySubject(bufferSize, windowTime, scheduler);\n  return function (source) {\n    return multicast_1.multicast(function () {\n      return subject;\n    }, selector)(source);\n  };\n}\n\nexports.publishReplay = publishReplay;","map":{"version":3,"sources":["../../src/operators/publishReplay.ts"],"names":[],"mappings":";;AACA,IAAA,eAAA,GAAA,OAAA,CAA8B,kBAA9B,CAAA;;AAEA,IAAA,WAAA,GAAA,OAAA,CAA0B,aAA1B,CAAA;AAQA;;;AAEA,SAAA,aAAA,CAAoC,UAApC,EACoC,UADpC,EAEoC,mBAFpC,EAGoC,SAHpC,EAG0D;AAExD,MAAI,mBAAmB,IAAI,OAAO,mBAAP,KAA+B,UAA1D,EAAsE;AACpE,IAAA,SAAS,GAAG,mBAAZ;AACD;;AAED,MAAM,QAAQ,GAAG,OAAO,mBAAP,KAA+B,UAA/B,GAA4C,mBAA5C,GAAkE,SAAnF;AACA,MAAM,OAAO,GAAG,IAAI,eAAA,CAAA,aAAJ,CAAqB,UAArB,EAAiC,UAAjC,EAA6C,SAA7C,CAAhB;AAEA,SAAO,UAAC,MAAD,EAAsB;AAAK,WAAA,WAAA,CAAA,SAAA,CAAU,YAAA;AAAM,aAAA,OAAA;AAAO,KAAvB,EAAyB,QAAzB,EAAA,MAAA,CAAA;AAAsF,GAAxH;AACD;;AAbe,OAAA,CAAA,aAAA,GAAa,aAAb","sourcesContent":["import { Observable } from '../Observable';\nimport { ReplaySubject } from '../ReplaySubject';\nimport { IScheduler } from '../Scheduler';\nimport { multicast } from './multicast';\nimport { ConnectableObservable } from '../observable/ConnectableObservable';\nimport { UnaryFunction, MonoTypeOperatorFunction, OperatorFunction } from '../interfaces';\n\n/* tslint:disable:max-line-length */\nexport function publishReplay<T>(bufferSize?: number, windowTime?: number, scheduler?: IScheduler): UnaryFunction<Observable<T>, ConnectableObservable<T>>;\nexport function publishReplay<T>(bufferSize?: number, windowTime?: number, selector?: MonoTypeOperatorFunction<T>, scheduler?: IScheduler): MonoTypeOperatorFunction<T>;\nexport function publishReplay<T, R>(bufferSize?: number, windowTime?: number, selector?: OperatorFunction<T, R>, scheduler?: IScheduler): OperatorFunction<T, R>;\n/* tslint:enable:max-line-length */\n\nexport function publishReplay<T, R>(bufferSize?: number,\n                                    windowTime?: number,\n                                    selectorOrScheduler?: IScheduler | OperatorFunction<T, R>,\n                                    scheduler?: IScheduler): UnaryFunction<Observable<T>, ConnectableObservable<R> | Observable<R>> {\n\n  if (selectorOrScheduler && typeof selectorOrScheduler !== 'function') {\n    scheduler = selectorOrScheduler;\n  }\n\n  const selector = typeof selectorOrScheduler === 'function' ? selectorOrScheduler : undefined;\n  const subject = new ReplaySubject<T>(bufferSize, windowTime, scheduler);\n\n  return (source: Observable<T>) => multicast(() => subject, selector)(source) as Observable<R> | ConnectableObservable<R>;\n}\n"],"sourceRoot":""},"metadata":{},"sourceType":"script"}