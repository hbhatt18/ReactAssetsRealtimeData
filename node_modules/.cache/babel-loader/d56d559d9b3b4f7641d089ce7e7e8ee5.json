{"ast":null,"code":"\"use strict\";\n\nvar __extends = this && this.__extends || function (d, b) {\n  for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n\n  function __() {\n    this.constructor = d;\n  }\n\n  d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\n\nvar Subscriber_1 = require('../Subscriber');\n\nvar Observable_1 = require('../Observable');\n\nvar OuterSubscriber_1 = require('../OuterSubscriber');\n\nvar subscribeToResult_1 = require('../util/subscribeToResult');\n/**\n * Delays the emission of items from the source Observable by a given time span\n * determined by the emissions of another Observable.\n *\n * <span class=\"informal\">It's like {@link delay}, but the time span of the\n * delay duration is determined by a second Observable.</span>\n *\n * <img src=\"./img/delayWhen.png\" width=\"100%\">\n *\n * `delayWhen` time shifts each emitted value from the source Observable by a\n * time span determined by another Observable. When the source emits a value,\n * the `delayDurationSelector` function is called with the source value as\n * argument, and should return an Observable, called the \"duration\" Observable.\n * The source value is emitted on the output Observable only when the duration\n * Observable emits a value or completes.\n *\n * Optionally, `delayWhen` takes a second argument, `subscriptionDelay`, which\n * is an Observable. When `subscriptionDelay` emits its first value or\n * completes, the source Observable is subscribed to and starts behaving like\n * described in the previous paragraph. If `subscriptionDelay` is not provided,\n * `delayWhen` will subscribe to the source Observable as soon as the output\n * Observable is subscribed.\n *\n * @example <caption>Delay each click by a random amount of time, between 0 and 5 seconds</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var delayedClicks = clicks.delayWhen(event =>\n *   Rx.Observable.interval(Math.random() * 5000)\n * );\n * delayedClicks.subscribe(x => console.log(x));\n *\n * @see {@link debounce}\n * @see {@link delay}\n *\n * @param {function(value: T): Observable} delayDurationSelector A function that\n * returns an Observable for each value emitted by the source Observable, which\n * is then used to delay the emission of that item on the output Observable\n * until the Observable returned from this function emits a value.\n * @param {Observable} subscriptionDelay An Observable that triggers the\n * subscription to the source Observable once it emits any value.\n * @return {Observable} An Observable that delays the emissions of the source\n * Observable by an amount of time specified by the Observable returned by\n * `delayDurationSelector`.\n * @method delayWhen\n * @owner Observable\n */\n\n\nfunction delayWhen(delayDurationSelector, subscriptionDelay) {\n  if (subscriptionDelay) {\n    return function (source) {\n      return new SubscriptionDelayObservable(source, subscriptionDelay).lift(new DelayWhenOperator(delayDurationSelector));\n    };\n  }\n\n  return function (source) {\n    return source.lift(new DelayWhenOperator(delayDurationSelector));\n  };\n}\n\nexports.delayWhen = delayWhen;\n\nvar DelayWhenOperator = function () {\n  function DelayWhenOperator(delayDurationSelector) {\n    this.delayDurationSelector = delayDurationSelector;\n  }\n\n  DelayWhenOperator.prototype.call = function (subscriber, source) {\n    return source.subscribe(new DelayWhenSubscriber(subscriber, this.delayDurationSelector));\n  };\n\n  return DelayWhenOperator;\n}();\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\n\n\nvar DelayWhenSubscriber = function (_super) {\n  __extends(DelayWhenSubscriber, _super);\n\n  function DelayWhenSubscriber(destination, delayDurationSelector) {\n    _super.call(this, destination);\n\n    this.delayDurationSelector = delayDurationSelector;\n    this.completed = false;\n    this.delayNotifierSubscriptions = [];\n    this.values = [];\n  }\n\n  DelayWhenSubscriber.prototype.notifyNext = function (outerValue, innerValue, outerIndex, innerIndex, innerSub) {\n    this.destination.next(outerValue);\n    this.removeSubscription(innerSub);\n    this.tryComplete();\n  };\n\n  DelayWhenSubscriber.prototype.notifyError = function (error, innerSub) {\n    this._error(error);\n  };\n\n  DelayWhenSubscriber.prototype.notifyComplete = function (innerSub) {\n    var value = this.removeSubscription(innerSub);\n\n    if (value) {\n      this.destination.next(value);\n    }\n\n    this.tryComplete();\n  };\n\n  DelayWhenSubscriber.prototype._next = function (value) {\n    try {\n      var delayNotifier = this.delayDurationSelector(value);\n\n      if (delayNotifier) {\n        this.tryDelay(delayNotifier, value);\n      }\n    } catch (err) {\n      this.destination.error(err);\n    }\n  };\n\n  DelayWhenSubscriber.prototype._complete = function () {\n    this.completed = true;\n    this.tryComplete();\n  };\n\n  DelayWhenSubscriber.prototype.removeSubscription = function (subscription) {\n    subscription.unsubscribe();\n    var subscriptionIdx = this.delayNotifierSubscriptions.indexOf(subscription);\n    var value = null;\n\n    if (subscriptionIdx !== -1) {\n      value = this.values[subscriptionIdx];\n      this.delayNotifierSubscriptions.splice(subscriptionIdx, 1);\n      this.values.splice(subscriptionIdx, 1);\n    }\n\n    return value;\n  };\n\n  DelayWhenSubscriber.prototype.tryDelay = function (delayNotifier, value) {\n    var notifierSubscription = subscribeToResult_1.subscribeToResult(this, delayNotifier, value);\n\n    if (notifierSubscription && !notifierSubscription.closed) {\n      this.add(notifierSubscription);\n      this.delayNotifierSubscriptions.push(notifierSubscription);\n    }\n\n    this.values.push(value);\n  };\n\n  DelayWhenSubscriber.prototype.tryComplete = function () {\n    if (this.completed && this.delayNotifierSubscriptions.length === 0) {\n      this.destination.complete();\n    }\n  };\n\n  return DelayWhenSubscriber;\n}(OuterSubscriber_1.OuterSubscriber);\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\n\n\nvar SubscriptionDelayObservable = function (_super) {\n  __extends(SubscriptionDelayObservable, _super);\n\n  function SubscriptionDelayObservable(\n  /** @deprecated internal use only */\n  source, subscriptionDelay) {\n    _super.call(this);\n\n    this.source = source;\n    this.subscriptionDelay = subscriptionDelay;\n  }\n  /** @deprecated internal use only */\n\n\n  SubscriptionDelayObservable.prototype._subscribe = function (subscriber) {\n    this.subscriptionDelay.subscribe(new SubscriptionDelaySubscriber(subscriber, this.source));\n  };\n\n  return SubscriptionDelayObservable;\n}(Observable_1.Observable);\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\n\n\nvar SubscriptionDelaySubscriber = function (_super) {\n  __extends(SubscriptionDelaySubscriber, _super);\n\n  function SubscriptionDelaySubscriber(parent, source) {\n    _super.call(this);\n\n    this.parent = parent;\n    this.source = source;\n    this.sourceSubscribed = false;\n  }\n\n  SubscriptionDelaySubscriber.prototype._next = function (unused) {\n    this.subscribeToSource();\n  };\n\n  SubscriptionDelaySubscriber.prototype._error = function (err) {\n    this.unsubscribe();\n    this.parent.error(err);\n  };\n\n  SubscriptionDelaySubscriber.prototype._complete = function () {\n    this.subscribeToSource();\n  };\n\n  SubscriptionDelaySubscriber.prototype.subscribeToSource = function () {\n    if (!this.sourceSubscribed) {\n      this.sourceSubscribed = true;\n      this.unsubscribe();\n      this.source.subscribe(this.parent);\n    }\n  };\n\n  return SubscriptionDelaySubscriber;\n}(Subscriber_1.Subscriber);","map":{"version":3,"sources":["../../src/operators/delayWhen.ts"],"names":[],"mappings":"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","sourcesContent":["import { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { Observable } from '../Observable';\nimport { Subscription, TeardownLogic } from '../Subscription';\nimport { OuterSubscriber } from '../OuterSubscriber';\nimport { InnerSubscriber } from '../InnerSubscriber';\nimport { subscribeToResult } from '../util/subscribeToResult';\nimport { MonoTypeOperatorFunction } from '../interfaces';\n\n/**\n * Delays the emission of items from the source Observable by a given time span\n * determined by the emissions of another Observable.\n *\n * <span class=\"informal\">It's like {@link delay}, but the time span of the\n * delay duration is determined by a second Observable.</span>\n *\n * <img src=\"./img/delayWhen.png\" width=\"100%\">\n *\n * `delayWhen` time shifts each emitted value from the source Observable by a\n * time span determined by another Observable. When the source emits a value,\n * the `delayDurationSelector` function is called with the source value as\n * argument, and should return an Observable, called the \"duration\" Observable.\n * The source value is emitted on the output Observable only when the duration\n * Observable emits a value or completes.\n *\n * Optionally, `delayWhen` takes a second argument, `subscriptionDelay`, which\n * is an Observable. When `subscriptionDelay` emits its first value or\n * completes, the source Observable is subscribed to and starts behaving like\n * described in the previous paragraph. If `subscriptionDelay` is not provided,\n * `delayWhen` will subscribe to the source Observable as soon as the output\n * Observable is subscribed.\n *\n * @example <caption>Delay each click by a random amount of time, between 0 and 5 seconds</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var delayedClicks = clicks.delayWhen(event =>\n *   Rx.Observable.interval(Math.random() * 5000)\n * );\n * delayedClicks.subscribe(x => console.log(x));\n *\n * @see {@link debounce}\n * @see {@link delay}\n *\n * @param {function(value: T): Observable} delayDurationSelector A function that\n * returns an Observable for each value emitted by the source Observable, which\n * is then used to delay the emission of that item on the output Observable\n * until the Observable returned from this function emits a value.\n * @param {Observable} subscriptionDelay An Observable that triggers the\n * subscription to the source Observable once it emits any value.\n * @return {Observable} An Observable that delays the emissions of the source\n * Observable by an amount of time specified by the Observable returned by\n * `delayDurationSelector`.\n * @method delayWhen\n * @owner Observable\n */\nexport function delayWhen<T>(delayDurationSelector: (value: T) => Observable<any>,\n                             subscriptionDelay?: Observable<any>): MonoTypeOperatorFunction<T> {\n  if (subscriptionDelay) {\n    return (source: Observable<T>) =>\n      new SubscriptionDelayObservable(source, subscriptionDelay)\n        .lift(new DelayWhenOperator(delayDurationSelector));\n  }\n  return (source: Observable<T>) => source.lift(new DelayWhenOperator(delayDurationSelector));\n}\n\nclass DelayWhenOperator<T> implements Operator<T, T> {\n  constructor(private delayDurationSelector: (value: T) => Observable<any>) {\n  }\n\n  call(subscriber: Subscriber<T>, source: any): TeardownLogic {\n    return source.subscribe(new DelayWhenSubscriber(subscriber, this.delayDurationSelector));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass DelayWhenSubscriber<T, R> extends OuterSubscriber<T, R> {\n  private completed: boolean = false;\n  private delayNotifierSubscriptions: Array<Subscription> = [];\n  private values: Array<T> = [];\n\n  constructor(destination: Subscriber<T>,\n              private delayDurationSelector: (value: T) => Observable<any>) {\n    super(destination);\n  }\n\n  notifyNext(outerValue: T, innerValue: any,\n             outerIndex: number, innerIndex: number,\n             innerSub: InnerSubscriber<T, R>): void {\n    this.destination.next(outerValue);\n    this.removeSubscription(innerSub);\n    this.tryComplete();\n  }\n\n  notifyError(error: any, innerSub: InnerSubscriber<T, R>): void {\n    this._error(error);\n  }\n\n  notifyComplete(innerSub: InnerSubscriber<T, R>): void {\n    const value = this.removeSubscription(innerSub);\n    if (value) {\n      this.destination.next(value);\n    }\n    this.tryComplete();\n  }\n\n  protected _next(value: T): void {\n    try {\n      const delayNotifier = this.delayDurationSelector(value);\n      if (delayNotifier) {\n        this.tryDelay(delayNotifier, value);\n      }\n    } catch (err) {\n      this.destination.error(err);\n    }\n  }\n\n  protected _complete(): void {\n    this.completed = true;\n    this.tryComplete();\n  }\n\n  private removeSubscription(subscription: InnerSubscriber<T, R>): T {\n    subscription.unsubscribe();\n\n    const subscriptionIdx = this.delayNotifierSubscriptions.indexOf(subscription);\n    let value: T = null;\n\n    if (subscriptionIdx !== -1) {\n      value = this.values[subscriptionIdx];\n      this.delayNotifierSubscriptions.splice(subscriptionIdx, 1);\n      this.values.splice(subscriptionIdx, 1);\n    }\n\n    return value;\n  }\n\n  private tryDelay(delayNotifier: Observable<any>, value: T): void {\n    const notifierSubscription = subscribeToResult(this, delayNotifier, value);\n\n    if (notifierSubscription && !notifierSubscription.closed) {\n      this.add(notifierSubscription);\n      this.delayNotifierSubscriptions.push(notifierSubscription);\n    }\n\n    this.values.push(value);\n  }\n\n  private tryComplete(): void {\n    if (this.completed && this.delayNotifierSubscriptions.length === 0) {\n      this.destination.complete();\n    }\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass SubscriptionDelayObservable<T> extends Observable<T> {\n  constructor(/** @deprecated internal use only */ public source: Observable<T>, private subscriptionDelay: Observable<any>) {\n    super();\n  }\n\n  /** @deprecated internal use only */ _subscribe(subscriber: Subscriber<T>) {\n    this.subscriptionDelay.subscribe(new SubscriptionDelaySubscriber(subscriber, this.source));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass SubscriptionDelaySubscriber<T> extends Subscriber<T> {\n  private sourceSubscribed: boolean = false;\n\n  constructor(private parent: Subscriber<T>, private source: Observable<T>) {\n    super();\n  }\n\n  protected _next(unused: any) {\n    this.subscribeToSource();\n  }\n\n  protected _error(err: any) {\n    this.unsubscribe();\n    this.parent.error(err);\n  }\n\n  protected _complete() {\n    this.subscribeToSource();\n  }\n\n  private subscribeToSource(): void {\n    if (!this.sourceSubscribed) {\n      this.sourceSubscribed = true;\n      this.unsubscribe();\n      this.source.subscribe(this.parent);\n    }\n  }\n}\n"],"sourceRoot":""},"metadata":{},"sourceType":"script"}