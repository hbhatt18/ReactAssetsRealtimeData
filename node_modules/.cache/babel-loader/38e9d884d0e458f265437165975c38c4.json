{"ast":null,"code":"\"use strict\";\n\nvar BehaviorSubject_1 = require('../BehaviorSubject');\n\nvar multicast_1 = require('./multicast');\n/**\n * @param value\n * @return {ConnectableObservable<T>}\n * @method publishBehavior\n * @owner Observable\n */\n\n\nfunction publishBehavior(value) {\n  return function (source) {\n    return multicast_1.multicast(new BehaviorSubject_1.BehaviorSubject(value))(source);\n  };\n}\n\nexports.publishBehavior = publishBehavior;","map":{"version":3,"sources":["../../src/operators/publishBehavior.ts"],"names":[],"mappings":";;AACA,IAAA,iBAAA,GAAA,OAAA,CAAgC,oBAAhC,CAAA;;AACA,IAAA,WAAA,GAAA,OAAA,CAA0B,aAA1B,CAAA;AAIA;;;;;;;;AAMA,SAAA,eAAA,CAAmC,KAAnC,EAA2C;AACzC,SAAO,UAAC,MAAD,EAAsB;AAAK,WAAA,WAAA,CAAA,SAAA,CAAU,IAAI,iBAAA,CAAA,eAAJ,CAAuB,KAAvB,CAAV,EAAA,MAAA,CAAA;AAA4E,GAA9G;AACD;;AAFe,OAAA,CAAA,eAAA,GAAe,eAAf","sourcesContent":["import { Observable } from '../Observable';\nimport { BehaviorSubject } from '../BehaviorSubject';\nimport { multicast } from './multicast';\nimport { ConnectableObservable } from '../observable/ConnectableObservable';\nimport { UnaryFunction } from '../interfaces';\n\n/**\n * @param value\n * @return {ConnectableObservable<T>}\n * @method publishBehavior\n * @owner Observable\n */\nexport function publishBehavior<T>(value: T):  UnaryFunction<Observable<T>, ConnectableObservable<T>> {\n  return (source: Observable<T>) => multicast(new BehaviorSubject<T>(value))(source) as ConnectableObservable<T>;\n}\n"],"sourceRoot":""},"metadata":{},"sourceType":"script"}