{"ast":null,"code":"\"use strict\";\n\nvar AsyncSubject_1 = require('../AsyncSubject');\n\nvar multicast_1 = require('./multicast');\n\nfunction publishLast() {\n  return function (source) {\n    return multicast_1.multicast(new AsyncSubject_1.AsyncSubject())(source);\n  };\n}\n\nexports.publishLast = publishLast;","map":{"version":3,"sources":["../../src/operators/publishLast.ts"],"names":[],"mappings":";;AACA,IAAA,cAAA,GAAA,OAAA,CAA6B,iBAA7B,CAAA;;AACA,IAAA,WAAA,GAAA,OAAA,CAA0B,aAA1B,CAAA;;AAIA,SAAA,WAAA,GAAA;AACE,SAAO,UAAC,MAAD,EAAsB;AAAK,WAAA,WAAA,CAAA,SAAA,CAAU,IAAI,cAAA,CAAA,YAAJ,EAAV,EAAA,MAAA,CAAA;AAAwC,GAA1E;AACD;;AAFe,OAAA,CAAA,WAAA,GAAW,WAAX","sourcesContent":["import { Observable } from '../Observable';\nimport { AsyncSubject } from '../AsyncSubject';\nimport { multicast } from './multicast';\nimport { ConnectableObservable } from '../observable/ConnectableObservable';\nimport { UnaryFunction } from '../interfaces';\n\nexport function publishLast<T>(): UnaryFunction<Observable<T>, ConnectableObservable<T>> {\n  return (source: Observable<T>) => multicast(new AsyncSubject<T>())(source);\n}\n"],"sourceRoot":""},"metadata":{},"sourceType":"script"}