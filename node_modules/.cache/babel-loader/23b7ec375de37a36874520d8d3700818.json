{"ast":null,"code":"\"use strict\";\n\nvar __extends = this && this.__extends || function (d, b) {\n  for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n\n  function __() {\n    this.constructor = d;\n  }\n\n  d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\n\nvar AsyncAction_1 = require('./AsyncAction');\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\n\n\nvar QueueAction = function (_super) {\n  __extends(QueueAction, _super);\n\n  function QueueAction(scheduler, work) {\n    _super.call(this, scheduler, work);\n\n    this.scheduler = scheduler;\n    this.work = work;\n  }\n\n  QueueAction.prototype.schedule = function (state, delay) {\n    if (delay === void 0) {\n      delay = 0;\n    }\n\n    if (delay > 0) {\n      return _super.prototype.schedule.call(this, state, delay);\n    }\n\n    this.delay = delay;\n    this.state = state;\n    this.scheduler.flush(this);\n    return this;\n  };\n\n  QueueAction.prototype.execute = function (state, delay) {\n    return delay > 0 || this.closed ? _super.prototype.execute.call(this, state, delay) : this._execute(state, delay);\n  };\n\n  QueueAction.prototype.requestAsyncId = function (scheduler, id, delay) {\n    if (delay === void 0) {\n      delay = 0;\n    } // If delay exists and is greater than 0, or if the delay is null (the\n    // action wasn't rescheduled) but was originally scheduled as an async\n    // action, then recycle as an async action.\n\n\n    if (delay !== null && delay > 0 || delay === null && this.delay > 0) {\n      return _super.prototype.requestAsyncId.call(this, scheduler, id, delay);\n    } // Otherwise flush the scheduler starting with this action.\n\n\n    return scheduler.flush(this);\n  };\n\n  return QueueAction;\n}(AsyncAction_1.AsyncAction);\n\nexports.QueueAction = QueueAction;","map":{"version":3,"sources":["../../src/scheduler/QueueAction.ts"],"names":[],"mappings":";;;;;;;;;;;;AAAA,IAAA,aAAA,GAAA,OAAA,CAA4B,eAA5B,CAAA;AAIA;;;;;;;AAKA,IAAA,WAAA,GAAA,UAAA,MAAA,EAAA;AAAoC,EAAA,SAAA,CAAA,WAAA,EAAA,MAAA,CAAA;;AAElC,WAAA,WAAA,CAAsB,SAAtB,EACsB,IADtB,EACqE;AACnE,IAAA,MAAA,CAAA,IAAA,CAAA,IAAA,EAAM,SAAN,EAAiB,IAAjB;;AAFoB,SAAA,SAAA,GAAA,SAAA;AACA,SAAA,IAAA,GAAA,IAAA;AAErB;;AAEM,EAAA,WAAA,CAAA,SAAA,CAAA,QAAA,GAAP,UAAgB,KAAhB,EAA2B,KAA3B,EAA4C;AAAjB,QAAA,KAAA,KAAA,KAAA,CAAA,EAAiB;AAAjB,MAAA,KAAA,GAAA,CAAA;AAAiB;;AAC1C,QAAI,KAAK,GAAG,CAAZ,EAAe;AACb,aAAO,MAAA,CAAA,SAAA,CAAM,QAAN,CAAc,IAAd,CAAc,IAAd,EAAe,KAAf,EAAsB,KAAtB,CAAP;AACD;;AACD,SAAK,KAAL,GAAa,KAAb;AACA,SAAK,KAAL,GAAa,KAAb;AACA,SAAK,SAAL,CAAe,KAAf,CAAqB,IAArB;AACA,WAAO,IAAP;AACD,GARM;;AAUA,EAAA,WAAA,CAAA,SAAA,CAAA,OAAA,GAAP,UAAe,KAAf,EAAyB,KAAzB,EAAsC;AACpC,WAAQ,KAAK,GAAG,CAAR,IAAa,KAAK,MAAnB,GACL,MAAA,CAAA,SAAA,CAAM,OAAN,CAAa,IAAb,CAAa,IAAb,EAAc,KAAd,EAAqB,KAArB,CADK,GAEL,KAAK,QAAL,CAAc,KAAd,EAAqB,KAArB,CAFF;AAGD,GAJM;;AAMG,EAAA,WAAA,CAAA,SAAA,CAAA,cAAA,GAAV,UAAyB,SAAzB,EAAoD,EAApD,EAA8D,KAA9D,EAA+E;AAAjB,QAAA,KAAA,KAAA,KAAA,CAAA,EAAiB;AAAjB,MAAA,KAAA,GAAA,CAAA;AAAiB,KAAA,CAC7E;AACA;AACA;;;AACA,QAAK,KAAK,KAAK,IAAV,IAAkB,KAAK,GAAG,CAA3B,IAAkC,KAAK,KAAK,IAAV,IAAkB,KAAK,KAAL,GAAa,CAArE,EAAyE;AACvE,aAAO,MAAA,CAAA,SAAA,CAAM,cAAN,CAAoB,IAApB,CAAoB,IAApB,EAAqB,SAArB,EAAgC,EAAhC,EAAoC,KAApC,CAAP;AACD,KAN4E,CAO7E;;;AACA,WAAO,SAAS,CAAC,KAAV,CAAgB,IAAhB,CAAP;AACD,GATS;;AAUZ,SAAA,WAAA;AAAC,CAjCD,CAAoC,aAAA,CAAA,WAApC,CAAA;;AAAa,OAAA,CAAA,WAAA,GAAW,WAAX","sourcesContent":["import { AsyncAction } from './AsyncAction';\nimport { Subscription } from '../Subscription';\nimport { QueueScheduler } from './QueueScheduler';\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nexport class QueueAction<T> extends AsyncAction<T> {\n\n  constructor(protected scheduler: QueueScheduler,\n              protected work: (this: QueueAction<T>, state?: T) => void) {\n    super(scheduler, work);\n  }\n\n  public schedule(state?: T, delay: number = 0): Subscription {\n    if (delay > 0) {\n      return super.schedule(state, delay);\n    }\n    this.delay = delay;\n    this.state = state;\n    this.scheduler.flush(this);\n    return this;\n  }\n\n  public execute(state: T, delay: number): any {\n    return (delay > 0 || this.closed) ?\n      super.execute(state, delay) :\n      this._execute(state, delay) ;\n  }\n\n  protected requestAsyncId(scheduler: QueueScheduler, id?: any, delay: number = 0): any {\n    // If delay exists and is greater than 0, or if the delay is null (the\n    // action wasn't rescheduled) but was originally scheduled as an async\n    // action, then recycle as an async action.\n    if ((delay !== null && delay > 0) || (delay === null && this.delay > 0)) {\n      return super.requestAsyncId(scheduler, id, delay);\n    }\n    // Otherwise flush the scheduler starting with this action.\n    return scheduler.flush(this);\n  }\n}\n"],"sourceRoot":""},"metadata":{},"sourceType":"script"}