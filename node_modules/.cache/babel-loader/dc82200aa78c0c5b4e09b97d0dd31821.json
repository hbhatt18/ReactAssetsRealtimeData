{"ast":null,"code":"\"use strict\";\n\nvar __extends = this && this.__extends || function (d, b) {\n  for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n\n  function __() {\n    this.constructor = d;\n  }\n\n  d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\n\nvar Subscriber_1 = require('../Subscriber');\n/**\n * Buffers the source Observable values until the size hits the maximum\n * `bufferSize` given.\n *\n * <span class=\"informal\">Collects values from the past as an array, and emits\n * that array only when its size reaches `bufferSize`.</span>\n *\n * <img src=\"./img/bufferCount.png\" width=\"100%\">\n *\n * Buffers a number of values from the source Observable by `bufferSize` then\n * emits the buffer and clears it, and starts a new buffer each\n * `startBufferEvery` values. If `startBufferEvery` is not provided or is\n * `null`, then new buffers are started immediately at the start of the source\n * and when each buffer closes and is emitted.\n *\n * @example <caption>Emit the last two click events as an array</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var buffered = clicks.bufferCount(2);\n * buffered.subscribe(x => console.log(x));\n *\n * @example <caption>On every click, emit the last two click events as an array</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var buffered = clicks.bufferCount(2, 1);\n * buffered.subscribe(x => console.log(x));\n *\n * @see {@link buffer}\n * @see {@link bufferTime}\n * @see {@link bufferToggle}\n * @see {@link bufferWhen}\n * @see {@link pairwise}\n * @see {@link windowCount}\n *\n * @param {number} bufferSize The maximum size of the buffer emitted.\n * @param {number} [startBufferEvery] Interval at which to start a new buffer.\n * For example if `startBufferEvery` is `2`, then a new buffer will be started\n * on every other value from the source. A new buffer is started at the\n * beginning of the source by default.\n * @return {Observable<T[]>} An Observable of arrays of buffered values.\n * @method bufferCount\n * @owner Observable\n */\n\n\nfunction bufferCount(bufferSize, startBufferEvery) {\n  if (startBufferEvery === void 0) {\n    startBufferEvery = null;\n  }\n\n  return function bufferCountOperatorFunction(source) {\n    return source.lift(new BufferCountOperator(bufferSize, startBufferEvery));\n  };\n}\n\nexports.bufferCount = bufferCount;\n\nvar BufferCountOperator = function () {\n  function BufferCountOperator(bufferSize, startBufferEvery) {\n    this.bufferSize = bufferSize;\n    this.startBufferEvery = startBufferEvery;\n\n    if (!startBufferEvery || bufferSize === startBufferEvery) {\n      this.subscriberClass = BufferCountSubscriber;\n    } else {\n      this.subscriberClass = BufferSkipCountSubscriber;\n    }\n  }\n\n  BufferCountOperator.prototype.call = function (subscriber, source) {\n    return source.subscribe(new this.subscriberClass(subscriber, this.bufferSize, this.startBufferEvery));\n  };\n\n  return BufferCountOperator;\n}();\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\n\n\nvar BufferCountSubscriber = function (_super) {\n  __extends(BufferCountSubscriber, _super);\n\n  function BufferCountSubscriber(destination, bufferSize) {\n    _super.call(this, destination);\n\n    this.bufferSize = bufferSize;\n    this.buffer = [];\n  }\n\n  BufferCountSubscriber.prototype._next = function (value) {\n    var buffer = this.buffer;\n    buffer.push(value);\n\n    if (buffer.length == this.bufferSize) {\n      this.destination.next(buffer);\n      this.buffer = [];\n    }\n  };\n\n  BufferCountSubscriber.prototype._complete = function () {\n    var buffer = this.buffer;\n\n    if (buffer.length > 0) {\n      this.destination.next(buffer);\n    }\n\n    _super.prototype._complete.call(this);\n  };\n\n  return BufferCountSubscriber;\n}(Subscriber_1.Subscriber);\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\n\n\nvar BufferSkipCountSubscriber = function (_super) {\n  __extends(BufferSkipCountSubscriber, _super);\n\n  function BufferSkipCountSubscriber(destination, bufferSize, startBufferEvery) {\n    _super.call(this, destination);\n\n    this.bufferSize = bufferSize;\n    this.startBufferEvery = startBufferEvery;\n    this.buffers = [];\n    this.count = 0;\n  }\n\n  BufferSkipCountSubscriber.prototype._next = function (value) {\n    var _a = this,\n        bufferSize = _a.bufferSize,\n        startBufferEvery = _a.startBufferEvery,\n        buffers = _a.buffers,\n        count = _a.count;\n\n    this.count++;\n\n    if (count % startBufferEvery === 0) {\n      buffers.push([]);\n    }\n\n    for (var i = buffers.length; i--;) {\n      var buffer = buffers[i];\n      buffer.push(value);\n\n      if (buffer.length === bufferSize) {\n        buffers.splice(i, 1);\n        this.destination.next(buffer);\n      }\n    }\n  };\n\n  BufferSkipCountSubscriber.prototype._complete = function () {\n    var _a = this,\n        buffers = _a.buffers,\n        destination = _a.destination;\n\n    while (buffers.length > 0) {\n      var buffer = buffers.shift();\n\n      if (buffer.length > 0) {\n        destination.next(buffer);\n      }\n    }\n\n    _super.prototype._complete.call(this);\n  };\n\n  return BufferSkipCountSubscriber;\n}(Subscriber_1.Subscriber);","map":{"version":3,"sources":["../../src/operators/bufferCount.ts"],"names":[],"mappings":"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","sourcesContent":["import { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { Observable } from '../Observable';\nimport { TeardownLogic } from '../Subscription';\nimport { OperatorFunction } from '../interfaces';\n\n/**\n * Buffers the source Observable values until the size hits the maximum\n * `bufferSize` given.\n *\n * <span class=\"informal\">Collects values from the past as an array, and emits\n * that array only when its size reaches `bufferSize`.</span>\n *\n * <img src=\"./img/bufferCount.png\" width=\"100%\">\n *\n * Buffers a number of values from the source Observable by `bufferSize` then\n * emits the buffer and clears it, and starts a new buffer each\n * `startBufferEvery` values. If `startBufferEvery` is not provided or is\n * `null`, then new buffers are started immediately at the start of the source\n * and when each buffer closes and is emitted.\n *\n * @example <caption>Emit the last two click events as an array</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var buffered = clicks.bufferCount(2);\n * buffered.subscribe(x => console.log(x));\n *\n * @example <caption>On every click, emit the last two click events as an array</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var buffered = clicks.bufferCount(2, 1);\n * buffered.subscribe(x => console.log(x));\n *\n * @see {@link buffer}\n * @see {@link bufferTime}\n * @see {@link bufferToggle}\n * @see {@link bufferWhen}\n * @see {@link pairwise}\n * @see {@link windowCount}\n *\n * @param {number} bufferSize The maximum size of the buffer emitted.\n * @param {number} [startBufferEvery] Interval at which to start a new buffer.\n * For example if `startBufferEvery` is `2`, then a new buffer will be started\n * on every other value from the source. A new buffer is started at the\n * beginning of the source by default.\n * @return {Observable<T[]>} An Observable of arrays of buffered values.\n * @method bufferCount\n * @owner Observable\n */\nexport function bufferCount<T>(bufferSize: number, startBufferEvery: number = null): OperatorFunction<T, T[]> {\n  return function bufferCountOperatorFunction(source: Observable<T>) {\n    return source.lift(new BufferCountOperator<T>(bufferSize, startBufferEvery));\n  };\n}\n\nclass BufferCountOperator<T> implements Operator<T, T[]> {\n  private subscriberClass: any;\n\n  constructor(private bufferSize: number, private startBufferEvery: number) {\n    if (!startBufferEvery || bufferSize === startBufferEvery) {\n      this.subscriberClass = BufferCountSubscriber;\n    } else {\n      this.subscriberClass = BufferSkipCountSubscriber;\n    }\n  }\n\n  call(subscriber: Subscriber<T[]>, source: any): TeardownLogic {\n    return source.subscribe(new this.subscriberClass(subscriber, this.bufferSize, this.startBufferEvery));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass BufferCountSubscriber<T> extends Subscriber<T> {\n  private buffer: T[] = [];\n\n  constructor(destination: Subscriber<T[]>, private bufferSize: number) {\n    super(destination);\n  }\n\n  protected _next(value: T): void {\n    const buffer = this.buffer;\n\n    buffer.push(value);\n\n    if (buffer.length == this.bufferSize) {\n      this.destination.next(buffer);\n      this.buffer = [];\n    }\n  }\n\n  protected _complete(): void {\n    const buffer = this.buffer;\n    if (buffer.length > 0) {\n      this.destination.next(buffer);\n    }\n    super._complete();\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass BufferSkipCountSubscriber<T> extends Subscriber<T> {\n  private buffers: Array<T[]> = [];\n  private count: number = 0;\n\n  constructor(destination: Subscriber<T[]>, private bufferSize: number, private startBufferEvery: number) {\n    super(destination);\n  }\n\n  protected _next(value: T): void {\n    const { bufferSize, startBufferEvery, buffers, count } = this;\n\n    this.count++;\n    if (count % startBufferEvery === 0) {\n      buffers.push([]);\n    }\n\n    for (let i = buffers.length; i--; ) {\n      const buffer = buffers[i];\n      buffer.push(value);\n      if (buffer.length === bufferSize) {\n        buffers.splice(i, 1);\n        this.destination.next(buffer);\n      }\n    }\n  }\n\n  protected _complete(): void {\n    const { buffers, destination } = this;\n\n    while (buffers.length > 0) {\n      let buffer = buffers.shift();\n      if (buffer.length > 0) {\n        destination.next(buffer);\n      }\n    }\n    super._complete();\n  }\n\n}\n"],"sourceRoot":""},"metadata":{},"sourceType":"script"}