{"ast":null,"code":"\"use strict\";\n\nvar __extends = this && this.__extends || function (d, b) {\n  for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n\n  function __() {\n    this.constructor = d;\n  }\n\n  d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\n\nvar Observable_1 = require('../Observable');\n\nvar Subscription_1 = require('../Subscription');\n\nvar SubscriptionLoggable_1 = require('./SubscriptionLoggable');\n\nvar applyMixins_1 = require('../util/applyMixins');\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\n\n\nvar ColdObservable = function (_super) {\n  __extends(ColdObservable, _super);\n\n  function ColdObservable(messages, scheduler) {\n    _super.call(this, function (subscriber) {\n      var observable = this;\n      var index = observable.logSubscribedFrame();\n      subscriber.add(new Subscription_1.Subscription(function () {\n        observable.logUnsubscribedFrame(index);\n      }));\n      observable.scheduleMessages(subscriber);\n      return subscriber;\n    });\n\n    this.messages = messages;\n    this.subscriptions = [];\n    this.scheduler = scheduler;\n  }\n\n  ColdObservable.prototype.scheduleMessages = function (subscriber) {\n    var messagesLength = this.messages.length;\n\n    for (var i = 0; i < messagesLength; i++) {\n      var message = this.messages[i];\n      subscriber.add(this.scheduler.schedule(function (_a) {\n        var message = _a.message,\n            subscriber = _a.subscriber;\n        message.notification.observe(subscriber);\n      }, message.frame, {\n        message: message,\n        subscriber: subscriber\n      }));\n    }\n  };\n\n  return ColdObservable;\n}(Observable_1.Observable);\n\nexports.ColdObservable = ColdObservable;\napplyMixins_1.applyMixins(ColdObservable, [SubscriptionLoggable_1.SubscriptionLoggable]);","map":{"version":3,"sources":["../../src/testing/ColdObservable.ts"],"names":[],"mappings":";;;;;;;;;;;;AAAA,IAAA,YAAA,GAAA,OAAA,CAA2B,eAA3B,CAAA;;AACA,IAAA,cAAA,GAAA,OAAA,CAA6B,iBAA7B,CAAA;;AAIA,IAAA,sBAAA,GAAA,OAAA,CAAqC,wBAArC,CAAA;;AACA,IAAA,aAAA,GAAA,OAAA,CAA4B,qBAA5B,CAAA;AAGA;;;;;;;AAKA,IAAA,cAAA,GAAA,UAAA,MAAA,EAAA;AAAuC,EAAA,SAAA,CAAA,cAAA,EAAA,MAAA,CAAA;;AAMrC,WAAA,cAAA,CAAmB,QAAnB,EACY,SADZ,EACgC;AAC9B,IAAA,MAAA,CAAA,IAAA,CAAA,IAAA,EAAM,UAAmC,UAAnC,EAA8D;AAClE,UAAM,UAAU,GAAsB,IAAtC;AACA,UAAM,KAAK,GAAG,UAAU,CAAC,kBAAX,EAAd;AACA,MAAA,UAAU,CAAC,GAAX,CAAe,IAAI,cAAA,CAAA,YAAJ,CAAiB,YAAA;AAC9B,QAAA,UAAU,CAAC,oBAAX,CAAgC,KAAhC;AACD,OAFc,CAAf;AAGA,MAAA,UAAU,CAAC,gBAAX,CAA4B,UAA5B;AACA,aAAO,UAAP;AACD,KARD;;AAFiB,SAAA,QAAA,GAAA,QAAA;AALZ,SAAA,aAAA,GAAmC,EAAnC;AAgBL,SAAK,SAAL,GAAiB,SAAjB;AACD;;AAED,EAAA,cAAA,CAAA,SAAA,CAAA,gBAAA,GAAA,UAAiB,UAAjB,EAA4C;AAC1C,QAAM,cAAc,GAAG,KAAK,QAAL,CAAc,MAArC;;AACA,SAAK,IAAI,CAAC,GAAG,CAAb,EAAgB,CAAC,GAAG,cAApB,EAAoC,CAAC,EAArC,EAAyC;AACvC,UAAM,OAAO,GAAG,KAAK,QAAL,CAAc,CAAd,CAAhB;AACA,MAAA,UAAU,CAAC,GAAX,CACE,KAAK,SAAL,CAAe,QAAf,CAAwB,UAAC,EAAD,EAAsB;YAApB,OAAA,GAAA,EAAA,CAAA,O;YAAS,UAAA,GAAA,EAAA,CAAA,U;AAAkB,QAAA,OAAO,CAAC,YAAR,CAAqB,OAArB,CAA6B,UAA7B;AAA2C,OAAhG,EACE,OAAO,CAAC,KADV,EAEE;AAAC,QAAA,OAAA,EAAA,OAAD;AAAU,QAAA,UAAA,EAAA;AAAV,OAFF,CADF;AAKD;AACF,GAVD;;AAWF,SAAA,cAAA;AAAC,CA/BD,CAAuC,YAAA,CAAA,UAAvC,CAAA;;AAAa,OAAA,CAAA,cAAA,GAAc,cAAd;AAgCb,aAAA,CAAA,WAAA,CAAY,cAAZ,EAA4B,CAAC,sBAAA,CAAA,oBAAD,CAA5B","sourcesContent":["import { Observable } from '../Observable';\nimport { Subscription } from '../Subscription';\nimport { Scheduler } from '../Scheduler';\nimport { TestMessage } from './TestMessage';\nimport { SubscriptionLog } from './SubscriptionLog';\nimport { SubscriptionLoggable } from './SubscriptionLoggable';\nimport { applyMixins } from '../util/applyMixins';\nimport { Subscriber } from '../Subscriber';\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nexport class ColdObservable<T> extends Observable<T> implements SubscriptionLoggable {\n  public subscriptions: SubscriptionLog[] = [];\n  scheduler: Scheduler;\n  logSubscribedFrame: () => number;\n  logUnsubscribedFrame: (index: number) => void;\n\n  constructor(public messages: TestMessage[],\n              scheduler: Scheduler) {\n    super(function (this: ColdObservable<T>, subscriber: Subscriber<any>) {\n      const observable: ColdObservable<T> = this;\n      const index = observable.logSubscribedFrame();\n      subscriber.add(new Subscription(() => {\n        observable.logUnsubscribedFrame(index);\n      }));\n      observable.scheduleMessages(subscriber);\n      return subscriber;\n    });\n    this.scheduler = scheduler;\n  }\n\n  scheduleMessages(subscriber: Subscriber<any>) {\n    const messagesLength = this.messages.length;\n    for (let i = 0; i < messagesLength; i++) {\n      const message = this.messages[i];\n      subscriber.add(\n        this.scheduler.schedule(({message, subscriber}) => { message.notification.observe(subscriber); },\n          message.frame,\n          {message, subscriber})\n      );\n    }\n  }\n}\napplyMixins(ColdObservable, [SubscriptionLoggable]);\n"],"sourceRoot":""},"metadata":{},"sourceType":"script"}