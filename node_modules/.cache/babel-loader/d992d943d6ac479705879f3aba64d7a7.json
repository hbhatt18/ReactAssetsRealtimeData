{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\het\\\\ReactProject\\\\ch02\\\\02_02\\\\start\\\\ReactAssetsRealtimeData\\\\src\\\\index.js\";\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport './App.css';\nimport BootstrapTable from 'react-bootstrap-table-next';\nimport 'react-bootstrap-table-next/dist/react-bootstrap-table2.min.css';\nimport filterFactory, { textFilter } from 'react-bootstrap-table2-filter'; // create the assets\n// here the name appends with id just to create unique asset name\n\nconst createAsset = (id, type) => {\n  return {\n    id: id,\n    assetName: type === 'Stock' ? ['AAPL' + id, 'GOOGL' + id, 'FB' + id, 'TSLA' + id, 'MSFT' + id][Math.floor(Math.random() * 4)] : ['EUR' + id, 'USD' + id, 'GBP' + id, 'NIS' + id, 'AUD' + id][Math.floor(Math.random() * 4)],\n    price: Math.random() * 10,\n    lastUpdate: Date.now(),\n    type: type\n  };\n};\n\nconst getAllAssets = n => {\n  const result = []; // i starts from 1 because id starts from 1\n  // call createAsset function to create 200 Stocks and 200 Currencies to make 400 assets\n\n  for (let i = 1; i <= n; i++) {\n    result.push(createAsset(i, 'Stock'));\n    result.push(createAsset(i + n, 'Currency'));\n  }\n\n  return result;\n};\n\nconst headerSortingStyle = {\n  backgroundColor: 'grey'\n};\nconst columns = [{\n  dataField: 'id',\n  text: 'ID',\n  sort: true,\n  headerSortingStyle,\n  filter: textFilter()\n}, {\n  dataField: 'assetName',\n  text: 'Asset Name',\n  sort: true,\n  headerSortingStyle,\n  filter: textFilter()\n}, {\n  dataField: 'price',\n  text: 'Price',\n  sort: true,\n  headerSortingStyle,\n  filter: textFilter()\n}, {\n  dataField: 'lastUpdate',\n  text: 'Last Updated',\n  sort: true,\n  headerSortingStyle,\n  filter: textFilter()\n}, {\n  dataField: 'type',\n  text: 'Type',\n  sort: true,\n  headerSortingStyle,\n  filter: textFilter()\n}];\nconst defaultSorted = [{\n  dataField: 'price',\n  order: 'desc'\n}];\n\nclass Table extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      assets: getAllAssets(200)\n    };\n  }\n\n  mockRefreshData() {\n    const random = Math.random(); // map through the assets and store it in newAssets to return the data that is changed\n\n    const newAssets = this.state.assets.map(asset => {\n      // we are either increasing the price or decreasing it\n      // so based on random number the price will either be +1 or -1\n      const newPrice = random >= 0.5 ? asset.price + 1 : asset.price - 1;\n      const newLastUpdate = Date.now();\n      return { ...asset,\n        price: newPrice,\n        lastUpdate: newLastUpdate\n      };\n    }); // call setState method to provide new value so React will call render() method to reflect the changes\n\n    this.setState({\n      assets: newAssets\n    });\n  }\n\n  componentDidMount() {\n    // change value of asset price every second\n    this.timerID = setInterval(() => this.mockRefreshData(), 1000);\n  }\n\n  componentWillUnmount() {\n    // need to use the unmount lifecycle method to stop the timer.\n    clearInterval(this.timerID);\n  }\n\n  render() {\n    return /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 113,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(\"h1\", {\n      id: \"title\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 114,\n        columnNumber: 9\n      }\n    }, \"Assets Realtime Details\"), /*#__PURE__*/React.createElement(BootstrapTable, {\n      bootstrap4: true,\n      keyField: \"id\",\n      data: this.state.assets,\n      columns: columns,\n      defaultSorted: defaultSorted,\n      filter: filterFactory(),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 115,\n        columnNumber: 9\n      }\n    }));\n  }\n\n}\n\nReactDOM.render( /*#__PURE__*/React.createElement(Table, {\n  __self: this,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 128,\n    columnNumber: 17\n  }\n}), document.getElementById('root'));","map":{"version":3,"sources":["C:/Users/het/ReactProject/ch02/02_02/start/ReactAssetsRealtimeData/src/index.js"],"names":["React","ReactDOM","BootstrapTable","filterFactory","textFilter","createAsset","id","type","assetName","Math","floor","random","price","lastUpdate","Date","now","getAllAssets","n","result","i","push","headerSortingStyle","backgroundColor","columns","dataField","text","sort","filter","defaultSorted","order","Table","Component","constructor","props","state","assets","mockRefreshData","newAssets","map","asset","newPrice","newLastUpdate","setState","componentDidMount","timerID","setInterval","componentWillUnmount","clearInterval","render","document","getElementById"],"mappings":"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","sourcesContent":["import React from 'react'\r\nimport ReactDOM from 'react-dom'\r\nimport './index.css'\r\nimport './App.css'\r\nimport BootstrapTable from 'react-bootstrap-table-next'\r\nimport 'react-bootstrap-table-next/dist/react-bootstrap-table2.min.css'\r\nimport filterFactory, { textFilter } from 'react-bootstrap-table2-filter'\r\n\r\n// create the assets\r\n// here the name appends with id just to create unique asset name\r\nconst createAsset = (id, type) => {\r\n  return {\r\n    id: id,\r\n    assetName: type === 'Stock' ? ['AAPL' + id, 'GOOGL' + id, 'FB' + id, 'TSLA' + id, 'MSFT' + id][Math.floor(Math.random() * 4)] : ['EUR' + id, 'USD' + id, 'GBP' + id, 'NIS' + id, 'AUD' + id][Math.floor(Math.random() * 4)],\r\n    price: Math.random() * 10,\r\n    lastUpdate: Date.now(),\r\n    type: type\r\n  }\r\n}\r\n\r\nconst getAllAssets = (n) => {\r\n  const result = []\r\n  // i starts from 1 because id starts from 1\r\n  // call createAsset function to create 200 Stocks and 200 Currencies to make 400 assets\r\n  for (let i = 1; i <= n; i++) {\r\n    result.push(createAsset(i, 'Stock'))\r\n    result.push(createAsset(i + n, 'Currency'))\r\n  }\r\n  return result\r\n}\r\n\r\nconst headerSortingStyle = { backgroundColor: 'grey' };\r\n\r\nconst columns = [\r\n  {\r\n    dataField: 'id',\r\n    text: 'ID',\r\n    sort: true,\r\n    headerSortingStyle,\r\n    filter: textFilter()\r\n  },\r\n  {\r\n    dataField: 'assetName',\r\n    text: 'Asset Name',\r\n    sort: true,\r\n    headerSortingStyle,\r\n    filter: textFilter()\r\n  },\r\n  {\r\n    dataField: 'price',\r\n    text: 'Price',\r\n    sort: true,\r\n    headerSortingStyle,\r\n    filter: textFilter()\r\n  },\r\n  {\r\n    dataField: 'lastUpdate',\r\n    text: 'Last Updated',\r\n    sort: true,\r\n    headerSortingStyle,\r\n    filter: textFilter()\r\n  },\r\n  {\r\n    dataField: 'type',\r\n    text: 'Type',\r\n    sort: true,\r\n    headerSortingStyle,\r\n    filter: textFilter()\r\n  }\r\n]\r\n\r\nconst defaultSorted = [{\r\n  dataField: 'price',\r\n  order: 'desc'\r\n}]\r\n\r\nclass Table extends React.Component {\r\n  constructor (props) {\r\n    super(props)\r\n    this.state = {\r\n      assets: getAllAssets(200)\r\n    }\r\n  }\r\n\r\n  mockRefreshData () {\r\n    const random = Math.random()\r\n\r\n    // map through the assets and store it in newAssets to return the data that is changed\r\n    const newAssets = this.state.assets.map((asset) => {\r\n      // we are either increasing the price or decreasing it\r\n      // so based on random number the price will either be +1 or -1\r\n      const newPrice = random >= 0.5 ? asset.price + 1 : asset.price - 1\r\n      const newLastUpdate = Date.now()\r\n      return { ...asset, price: newPrice, lastUpdate: newLastUpdate }\r\n    })\r\n\r\n    // call setState method to provide new value so React will call render() method to reflect the changes\r\n    this.setState({ assets: newAssets })\r\n  }\r\n\r\n  componentDidMount () {\r\n    // change value of asset price every second\r\n    this.timerID = setInterval(() => this.mockRefreshData(), 1000)\r\n  }\r\n\r\n  componentWillUnmount () {\r\n    // need to use the unmount lifecycle method to stop the timer.\r\n    clearInterval(this.timerID)\r\n  }\r\n\r\n  render () {\r\n    return (\r\n      <div>\r\n        <h1 id='title'>Assets Realtime Details</h1>\r\n        <BootstrapTable\r\n          bootstrap4\r\n          keyField=\"id\"\r\n          data={ this.state.assets }\r\n          columns={ columns }\r\n          defaultSorted={ defaultSorted }\r\n          filter={ filterFactory() }\r\n        />\r\n      </div>\r\n    )\r\n  }\r\n}\r\n\r\nReactDOM.render(<Table />, document.getElementById('root'))\r\n"]},"metadata":{},"sourceType":"module"}