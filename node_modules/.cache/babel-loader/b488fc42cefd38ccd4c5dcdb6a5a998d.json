{"ast":null,"code":"\"use strict\";\n\nvar __extends = this && this.__extends || function (d, b) {\n  for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n\n  function __() {\n    this.constructor = d;\n  }\n\n  d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\n\nvar Subject_1 = require('../Subject');\n\nvar tryCatch_1 = require('../util/tryCatch');\n\nvar errorObject_1 = require('../util/errorObject');\n\nvar OuterSubscriber_1 = require('../OuterSubscriber');\n\nvar subscribeToResult_1 = require('../util/subscribeToResult');\n/**\n * Branch out the source Observable values as a nested Observable using a\n * factory function of closing Observables to determine when to start a new\n * window.\n *\n * <span class=\"informal\">It's like {@link bufferWhen}, but emits a nested\n * Observable instead of an array.</span>\n *\n * <img src=\"./img/windowWhen.png\" width=\"100%\">\n *\n * Returns an Observable that emits windows of items it collects from the source\n * Observable. The output Observable emits connected, non-overlapping windows.\n * It emits the current window and opens a new one whenever the Observable\n * produced by the specified `closingSelector` function emits an item. The first\n * window is opened immediately when subscribing to the output Observable.\n *\n * @example <caption>Emit only the first two clicks events in every window of [1-5] random seconds</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = clicks\n *   .windowWhen(() => Rx.Observable.interval(1000 + Math.random() * 4000))\n *   .map(win => win.take(2)) // each window has at most 2 emissions\n *   .mergeAll(); // flatten the Observable-of-Observables\n * result.subscribe(x => console.log(x));\n *\n * @see {@link window}\n * @see {@link windowCount}\n * @see {@link windowTime}\n * @see {@link windowToggle}\n * @see {@link bufferWhen}\n *\n * @param {function(): Observable} closingSelector A function that takes no\n * arguments and returns an Observable that signals (on either `next` or\n * `complete`) when to close the previous window and start a new one.\n * @return {Observable<Observable<T>>} An observable of windows, which in turn\n * are Observables.\n * @method windowWhen\n * @owner Observable\n */\n\n\nfunction windowWhen(closingSelector) {\n  return function windowWhenOperatorFunction(source) {\n    return source.lift(new WindowOperator(closingSelector));\n  };\n}\n\nexports.windowWhen = windowWhen;\n\nvar WindowOperator = function () {\n  function WindowOperator(closingSelector) {\n    this.closingSelector = closingSelector;\n  }\n\n  WindowOperator.prototype.call = function (subscriber, source) {\n    return source.subscribe(new WindowSubscriber(subscriber, this.closingSelector));\n  };\n\n  return WindowOperator;\n}();\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\n\n\nvar WindowSubscriber = function (_super) {\n  __extends(WindowSubscriber, _super);\n\n  function WindowSubscriber(destination, closingSelector) {\n    _super.call(this, destination);\n\n    this.destination = destination;\n    this.closingSelector = closingSelector;\n    this.openWindow();\n  }\n\n  WindowSubscriber.prototype.notifyNext = function (outerValue, innerValue, outerIndex, innerIndex, innerSub) {\n    this.openWindow(innerSub);\n  };\n\n  WindowSubscriber.prototype.notifyError = function (error, innerSub) {\n    this._error(error);\n  };\n\n  WindowSubscriber.prototype.notifyComplete = function (innerSub) {\n    this.openWindow(innerSub);\n  };\n\n  WindowSubscriber.prototype._next = function (value) {\n    this.window.next(value);\n  };\n\n  WindowSubscriber.prototype._error = function (err) {\n    this.window.error(err);\n    this.destination.error(err);\n    this.unsubscribeClosingNotification();\n  };\n\n  WindowSubscriber.prototype._complete = function () {\n    this.window.complete();\n    this.destination.complete();\n    this.unsubscribeClosingNotification();\n  };\n\n  WindowSubscriber.prototype.unsubscribeClosingNotification = function () {\n    if (this.closingNotification) {\n      this.closingNotification.unsubscribe();\n    }\n  };\n\n  WindowSubscriber.prototype.openWindow = function (innerSub) {\n    if (innerSub === void 0) {\n      innerSub = null;\n    }\n\n    if (innerSub) {\n      this.remove(innerSub);\n      innerSub.unsubscribe();\n    }\n\n    var prevWindow = this.window;\n\n    if (prevWindow) {\n      prevWindow.complete();\n    }\n\n    var window = this.window = new Subject_1.Subject();\n    this.destination.next(window);\n    var closingNotifier = tryCatch_1.tryCatch(this.closingSelector)();\n\n    if (closingNotifier === errorObject_1.errorObject) {\n      var err = errorObject_1.errorObject.e;\n      this.destination.error(err);\n      this.window.error(err);\n    } else {\n      this.add(this.closingNotification = subscribeToResult_1.subscribeToResult(this, closingNotifier));\n    }\n  };\n\n  return WindowSubscriber;\n}(OuterSubscriber_1.OuterSubscriber);","map":{"version":3,"sources":["../../src/operators/windowWhen.ts"],"names":[],"mappings":"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","sourcesContent":["import { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { Observable } from '../Observable';\nimport { Subject } from '../Subject';\nimport { Subscription } from '../Subscription';\nimport { tryCatch } from '../util/tryCatch';\nimport { errorObject } from '../util/errorObject';\nimport { OuterSubscriber } from '../OuterSubscriber';\nimport { InnerSubscriber } from '../InnerSubscriber';\nimport { subscribeToResult } from '../util/subscribeToResult';\nimport { OperatorFunction } from '../interfaces';\n\n/**\n * Branch out the source Observable values as a nested Observable using a\n * factory function of closing Observables to determine when to start a new\n * window.\n *\n * <span class=\"informal\">It's like {@link bufferWhen}, but emits a nested\n * Observable instead of an array.</span>\n *\n * <img src=\"./img/windowWhen.png\" width=\"100%\">\n *\n * Returns an Observable that emits windows of items it collects from the source\n * Observable. The output Observable emits connected, non-overlapping windows.\n * It emits the current window and opens a new one whenever the Observable\n * produced by the specified `closingSelector` function emits an item. The first\n * window is opened immediately when subscribing to the output Observable.\n *\n * @example <caption>Emit only the first two clicks events in every window of [1-5] random seconds</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = clicks\n *   .windowWhen(() => Rx.Observable.interval(1000 + Math.random() * 4000))\n *   .map(win => win.take(2)) // each window has at most 2 emissions\n *   .mergeAll(); // flatten the Observable-of-Observables\n * result.subscribe(x => console.log(x));\n *\n * @see {@link window}\n * @see {@link windowCount}\n * @see {@link windowTime}\n * @see {@link windowToggle}\n * @see {@link bufferWhen}\n *\n * @param {function(): Observable} closingSelector A function that takes no\n * arguments and returns an Observable that signals (on either `next` or\n * `complete`) when to close the previous window and start a new one.\n * @return {Observable<Observable<T>>} An observable of windows, which in turn\n * are Observables.\n * @method windowWhen\n * @owner Observable\n */\nexport function windowWhen<T>(closingSelector: () => Observable<any>): OperatorFunction<T, Observable<T>> {\n  return function windowWhenOperatorFunction(source: Observable<T>) {\n    return source.lift(new WindowOperator<T>(closingSelector));\n  };\n}\n\nclass WindowOperator<T> implements Operator<T, Observable<T>> {\n  constructor(private closingSelector: () => Observable<any>) {\n  }\n\n  call(subscriber: Subscriber<Observable<T>>, source: any): any {\n    return source.subscribe(new WindowSubscriber(subscriber, this.closingSelector));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass WindowSubscriber<T> extends OuterSubscriber<T, any> {\n  private window: Subject<T>;\n  private closingNotification: Subscription;\n\n  constructor(protected destination: Subscriber<Observable<T>>,\n              private closingSelector: () => Observable<any>) {\n    super(destination);\n    this.openWindow();\n  }\n\n  notifyNext(outerValue: T, innerValue: any,\n             outerIndex: number, innerIndex: number,\n             innerSub: InnerSubscriber<T, any>): void {\n    this.openWindow(innerSub);\n  }\n\n  notifyError(error: any, innerSub: InnerSubscriber<T, any>): void {\n    this._error(error);\n  }\n\n  notifyComplete(innerSub: InnerSubscriber<T, any>): void {\n    this.openWindow(innerSub);\n  }\n\n  protected _next(value: T): void {\n    this.window.next(value);\n  }\n\n  protected _error(err: any): void {\n    this.window.error(err);\n    this.destination.error(err);\n    this.unsubscribeClosingNotification();\n  }\n\n  protected _complete(): void {\n    this.window.complete();\n    this.destination.complete();\n    this.unsubscribeClosingNotification();\n  }\n\n  private unsubscribeClosingNotification(): void {\n    if (this.closingNotification) {\n      this.closingNotification.unsubscribe();\n    }\n  }\n\n  private openWindow(innerSub: InnerSubscriber<T, any> = null): void {\n    if (innerSub) {\n      this.remove(innerSub);\n      innerSub.unsubscribe();\n    }\n\n    const prevWindow = this.window;\n    if (prevWindow) {\n      prevWindow.complete();\n    }\n\n    const window = this.window = new Subject<T>();\n    this.destination.next(window);\n\n    const closingNotifier = tryCatch(this.closingSelector)();\n    if (closingNotifier === errorObject) {\n      const err = errorObject.e;\n      this.destination.error(err);\n      this.window.error(err);\n    } else {\n      this.add(this.closingNotification = subscribeToResult(this, closingNotifier));\n    }\n  }\n}\n"],"sourceRoot":""},"metadata":{},"sourceType":"script"}