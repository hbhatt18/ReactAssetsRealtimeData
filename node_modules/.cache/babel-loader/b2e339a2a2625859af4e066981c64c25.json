{"ast":null,"code":"\"use strict\";\n\nvar __extends = this && this.__extends || function (d, b) {\n  for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n\n  function __() {\n    this.constructor = d;\n  }\n\n  d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\n\nvar Subject_1 = require('../Subject');\n\nvar Subscription_1 = require('../Subscription');\n\nvar SubscriptionLoggable_1 = require('./SubscriptionLoggable');\n\nvar applyMixins_1 = require('../util/applyMixins');\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\n\n\nvar HotObservable = function (_super) {\n  __extends(HotObservable, _super);\n\n  function HotObservable(messages, scheduler) {\n    _super.call(this);\n\n    this.messages = messages;\n    this.subscriptions = [];\n    this.scheduler = scheduler;\n  }\n  /** @deprecated internal use only */\n\n\n  HotObservable.prototype._subscribe = function (subscriber) {\n    var subject = this;\n    var index = subject.logSubscribedFrame();\n    subscriber.add(new Subscription_1.Subscription(function () {\n      subject.logUnsubscribedFrame(index);\n    }));\n    return _super.prototype._subscribe.call(this, subscriber);\n  };\n\n  HotObservable.prototype.setup = function () {\n    var subject = this;\n    var messagesLength = subject.messages.length;\n    /* tslint:disable:no-var-keyword */\n\n    for (var i = 0; i < messagesLength; i++) {\n      (function () {\n        var message = subject.messages[i];\n        /* tslint:enable */\n\n        subject.scheduler.schedule(function () {\n          message.notification.observe(subject);\n        }, message.frame);\n      })();\n    }\n  };\n\n  return HotObservable;\n}(Subject_1.Subject);\n\nexports.HotObservable = HotObservable;\napplyMixins_1.applyMixins(HotObservable, [SubscriptionLoggable_1.SubscriptionLoggable]);","map":{"version":3,"sources":["../../src/testing/HotObservable.ts"],"names":[],"mappings":";;;;;;;;;;;;AAAA,IAAA,SAAA,GAAA,OAAA,CAAwB,YAAxB,CAAA;;AAEA,IAAA,cAAA,GAAA,OAAA,CAA6B,iBAA7B,CAAA;;AAIA,IAAA,sBAAA,GAAA,OAAA,CAAqC,wBAArC,CAAA;;AACA,IAAA,aAAA,GAAA,OAAA,CAA4B,qBAA5B,CAAA;AAEA;;;;;;;AAKA,IAAA,aAAA,GAAA,UAAA,MAAA,EAAA;AAAsC,EAAA,SAAA,CAAA,aAAA,EAAA,MAAA,CAAA;;AAMpC,WAAA,aAAA,CAAmB,QAAnB,EACY,SADZ,EACgC;AAC9B,IAAA,MAAA,CAAA,IAAA,CAAA,IAAA;;AAFiB,SAAA,QAAA,GAAA,QAAA;AALZ,SAAA,aAAA,GAAmC,EAAnC;AAQL,SAAK,SAAL,GAAiB,SAAjB;AACD;AAED;;;AAAqC,EAAA,aAAA,CAAA,SAAA,CAAA,UAAA,GAAA,UAAW,UAAX,EAAsC;AACzE,QAAM,OAAO,GAAqB,IAAlC;AACA,QAAM,KAAK,GAAG,OAAO,CAAC,kBAAR,EAAd;AACA,IAAA,UAAU,CAAC,GAAX,CAAe,IAAI,cAAA,CAAA,YAAJ,CAAiB,YAAA;AAC9B,MAAA,OAAO,CAAC,oBAAR,CAA6B,KAA7B;AACD,KAFc,CAAf;AAGA,WAAO,MAAA,CAAA,SAAA,CAAM,UAAN,CAAgB,IAAhB,CAAgB,IAAhB,EAAiB,UAAjB,CAAP;AACD,GAPoC;;AASrC,EAAA,aAAA,CAAA,SAAA,CAAA,KAAA,GAAA,YAAA;AACE,QAAM,OAAO,GAAG,IAAhB;AACA,QAAM,cAAc,GAAG,OAAO,CAAC,QAAR,CAAiB,MAAxC;AACA;;AACA,SAAK,IAAI,CAAC,GAAG,CAAb,EAAgB,CAAC,GAAG,cAApB,EAAoC,CAAC,EAArC,EAAyC;AACvC,OAAC,YAAA;AACC,YAAI,OAAO,GAAG,OAAO,CAAC,QAAR,CAAiB,CAAjB,CAAd;AACL;;AACK,QAAA,OAAO,CAAC,SAAR,CAAkB,QAAlB,CACE,YAAA;AAAQ,UAAA,OAAO,CAAC,YAAR,CAAqB,OAArB,CAA6B,OAA7B;AAAwC,SADlD,EAEE,OAAO,CAAC,KAFV;AAID,OAPD;AAQD;AACF,GAdD;;AAeF,SAAA,aAAA;AAAC,CApCD,CAAsC,SAAA,CAAA,OAAtC,CAAA;;AAAa,OAAA,CAAA,aAAA,GAAa,aAAb;AAqCb,aAAA,CAAA,WAAA,CAAY,aAAZ,EAA2B,CAAC,sBAAA,CAAA,oBAAD,CAA3B","sourcesContent":["import { Subject } from '../Subject';\nimport { Subscriber } from '../Subscriber';\nimport { Subscription } from '../Subscription';\nimport { Scheduler } from '../Scheduler';\nimport { TestMessage } from './TestMessage';\nimport { SubscriptionLog } from './SubscriptionLog';\nimport { SubscriptionLoggable } from './SubscriptionLoggable';\nimport { applyMixins } from '../util/applyMixins';\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nexport class HotObservable<T> extends Subject<T> implements SubscriptionLoggable {\n  public subscriptions: SubscriptionLog[] = [];\n  scheduler: Scheduler;\n  logSubscribedFrame: () => number;\n  logUnsubscribedFrame: (index: number) => void;\n\n  constructor(public messages: TestMessage[],\n              scheduler: Scheduler) {\n    super();\n    this.scheduler = scheduler;\n  }\n\n  /** @deprecated internal use only */ _subscribe(subscriber: Subscriber<any>): Subscription {\n    const subject: HotObservable<T> = this;\n    const index = subject.logSubscribedFrame();\n    subscriber.add(new Subscription(() => {\n      subject.logUnsubscribedFrame(index);\n    }));\n    return super._subscribe(subscriber);\n  }\n\n  setup() {\n    const subject = this;\n    const messagesLength = subject.messages.length;\n    /* tslint:disable:no-var-keyword */\n    for (var i = 0; i < messagesLength; i++) {\n      (() => {\n        var message = subject.messages[i];\n   /* tslint:enable */\n        subject.scheduler.schedule(\n          () => { message.notification.observe(subject); },\n          message.frame\n        );\n      })();\n    }\n  }\n}\napplyMixins(HotObservable, [SubscriptionLoggable]);\n"],"sourceRoot":""},"metadata":{},"sourceType":"script"}