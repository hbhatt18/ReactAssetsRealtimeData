{"ast":null,"code":"\"use strict\";\n\nvar __extends = this && this.__extends || function (d, b) {\n  for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n\n  function __() {\n    this.constructor = d;\n  }\n\n  d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\n\nvar Subscriber_1 = require('../Subscriber');\n\nvar tryCatch_1 = require('../util/tryCatch');\n\nvar errorObject_1 = require('../util/errorObject');\n/**\n * Compares all values of two observables in sequence using an optional comparor function\n * and returns an observable of a single boolean value representing whether or not the two sequences\n * are equal.\n *\n * <span class=\"informal\">Checks to see of all values emitted by both observables are equal, in order.</span>\n *\n * <img src=\"./img/sequenceEqual.png\" width=\"100%\">\n *\n * `sequenceEqual` subscribes to two observables and buffers incoming values from each observable. Whenever either\n * observable emits a value, the value is buffered and the buffers are shifted and compared from the bottom\n * up; If any value pair doesn't match, the returned observable will emit `false` and complete. If one of the\n * observables completes, the operator will wait for the other observable to complete; If the other\n * observable emits before completing, the returned observable will emit `false` and complete. If one observable never\n * completes or emits after the other complets, the returned observable will never complete.\n *\n * @example <caption>figure out if the Konami code matches</caption>\n * var code = Rx.Observable.from([\n *  \"ArrowUp\",\n *  \"ArrowUp\",\n *  \"ArrowDown\",\n *  \"ArrowDown\",\n *  \"ArrowLeft\",\n *  \"ArrowRight\",\n *  \"ArrowLeft\",\n *  \"ArrowRight\",\n *  \"KeyB\",\n *  \"KeyA\",\n *  \"Enter\" // no start key, clearly.\n * ]);\n *\n * var keys = Rx.Observable.fromEvent(document, 'keyup')\n *  .map(e => e.code);\n * var matches = keys.bufferCount(11, 1)\n *  .mergeMap(\n *    last11 =>\n *      Rx.Observable.from(last11)\n *        .sequenceEqual(code)\n *   );\n * matches.subscribe(matched => console.log('Successful cheat at Contra? ', matched));\n *\n * @see {@link combineLatest}\n * @see {@link zip}\n * @see {@link withLatestFrom}\n *\n * @param {Observable} compareTo The observable sequence to compare the source sequence to.\n * @param {function} [comparor] An optional function to compare each value pair\n * @return {Observable} An Observable of a single boolean value representing whether or not\n * the values emitted by both observables were equal in sequence.\n * @method sequenceEqual\n * @owner Observable\n */\n\n\nfunction sequenceEqual(compareTo, comparor) {\n  return function (source) {\n    return source.lift(new SequenceEqualOperator(compareTo, comparor));\n  };\n}\n\nexports.sequenceEqual = sequenceEqual;\n\nvar SequenceEqualOperator = function () {\n  function SequenceEqualOperator(compareTo, comparor) {\n    this.compareTo = compareTo;\n    this.comparor = comparor;\n  }\n\n  SequenceEqualOperator.prototype.call = function (subscriber, source) {\n    return source.subscribe(new SequenceEqualSubscriber(subscriber, this.compareTo, this.comparor));\n  };\n\n  return SequenceEqualOperator;\n}();\n\nexports.SequenceEqualOperator = SequenceEqualOperator;\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\n\nvar SequenceEqualSubscriber = function (_super) {\n  __extends(SequenceEqualSubscriber, _super);\n\n  function SequenceEqualSubscriber(destination, compareTo, comparor) {\n    _super.call(this, destination);\n\n    this.compareTo = compareTo;\n    this.comparor = comparor;\n    this._a = [];\n    this._b = [];\n    this._oneComplete = false;\n    this.add(compareTo.subscribe(new SequenceEqualCompareToSubscriber(destination, this)));\n  }\n\n  SequenceEqualSubscriber.prototype._next = function (value) {\n    if (this._oneComplete && this._b.length === 0) {\n      this.emit(false);\n    } else {\n      this._a.push(value);\n\n      this.checkValues();\n    }\n  };\n\n  SequenceEqualSubscriber.prototype._complete = function () {\n    if (this._oneComplete) {\n      this.emit(this._a.length === 0 && this._b.length === 0);\n    } else {\n      this._oneComplete = true;\n    }\n  };\n\n  SequenceEqualSubscriber.prototype.checkValues = function () {\n    var _c = this,\n        _a = _c._a,\n        _b = _c._b,\n        comparor = _c.comparor;\n\n    while (_a.length > 0 && _b.length > 0) {\n      var a = _a.shift();\n\n      var b = _b.shift();\n\n      var areEqual = false;\n\n      if (comparor) {\n        areEqual = tryCatch_1.tryCatch(comparor)(a, b);\n\n        if (areEqual === errorObject_1.errorObject) {\n          this.destination.error(errorObject_1.errorObject.e);\n        }\n      } else {\n        areEqual = a === b;\n      }\n\n      if (!areEqual) {\n        this.emit(false);\n      }\n    }\n  };\n\n  SequenceEqualSubscriber.prototype.emit = function (value) {\n    var destination = this.destination;\n    destination.next(value);\n    destination.complete();\n  };\n\n  SequenceEqualSubscriber.prototype.nextB = function (value) {\n    if (this._oneComplete && this._a.length === 0) {\n      this.emit(false);\n    } else {\n      this._b.push(value);\n\n      this.checkValues();\n    }\n  };\n\n  return SequenceEqualSubscriber;\n}(Subscriber_1.Subscriber);\n\nexports.SequenceEqualSubscriber = SequenceEqualSubscriber;\n\nvar SequenceEqualCompareToSubscriber = function (_super) {\n  __extends(SequenceEqualCompareToSubscriber, _super);\n\n  function SequenceEqualCompareToSubscriber(destination, parent) {\n    _super.call(this, destination);\n\n    this.parent = parent;\n  }\n\n  SequenceEqualCompareToSubscriber.prototype._next = function (value) {\n    this.parent.nextB(value);\n  };\n\n  SequenceEqualCompareToSubscriber.prototype._error = function (err) {\n    this.parent.error(err);\n  };\n\n  SequenceEqualCompareToSubscriber.prototype._complete = function () {\n    this.parent._complete();\n  };\n\n  return SequenceEqualCompareToSubscriber;\n}(Subscriber_1.Subscriber);","map":{"version":3,"sources":["../../src/operators/sequenceEqual.ts"],"names":[],"mappings":"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","sourcesContent":["import { Operator } from '../Operator';\nimport { Observer } from '../Observer';\nimport { Observable } from '../Observable';\nimport { Subscriber } from '../Subscriber';\nimport { tryCatch } from '../util/tryCatch';\nimport { errorObject } from '../util/errorObject';\n\nimport { OperatorFunction } from '../interfaces';\n\n/**\n * Compares all values of two observables in sequence using an optional comparor function\n * and returns an observable of a single boolean value representing whether or not the two sequences\n * are equal.\n *\n * <span class=\"informal\">Checks to see of all values emitted by both observables are equal, in order.</span>\n *\n * <img src=\"./img/sequenceEqual.png\" width=\"100%\">\n *\n * `sequenceEqual` subscribes to two observables and buffers incoming values from each observable. Whenever either\n * observable emits a value, the value is buffered and the buffers are shifted and compared from the bottom\n * up; If any value pair doesn't match, the returned observable will emit `false` and complete. If one of the\n * observables completes, the operator will wait for the other observable to complete; If the other\n * observable emits before completing, the returned observable will emit `false` and complete. If one observable never\n * completes or emits after the other complets, the returned observable will never complete.\n *\n * @example <caption>figure out if the Konami code matches</caption>\n * var code = Rx.Observable.from([\n *  \"ArrowUp\",\n *  \"ArrowUp\",\n *  \"ArrowDown\",\n *  \"ArrowDown\",\n *  \"ArrowLeft\",\n *  \"ArrowRight\",\n *  \"ArrowLeft\",\n *  \"ArrowRight\",\n *  \"KeyB\",\n *  \"KeyA\",\n *  \"Enter\" // no start key, clearly.\n * ]);\n *\n * var keys = Rx.Observable.fromEvent(document, 'keyup')\n *  .map(e => e.code);\n * var matches = keys.bufferCount(11, 1)\n *  .mergeMap(\n *    last11 =>\n *      Rx.Observable.from(last11)\n *        .sequenceEqual(code)\n *   );\n * matches.subscribe(matched => console.log('Successful cheat at Contra? ', matched));\n *\n * @see {@link combineLatest}\n * @see {@link zip}\n * @see {@link withLatestFrom}\n *\n * @param {Observable} compareTo The observable sequence to compare the source sequence to.\n * @param {function} [comparor] An optional function to compare each value pair\n * @return {Observable} An Observable of a single boolean value representing whether or not\n * the values emitted by both observables were equal in sequence.\n * @method sequenceEqual\n * @owner Observable\n */\nexport function sequenceEqual<T>(compareTo: Observable<T>,\n                                 comparor?: (a: T, b: T) => boolean): OperatorFunction<T, boolean> {\n  return (source: Observable<T>) => source.lift(new SequenceEqualOperator(compareTo, comparor));\n}\n\nexport class SequenceEqualOperator<T> implements Operator<T, boolean> {\n  constructor(private compareTo: Observable<T>,\n              private comparor: (a: T, b: T) => boolean) {\n  }\n\n  call(subscriber: Subscriber<boolean>, source: any): any {\n    return source.subscribe(new SequenceEqualSubscriber(subscriber, this.compareTo, this.comparor));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nexport class SequenceEqualSubscriber<T, R> extends Subscriber<T> {\n  private _a: T[] = [];\n  private _b: T[] = [];\n  private _oneComplete = false;\n\n  constructor(destination: Observer<R>,\n              private compareTo: Observable<T>,\n              private comparor: (a: T, b: T) => boolean) {\n    super(destination);\n    this.add(compareTo.subscribe(new SequenceEqualCompareToSubscriber(destination, this)));\n  }\n\n  protected _next(value: T): void {\n    if (this._oneComplete && this._b.length === 0) {\n      this.emit(false);\n    } else {\n      this._a.push(value);\n      this.checkValues();\n    }\n  }\n\n  public _complete(): void {\n    if (this._oneComplete) {\n      this.emit(this._a.length === 0 && this._b.length === 0);\n    } else {\n      this._oneComplete = true;\n    }\n  }\n\n  checkValues() {\n    const { _a, _b, comparor } = this;\n    while (_a.length > 0 && _b.length > 0) {\n      let a = _a.shift();\n      let b = _b.shift();\n      let areEqual = false;\n      if (comparor) {\n        areEqual = tryCatch(comparor)(a, b);\n        if (areEqual === errorObject) {\n          this.destination.error(errorObject.e);\n        }\n      } else {\n        areEqual = a === b;\n      }\n      if (!areEqual) {\n        this.emit(false);\n      }\n    }\n  }\n\n  emit(value: boolean) {\n    const { destination } = this;\n    destination.next(value);\n    destination.complete();\n  }\n\n  nextB(value: T) {\n    if (this._oneComplete && this._a.length === 0) {\n      this.emit(false);\n    } else {\n      this._b.push(value);\n      this.checkValues();\n    }\n  }\n}\n\nclass SequenceEqualCompareToSubscriber<T, R> extends Subscriber<T> {\n  constructor(destination: Observer<R>, private parent: SequenceEqualSubscriber<T, R>) {\n    super(destination);\n  }\n\n  protected _next(value: T): void {\n    this.parent.nextB(value);\n  }\n\n  protected _error(err: any): void {\n    this.parent.error(err);\n  }\n\n  protected _complete(): void {\n    this.parent._complete();\n  }\n}\n"],"sourceRoot":""},"metadata":{},"sourceType":"script"}