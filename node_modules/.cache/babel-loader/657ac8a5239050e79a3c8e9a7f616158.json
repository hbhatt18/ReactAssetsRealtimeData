{"ast":null,"code":"\"use strict\";\n\nvar skip_1 = require('../operators/skip');\n/**\n * Returns an Observable that skips the first `count` items emitted by the source Observable.\n *\n * <img src=\"./img/skip.png\" width=\"100%\">\n *\n * @param {Number} count - The number of times, items emitted by source Observable should be skipped.\n * @return {Observable} An Observable that skips values emitted by the source Observable.\n *\n * @method skip\n * @owner Observable\n */\n\n\nfunction skip(count) {\n  return skip_1.skip(count)(this);\n}\n\nexports.skip = skip;","map":{"version":3,"sources":["../../src/operator/skip.ts"],"names":[],"mappings":";;AACA,IAAA,MAAA,GAAA,OAAA,CAAoC,mBAApC,CAAA;AAEA;;;;;;;;;;;;;AAWA,SAAA,IAAA,CAA6C,KAA7C,EAA0D;AACxD,SAAO,MAAA,CAAA,IAAA,CAAY,KAAZ,EAAmB,IAAnB,CAAP;AACD;;AAFe,OAAA,CAAA,IAAA,GAAI,IAAJ","sourcesContent":["import { Observable } from '../Observable';\nimport { skip as higherOrder } from '../operators/skip';\n\n/**\n * Returns an Observable that skips the first `count` items emitted by the source Observable.\n *\n * <img src=\"./img/skip.png\" width=\"100%\">\n *\n * @param {Number} count - The number of times, items emitted by source Observable should be skipped.\n * @return {Observable} An Observable that skips values emitted by the source Observable.\n *\n * @method skip\n * @owner Observable\n */\nexport function skip<T>(this: Observable<T>, count: number): Observable<T> {\n  return higherOrder(count)(this) as Observable<T>;\n}\n"],"sourceRoot":""},"metadata":{},"sourceType":"script"}