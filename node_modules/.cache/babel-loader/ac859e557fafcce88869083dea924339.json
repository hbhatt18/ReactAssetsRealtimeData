{"ast":null,"code":"\"use strict\";\n\nvar __extends = this && this.__extends || function (d, b) {\n  for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n\n  function __() {\n    this.constructor = d;\n  }\n\n  d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\n\nvar OuterSubscriber_1 = require('../OuterSubscriber');\n\nvar subscribeToResult_1 = require('../util/subscribeToResult');\n/* tslint:enable:max-line-length */\n\n/**\n * Projects each source value to the same Observable which is merged multiple\n * times in the output Observable.\n *\n * <span class=\"informal\">It's like {@link mergeMap}, but maps each value always\n * to the same inner Observable.</span>\n *\n * <img src=\"./img/mergeMapTo.png\" width=\"100%\">\n *\n * Maps each source value to the given Observable `innerObservable` regardless\n * of the source value, and then merges those resulting Observables into one\n * single Observable, which is the output Observable.\n *\n * @example <caption>For each click event, start an interval Observable ticking every 1 second</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = clicks.mergeMapTo(Rx.Observable.interval(1000));\n * result.subscribe(x => console.log(x));\n *\n * @see {@link concatMapTo}\n * @see {@link merge}\n * @see {@link mergeAll}\n * @see {@link mergeMap}\n * @see {@link mergeScan}\n * @see {@link switchMapTo}\n *\n * @param {ObservableInput} innerObservable An Observable to replace each value from\n * the source Observable.\n * @param {function(outerValue: T, innerValue: I, outerIndex: number, innerIndex: number): any} [resultSelector]\n * A function to produce the value on the output Observable based on the values\n * and the indices of the source (outer) emission and the inner Observable\n * emission. The arguments passed to this function are:\n * - `outerValue`: the value that came from the source\n * - `innerValue`: the value that came from the projected Observable\n * - `outerIndex`: the \"index\" of the value that came from the source\n * - `innerIndex`: the \"index\" of the value from the projected Observable\n * @param {number} [concurrent=Number.POSITIVE_INFINITY] Maximum number of input\n * Observables being subscribed to concurrently.\n * @return {Observable} An Observable that emits items from the given\n * `innerObservable` (and optionally transformed through `resultSelector`) every\n * time a value is emitted on the source Observable.\n * @method mergeMapTo\n * @owner Observable\n */\n\n\nfunction mergeMapTo(innerObservable, resultSelector, concurrent) {\n  if (concurrent === void 0) {\n    concurrent = Number.POSITIVE_INFINITY;\n  }\n\n  if (typeof resultSelector === 'number') {\n    concurrent = resultSelector;\n    resultSelector = null;\n  }\n\n  return function (source) {\n    return source.lift(new MergeMapToOperator(innerObservable, resultSelector, concurrent));\n  };\n}\n\nexports.mergeMapTo = mergeMapTo; // TODO: Figure out correct signature here: an Operator<Observable<T>, R>\n//       needs to implement call(observer: Subscriber<R>): Subscriber<Observable<T>>\n\nvar MergeMapToOperator = function () {\n  function MergeMapToOperator(ish, resultSelector, concurrent) {\n    if (concurrent === void 0) {\n      concurrent = Number.POSITIVE_INFINITY;\n    }\n\n    this.ish = ish;\n    this.resultSelector = resultSelector;\n    this.concurrent = concurrent;\n  }\n\n  MergeMapToOperator.prototype.call = function (observer, source) {\n    return source.subscribe(new MergeMapToSubscriber(observer, this.ish, this.resultSelector, this.concurrent));\n  };\n\n  return MergeMapToOperator;\n}();\n\nexports.MergeMapToOperator = MergeMapToOperator;\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\n\nvar MergeMapToSubscriber = function (_super) {\n  __extends(MergeMapToSubscriber, _super);\n\n  function MergeMapToSubscriber(destination, ish, resultSelector, concurrent) {\n    if (concurrent === void 0) {\n      concurrent = Number.POSITIVE_INFINITY;\n    }\n\n    _super.call(this, destination);\n\n    this.ish = ish;\n    this.resultSelector = resultSelector;\n    this.concurrent = concurrent;\n    this.hasCompleted = false;\n    this.buffer = [];\n    this.active = 0;\n    this.index = 0;\n  }\n\n  MergeMapToSubscriber.prototype._next = function (value) {\n    if (this.active < this.concurrent) {\n      var resultSelector = this.resultSelector;\n      var index = this.index++;\n      var ish = this.ish;\n      var destination = this.destination;\n      this.active++;\n\n      this._innerSub(ish, destination, resultSelector, value, index);\n    } else {\n      this.buffer.push(value);\n    }\n  };\n\n  MergeMapToSubscriber.prototype._innerSub = function (ish, destination, resultSelector, value, index) {\n    this.add(subscribeToResult_1.subscribeToResult(this, ish, value, index));\n  };\n\n  MergeMapToSubscriber.prototype._complete = function () {\n    this.hasCompleted = true;\n\n    if (this.active === 0 && this.buffer.length === 0) {\n      this.destination.complete();\n    }\n  };\n\n  MergeMapToSubscriber.prototype.notifyNext = function (outerValue, innerValue, outerIndex, innerIndex, innerSub) {\n    var _a = this,\n        resultSelector = _a.resultSelector,\n        destination = _a.destination;\n\n    if (resultSelector) {\n      this.trySelectResult(outerValue, innerValue, outerIndex, innerIndex);\n    } else {\n      destination.next(innerValue);\n    }\n  };\n\n  MergeMapToSubscriber.prototype.trySelectResult = function (outerValue, innerValue, outerIndex, innerIndex) {\n    var _a = this,\n        resultSelector = _a.resultSelector,\n        destination = _a.destination;\n\n    var result;\n\n    try {\n      result = resultSelector(outerValue, innerValue, outerIndex, innerIndex);\n    } catch (err) {\n      destination.error(err);\n      return;\n    }\n\n    destination.next(result);\n  };\n\n  MergeMapToSubscriber.prototype.notifyError = function (err) {\n    this.destination.error(err);\n  };\n\n  MergeMapToSubscriber.prototype.notifyComplete = function (innerSub) {\n    var buffer = this.buffer;\n    this.remove(innerSub);\n    this.active--;\n\n    if (buffer.length > 0) {\n      this._next(buffer.shift());\n    } else if (this.active === 0 && this.hasCompleted) {\n      this.destination.complete();\n    }\n  };\n\n  return MergeMapToSubscriber;\n}(OuterSubscriber_1.OuterSubscriber);\n\nexports.MergeMapToSubscriber = MergeMapToSubscriber;","map":{"version":3,"sources":["../../src/operators/mergeMapTo.ts"],"names":[],"mappings":"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","sourcesContent":["import { Observable, ObservableInput } from '../Observable';\nimport { Operator } from '../Operator';\nimport { PartialObserver } from '../Observer';\nimport { Subscriber } from '../Subscriber';\nimport { Subscription } from '../Subscription';\nimport { OuterSubscriber } from '../OuterSubscriber';\nimport { InnerSubscriber } from '../InnerSubscriber';\nimport { subscribeToResult } from '../util/subscribeToResult';\nimport { OperatorFunction } from '../interfaces';\n\n/* tslint:disable:max-line-length */\nexport function mergeMapTo<T, R>(observable: ObservableInput<R>, concurrent?: number): OperatorFunction<T, R>;\nexport function mergeMapTo<T, I, R>(observable: ObservableInput<I>, resultSelector: (outerValue: T, innerValue: I, outerIndex: number, innerIndex: number) => R, concurrent?: number): OperatorFunction<T, R>;\n/* tslint:enable:max-line-length */\n\n/**\n * Projects each source value to the same Observable which is merged multiple\n * times in the output Observable.\n *\n * <span class=\"informal\">It's like {@link mergeMap}, but maps each value always\n * to the same inner Observable.</span>\n *\n * <img src=\"./img/mergeMapTo.png\" width=\"100%\">\n *\n * Maps each source value to the given Observable `innerObservable` regardless\n * of the source value, and then merges those resulting Observables into one\n * single Observable, which is the output Observable.\n *\n * @example <caption>For each click event, start an interval Observable ticking every 1 second</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = clicks.mergeMapTo(Rx.Observable.interval(1000));\n * result.subscribe(x => console.log(x));\n *\n * @see {@link concatMapTo}\n * @see {@link merge}\n * @see {@link mergeAll}\n * @see {@link mergeMap}\n * @see {@link mergeScan}\n * @see {@link switchMapTo}\n *\n * @param {ObservableInput} innerObservable An Observable to replace each value from\n * the source Observable.\n * @param {function(outerValue: T, innerValue: I, outerIndex: number, innerIndex: number): any} [resultSelector]\n * A function to produce the value on the output Observable based on the values\n * and the indices of the source (outer) emission and the inner Observable\n * emission. The arguments passed to this function are:\n * - `outerValue`: the value that came from the source\n * - `innerValue`: the value that came from the projected Observable\n * - `outerIndex`: the \"index\" of the value that came from the source\n * - `innerIndex`: the \"index\" of the value from the projected Observable\n * @param {number} [concurrent=Number.POSITIVE_INFINITY] Maximum number of input\n * Observables being subscribed to concurrently.\n * @return {Observable} An Observable that emits items from the given\n * `innerObservable` (and optionally transformed through `resultSelector`) every\n * time a value is emitted on the source Observable.\n * @method mergeMapTo\n * @owner Observable\n */\nexport function mergeMapTo<T, I, R>(innerObservable: Observable<I>,\n                                    resultSelector?: ((outerValue: T, innerValue: I, outerIndex: number, innerIndex: number) => R) | number,\n                                    concurrent: number = Number.POSITIVE_INFINITY): OperatorFunction<T, R> {\n  if (typeof resultSelector === 'number') {\n    concurrent = <number>resultSelector;\n    resultSelector = null;\n  }\n  return (source: Observable<T>) => source.lift(new MergeMapToOperator(innerObservable, <any>resultSelector, concurrent));\n}\n\n// TODO: Figure out correct signature here: an Operator<Observable<T>, R>\n//       needs to implement call(observer: Subscriber<R>): Subscriber<Observable<T>>\nexport class MergeMapToOperator<T, I, R> implements Operator<Observable<T>, R> {\n  constructor(private ish: ObservableInput<I>,\n              private resultSelector?: (outerValue: T, innerValue: I, outerIndex: number, innerIndex: number) => R,\n              private concurrent: number = Number.POSITIVE_INFINITY) {\n  }\n\n  call(observer: Subscriber<R>, source: any): any {\n    return source.subscribe(new MergeMapToSubscriber(observer, this.ish, this.resultSelector, this.concurrent));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nexport class MergeMapToSubscriber<T, I, R> extends OuterSubscriber<T, I> {\n  private hasCompleted: boolean = false;\n  private buffer: T[] = [];\n  private active: number = 0;\n  protected index: number = 0;\n\n  constructor(destination: Subscriber<R>,\n              private ish: ObservableInput<I>,\n              private resultSelector?: (outerValue: T, innerValue: I, outerIndex: number, innerIndex: number) => R,\n              private concurrent: number = Number.POSITIVE_INFINITY) {\n    super(destination);\n  }\n\n  protected _next(value: T): void {\n    if (this.active < this.concurrent) {\n      const resultSelector = this.resultSelector;\n      const index = this.index++;\n      const ish = this.ish;\n      const destination = this.destination;\n\n      this.active++;\n      this._innerSub(ish, destination, resultSelector, value, index);\n    } else {\n      this.buffer.push(value);\n    }\n  }\n\n  private _innerSub(ish: ObservableInput<I>,\n                    destination: PartialObserver<I>,\n                    resultSelector: (outerValue: T, innerValue: I, outerIndex: number, innerIndex: number) => R,\n                    value: T,\n                    index: number): void {\n    this.add(subscribeToResult<T, I>(this, ish, value, index));\n  }\n\n  protected _complete(): void {\n    this.hasCompleted = true;\n    if (this.active === 0 && this.buffer.length === 0) {\n      this.destination.complete();\n    }\n  }\n\n  notifyNext(outerValue: T, innerValue: I,\n             outerIndex: number, innerIndex: number,\n             innerSub: InnerSubscriber<T, I>): void {\n    const { resultSelector, destination } = this;\n    if (resultSelector) {\n      this.trySelectResult(outerValue, innerValue, outerIndex, innerIndex);\n    } else {\n      destination.next(innerValue);\n    }\n  }\n\n  private trySelectResult(outerValue: T, innerValue: I,\n                          outerIndex: number, innerIndex: number): void {\n    const { resultSelector, destination } = this;\n    let result: R;\n    try {\n      result = resultSelector(outerValue, innerValue, outerIndex, innerIndex);\n    } catch (err) {\n      destination.error(err);\n      return;\n    }\n\n    destination.next(result);\n  }\n\n  notifyError(err: any): void {\n    this.destination.error(err);\n  }\n\n  notifyComplete(innerSub: Subscription): void {\n    const buffer = this.buffer;\n    this.remove(innerSub);\n    this.active--;\n    if (buffer.length > 0) {\n      this._next(buffer.shift());\n    } else if (this.active === 0 && this.hasCompleted) {\n      this.destination.complete();\n    }\n  }\n}\n"],"sourceRoot":""},"metadata":{},"sourceType":"script"}