{"ast":null,"code":"\"use strict\";\n\nvar combineLatest_1 = require('../operators/combineLatest');\n\nfunction combineAll(project) {\n  return function (source) {\n    return source.lift(new combineLatest_1.CombineLatestOperator(project));\n  };\n}\n\nexports.combineAll = combineAll;","map":{"version":3,"sources":["../../src/operators/combineAll.ts"],"names":[],"mappings":";;AAAA,IAAA,eAAA,GAAA,OAAA,CAAsC,4BAAtC,CAAA;;AAIA,SAAA,UAAA,CAAiC,OAAjC,EAAuE;AACrE,SAAO,UAAC,MAAD,EAAsB;AAAK,WAAA,MAAM,CAAC,IAAP,CAAY,IAAI,eAAA,CAAA,qBAAJ,CAAZ,OAAY,CAAZ,CAAA;AAA+C,GAAjF;AACD;;AAFe,OAAA,CAAA,UAAA,GAAU,UAAV","sourcesContent":["import { CombineLatestOperator } from '../operators/combineLatest';\nimport { Observable } from '../Observable';\nimport { OperatorFunction } from '../interfaces';\n\nexport function combineAll<T, R>(project?: (...values: Array<any>) => R): OperatorFunction<T, R> {\n  return (source: Observable<T>) => source.lift(new CombineLatestOperator(project));\n}\n"],"sourceRoot":""},"metadata":{},"sourceType":"script"}