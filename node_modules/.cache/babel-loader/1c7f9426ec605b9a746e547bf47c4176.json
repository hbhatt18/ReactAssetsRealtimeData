{"ast":null,"code":"\"use strict\";\n\nvar __extends = this && this.__extends || function (d, b) {\n  for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n\n  function __() {\n    this.constructor = d;\n  }\n\n  d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\n\nvar isArray_1 = require('../util/isArray');\n\nvar ArrayObservable_1 = require('../observable/ArrayObservable');\n\nvar OuterSubscriber_1 = require('../OuterSubscriber');\n\nvar subscribeToResult_1 = require('../util/subscribeToResult');\n\nfunction race() {\n  var observables = [];\n\n  for (var _i = 0; _i < arguments.length; _i++) {\n    observables[_i - 0] = arguments[_i];\n  } // if the only argument is an array, it was most likely called with\n  // `race([obs1, obs2, ...])`\n\n\n  if (observables.length === 1) {\n    if (isArray_1.isArray(observables[0])) {\n      observables = observables[0];\n    } else {\n      return observables[0];\n    }\n  }\n\n  return new ArrayObservable_1.ArrayObservable(observables).lift(new RaceOperator());\n}\n\nexports.race = race;\n\nvar RaceOperator = function () {\n  function RaceOperator() {}\n\n  RaceOperator.prototype.call = function (subscriber, source) {\n    return source.subscribe(new RaceSubscriber(subscriber));\n  };\n\n  return RaceOperator;\n}();\n\nexports.RaceOperator = RaceOperator;\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\n\nvar RaceSubscriber = function (_super) {\n  __extends(RaceSubscriber, _super);\n\n  function RaceSubscriber(destination) {\n    _super.call(this, destination);\n\n    this.hasFirst = false;\n    this.observables = [];\n    this.subscriptions = [];\n  }\n\n  RaceSubscriber.prototype._next = function (observable) {\n    this.observables.push(observable);\n  };\n\n  RaceSubscriber.prototype._complete = function () {\n    var observables = this.observables;\n    var len = observables.length;\n\n    if (len === 0) {\n      this.destination.complete();\n    } else {\n      for (var i = 0; i < len && !this.hasFirst; i++) {\n        var observable = observables[i];\n        var subscription = subscribeToResult_1.subscribeToResult(this, observable, observable, i);\n\n        if (this.subscriptions) {\n          this.subscriptions.push(subscription);\n        }\n\n        this.add(subscription);\n      }\n\n      this.observables = null;\n    }\n  };\n\n  RaceSubscriber.prototype.notifyNext = function (outerValue, innerValue, outerIndex, innerIndex, innerSub) {\n    if (!this.hasFirst) {\n      this.hasFirst = true;\n\n      for (var i = 0; i < this.subscriptions.length; i++) {\n        if (i !== outerIndex) {\n          var subscription = this.subscriptions[i];\n          subscription.unsubscribe();\n          this.remove(subscription);\n        }\n      }\n\n      this.subscriptions = null;\n    }\n\n    this.destination.next(innerValue);\n  };\n\n  return RaceSubscriber;\n}(OuterSubscriber_1.OuterSubscriber);\n\nexports.RaceSubscriber = RaceSubscriber;","map":{"version":3,"sources":["../../src/observable/race.ts"],"names":[],"mappings":"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","sourcesContent":["import { Observable } from '../Observable';\nimport { isArray } from '../util/isArray';\nimport { ArrayObservable } from '../observable/ArrayObservable';\nimport { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { Subscription, TeardownLogic } from '../Subscription';\nimport { OuterSubscriber } from '../OuterSubscriber';\nimport { InnerSubscriber } from '../InnerSubscriber';\nimport { subscribeToResult } from '../util/subscribeToResult';\n\n/**\n * Returns an Observable that mirrors the first source Observable to emit an item.\n * @param {...Observables} ...observables sources used to race for which Observable emits first.\n * @return {Observable} an Observable that mirrors the output of the first Observable to emit an item.\n * @static true\n * @name race\n * @owner Observable\n */\nexport function race<T>(observables: Array<Observable<T>>): Observable<T>;\nexport function race<T>(observables: Array<Observable<any>>): Observable<T>;\nexport function race<T>(...observables: Array<Observable<T> | Array<Observable<T>>>): Observable<T>;\nexport function race<T>(...observables: Array<Observable<any> | Array<Observable<any>>>): Observable<T> {\n  // if the only argument is an array, it was most likely called with\n  // `race([obs1, obs2, ...])`\n  if (observables.length === 1) {\n    if (isArray(observables[0])) {\n      observables = <Array<Observable<any>>>observables[0];\n    } else {\n      return <Observable<any>>observables[0];\n    }\n  }\n\n  return new ArrayObservable<T>(<any>observables).lift(new RaceOperator<T>());\n}\n\nexport class RaceOperator<T> implements Operator<T, T> {\n  call(subscriber: Subscriber<T>, source: any): TeardownLogic {\n    return source.subscribe(new RaceSubscriber(subscriber));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nexport class RaceSubscriber<T> extends OuterSubscriber<T, T> {\n  private hasFirst: boolean = false;\n  private observables: Observable<any>[] = [];\n  private subscriptions: Subscription[] = [];\n\n  constructor(destination: Subscriber<T>) {\n    super(destination);\n  }\n\n  protected _next(observable: any): void {\n    this.observables.push(observable);\n  }\n\n  protected _complete() {\n    const observables = this.observables;\n    const len = observables.length;\n\n    if (len === 0) {\n      this.destination.complete();\n    } else {\n      for (let i = 0; i < len && !this.hasFirst; i++) {\n        let observable = observables[i];\n        let subscription = subscribeToResult(this, observable, observable, i);\n\n        if (this.subscriptions) {\n          this.subscriptions.push(subscription);\n        }\n        this.add(subscription);\n      }\n      this.observables = null;\n    }\n  }\n\n  notifyNext(outerValue: T, innerValue: T,\n             outerIndex: number, innerIndex: number,\n             innerSub: InnerSubscriber<T, T>): void {\n    if (!this.hasFirst) {\n      this.hasFirst = true;\n\n      for (let i = 0; i < this.subscriptions.length; i++) {\n        if (i !== outerIndex) {\n          let subscription = this.subscriptions[i];\n\n          subscription.unsubscribe();\n          this.remove(subscription);\n        }\n      }\n\n      this.subscriptions = null;\n    }\n\n    this.destination.next(innerValue);\n  }\n}\n"],"sourceRoot":""},"metadata":{},"sourceType":"script"}