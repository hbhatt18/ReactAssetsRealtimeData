{"ast":null,"code":"\"use strict\";\n\nvar __extends = this && this.__extends || function (d, b) {\n  for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n\n  function __() {\n    this.constructor = d;\n  }\n\n  d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\n\nvar OuterSubscriber_1 = require('../OuterSubscriber');\n\nvar subscribeToResult_1 = require('../util/subscribeToResult');\n\nexports.defaultThrottleConfig = {\n  leading: true,\n  trailing: false\n};\n/**\n * Emits a value from the source Observable, then ignores subsequent source\n * values for a duration determined by another Observable, then repeats this\n * process.\n *\n * <span class=\"informal\">It's like {@link throttleTime}, but the silencing\n * duration is determined by a second Observable.</span>\n *\n * <img src=\"./img/throttle.png\" width=\"100%\">\n *\n * `throttle` emits the source Observable values on the output Observable\n * when its internal timer is disabled, and ignores source values when the timer\n * is enabled. Initially, the timer is disabled. As soon as the first source\n * value arrives, it is forwarded to the output Observable, and then the timer\n * is enabled by calling the `durationSelector` function with the source value,\n * which returns the \"duration\" Observable. When the duration Observable emits a\n * value or completes, the timer is disabled, and this process repeats for the\n * next source value.\n *\n * @example <caption>Emit clicks at a rate of at most one click per second</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = clicks.throttle(ev => Rx.Observable.interval(1000));\n * result.subscribe(x => console.log(x));\n *\n * @see {@link audit}\n * @see {@link debounce}\n * @see {@link delayWhen}\n * @see {@link sample}\n * @see {@link throttleTime}\n *\n * @param {function(value: T): SubscribableOrPromise} durationSelector A function\n * that receives a value from the source Observable, for computing the silencing\n * duration for each source value, returned as an Observable or a Promise.\n * @param {Object} config a configuration object to define `leading` and `trailing` behavior. Defaults\n * to `{ leading: true, trailing: false }`.\n * @return {Observable<T>} An Observable that performs the throttle operation to\n * limit the rate of emissions from the source.\n * @method throttle\n * @owner Observable\n */\n\nfunction throttle(durationSelector, config) {\n  if (config === void 0) {\n    config = exports.defaultThrottleConfig;\n  }\n\n  return function (source) {\n    return source.lift(new ThrottleOperator(durationSelector, config.leading, config.trailing));\n  };\n}\n\nexports.throttle = throttle;\n\nvar ThrottleOperator = function () {\n  function ThrottleOperator(durationSelector, leading, trailing) {\n    this.durationSelector = durationSelector;\n    this.leading = leading;\n    this.trailing = trailing;\n  }\n\n  ThrottleOperator.prototype.call = function (subscriber, source) {\n    return source.subscribe(new ThrottleSubscriber(subscriber, this.durationSelector, this.leading, this.trailing));\n  };\n\n  return ThrottleOperator;\n}();\n/**\n * We need this JSDoc comment for affecting ESDoc\n * @ignore\n * @extends {Ignored}\n */\n\n\nvar ThrottleSubscriber = function (_super) {\n  __extends(ThrottleSubscriber, _super);\n\n  function ThrottleSubscriber(destination, durationSelector, _leading, _trailing) {\n    _super.call(this, destination);\n\n    this.destination = destination;\n    this.durationSelector = durationSelector;\n    this._leading = _leading;\n    this._trailing = _trailing;\n    this._hasTrailingValue = false;\n  }\n\n  ThrottleSubscriber.prototype._next = function (value) {\n    if (this.throttled) {\n      if (this._trailing) {\n        this._hasTrailingValue = true;\n        this._trailingValue = value;\n      }\n    } else {\n      var duration = this.tryDurationSelector(value);\n\n      if (duration) {\n        this.add(this.throttled = subscribeToResult_1.subscribeToResult(this, duration));\n      }\n\n      if (this._leading) {\n        this.destination.next(value);\n\n        if (this._trailing) {\n          this._hasTrailingValue = true;\n          this._trailingValue = value;\n        }\n      }\n    }\n  };\n\n  ThrottleSubscriber.prototype.tryDurationSelector = function (value) {\n    try {\n      return this.durationSelector(value);\n    } catch (err) {\n      this.destination.error(err);\n      return null;\n    }\n  };\n  /** @deprecated internal use only */\n\n\n  ThrottleSubscriber.prototype._unsubscribe = function () {\n    var _a = this,\n        throttled = _a.throttled,\n        _trailingValue = _a._trailingValue,\n        _hasTrailingValue = _a._hasTrailingValue,\n        _trailing = _a._trailing;\n\n    this._trailingValue = null;\n    this._hasTrailingValue = false;\n\n    if (throttled) {\n      this.remove(throttled);\n      this.throttled = null;\n      throttled.unsubscribe();\n    }\n  };\n\n  ThrottleSubscriber.prototype._sendTrailing = function () {\n    var _a = this,\n        destination = _a.destination,\n        throttled = _a.throttled,\n        _trailing = _a._trailing,\n        _trailingValue = _a._trailingValue,\n        _hasTrailingValue = _a._hasTrailingValue;\n\n    if (throttled && _trailing && _hasTrailingValue) {\n      destination.next(_trailingValue);\n      this._trailingValue = null;\n      this._hasTrailingValue = false;\n    }\n  };\n\n  ThrottleSubscriber.prototype.notifyNext = function (outerValue, innerValue, outerIndex, innerIndex, innerSub) {\n    this._sendTrailing();\n\n    this._unsubscribe();\n  };\n\n  ThrottleSubscriber.prototype.notifyComplete = function () {\n    this._sendTrailing();\n\n    this._unsubscribe();\n  };\n\n  return ThrottleSubscriber;\n}(OuterSubscriber_1.OuterSubscriber);","map":{"version":3,"sources":["../../src/operators/throttle.ts"],"names":[],"mappings":";;;;;;;;;;;;AAKA,IAAA,iBAAA,GAAA,OAAA,CAAgC,oBAAhC,CAAA;;AAEA,IAAA,mBAAA,GAAA,OAAA,CAAkC,2BAAlC,CAAA;;AASa,OAAA,CAAA,qBAAA,GAAwC;AACnD,EAAA,OAAO,EAAE,IAD0C;AAEnD,EAAA,QAAQ,EAAE;AAFyC,CAAxC;AAKb;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAwCA,SAAA,QAAA,CAA4B,gBAA5B,EAC4B,MAD5B,EAC0E;AAA9C,MAAA,MAAA,KAAA,KAAA,CAAA,EAA8C;AAA9C,IAAA,MAAA,GAAA,OAAA,CAAA,qBAAA;AAA8C;;AACxE,SAAO,UAAC,MAAD,EAAsB;AAAK,WAAA,MAAM,CAAC,IAAP,CAAY,IAAI,gBAAJ,CAAqB,gBAArB,EAAuC,MAAM,CAAC,OAA9C,EAAuD,MAAM,CAAzE,QAAY,CAAZ,CAAA;AAAoF,GAAtH;AACD;;AAHe,OAAA,CAAA,QAAA,GAAQ,QAAR;;AAKhB,IAAA,gBAAA,GAAA,YAAA;AACE,WAAA,gBAAA,CAAoB,gBAApB,EACoB,OADpB,EAEoB,QAFpB,EAEqC;AAFjB,SAAA,gBAAA,GAAA,gBAAA;AACA,SAAA,OAAA,GAAA,OAAA;AACA,SAAA,QAAA,GAAA,QAAA;AACnB;;AAED,EAAA,gBAAA,CAAA,SAAA,CAAA,IAAA,GAAA,UAAK,UAAL,EAAgC,MAAhC,EAA2C;AACzC,WAAO,MAAM,CAAC,SAAP,CACL,IAAI,kBAAJ,CAAuB,UAAvB,EAAmC,KAAK,gBAAxC,EAA0D,KAAK,OAA/D,EAAwE,KAAK,QAA7E,CADK,CAAP;AAGD,GAJD;;AAKF,SAAA,gBAAA;AAAC,CAXD,EAAA;AAaA;;;;;;;AAKA,IAAA,kBAAA,GAAA,UAAA,MAAA,EAAA;AAAuC,EAAA,SAAA,CAAA,kBAAA,EAAA,MAAA,CAAA;;AAKrC,WAAA,kBAAA,CAAsB,WAAtB,EACoB,gBADpB,EAEoB,QAFpB,EAGoB,SAHpB,EAGsC;AACpC,IAAA,MAAA,CAAA,IAAA,CAAA,IAAA,EAAM,WAAN;;AAJoB,SAAA,WAAA,GAAA,WAAA;AACF,SAAA,gBAAA,GAAA,gBAAA;AACA,SAAA,QAAA,GAAA,QAAA;AACA,SAAA,SAAA,GAAA,SAAA;AALZ,SAAA,iBAAA,GAAoB,KAApB;AAOP;;AAES,EAAA,kBAAA,CAAA,SAAA,CAAA,KAAA,GAAV,UAAgB,KAAhB,EAAwB;AACtB,QAAI,KAAK,SAAT,EAAoB;AAClB,UAAI,KAAK,SAAT,EAAoB;AAClB,aAAK,iBAAL,GAAyB,IAAzB;AACA,aAAK,cAAL,GAAsB,KAAtB;AACD;AACF,KALD,MAKO;AACL,UAAM,QAAQ,GAAG,KAAK,mBAAL,CAAyB,KAAzB,CAAjB;;AACA,UAAI,QAAJ,EAAc;AACZ,aAAK,GAAL,CAAS,KAAK,SAAL,GAAiB,mBAAA,CAAA,iBAAA,CAAkB,IAAlB,EAAwB,QAAxB,CAA1B;AACD;;AACD,UAAI,KAAK,QAAT,EAAmB;AACjB,aAAK,WAAL,CAAiB,IAAjB,CAAsB,KAAtB;;AACA,YAAI,KAAK,SAAT,EAAoB;AAClB,eAAK,iBAAL,GAAyB,IAAzB;AACA,eAAK,cAAL,GAAsB,KAAtB;AACD;AACF;AACF;AACF,GAnBS;;AAqBF,EAAA,kBAAA,CAAA,SAAA,CAAA,mBAAA,GAAR,UAA4B,KAA5B,EAAoC;AAClC,QAAI;AACF,aAAO,KAAK,gBAAL,CAAsB,KAAtB,CAAP;AACA,KAFF,CAEE,OAAO,GAAP,EAAY;AACZ,WAAK,WAAL,CAAiB,KAAjB,CAAuB,GAAvB;AACA,aAAO,IAAP;AACD;AACF,GAPO;AASR;;;AAAqC,EAAA,kBAAA,CAAA,SAAA,CAAA,YAAA,GAAA,YAAA;AACnC,QAAA,EAAA,GAAA,IAAA;AAAA,QAAQ,SAAA,GAAA,EAAA,CAAA,SAAR;AAAA,QAAmB,cAAA,GAAA,EAAA,CAAA,cAAnB;AAAA,QAAmC,iBAAA,GAAA,EAAA,CAAA,iBAAnC;AAAA,QAAsD,SAAA,GAAA,EAAA,CAAA,SAAtD;;AAEA,SAAK,cAAL,GAAsB,IAAtB;AACA,SAAK,iBAAL,GAAyB,KAAzB;;AAEA,QAAI,SAAJ,EAAe;AACb,WAAK,MAAL,CAAY,SAAZ;AACA,WAAK,SAAL,GAAiB,IAAjB;AACA,MAAA,SAAS,CAAC,WAAV;AACD;AACF,GAXoC;;AAa7B,EAAA,kBAAA,CAAA,SAAA,CAAA,aAAA,GAAR,YAAA;AACE,QAAA,EAAA,GAAA,IAAA;AAAA,QAAQ,WAAA,GAAA,EAAA,CAAA,WAAR;AAAA,QAAqB,SAAA,GAAA,EAAA,CAAA,SAArB;AAAA,QAAgC,SAAA,GAAA,EAAA,CAAA,SAAhC;AAAA,QAA2C,cAAA,GAAA,EAAA,CAAA,cAA3C;AAAA,QAA2D,iBAAA,GAAA,EAAA,CAAA,iBAA3D;;AACA,QAAI,SAAS,IAAI,SAAb,IAA0B,iBAA9B,EAAiD;AAC/C,MAAA,WAAW,CAAC,IAAZ,CAAiB,cAAjB;AACA,WAAK,cAAL,GAAsB,IAAtB;AACA,WAAK,iBAAL,GAAyB,KAAzB;AACD;AACF,GAPO;;AASR,EAAA,kBAAA,CAAA,SAAA,CAAA,UAAA,GAAA,UAAW,UAAX,EAA0B,UAA1B,EACW,UADX,EAC+B,UAD/B,EAEW,QAFX,EAE0C;AACxC,SAAK,aAAL;;AACA,SAAK,YAAL;AACD,GALD;;AAOA,EAAA,kBAAA,CAAA,SAAA,CAAA,cAAA,GAAA,YAAA;AACE,SAAK,aAAL;;AACA,SAAK,YAAL;AACD,GAHD;;AAIF,SAAA,kBAAA;AAAC,CA3ED,CAAuC,iBAAA,CAAA,eAAvC,CAAA","sourcesContent":["import { Operator } from '../Operator';\nimport { Observable, SubscribableOrPromise } from '../Observable';\nimport { Subscriber } from '../Subscriber';\nimport { Subscription, TeardownLogic } from '../Subscription';\n\nimport { OuterSubscriber } from '../OuterSubscriber';\nimport { InnerSubscriber } from '../InnerSubscriber';\nimport { subscribeToResult } from '../util/subscribeToResult';\n\nimport { MonoTypeOperatorFunction } from '../interfaces';\n\nexport interface ThrottleConfig {\n  leading?: boolean;\n  trailing?: boolean;\n}\n\nexport const defaultThrottleConfig: ThrottleConfig = {\n  leading: true,\n  trailing: false\n};\n\n/**\n * Emits a value from the source Observable, then ignores subsequent source\n * values for a duration determined by another Observable, then repeats this\n * process.\n *\n * <span class=\"informal\">It's like {@link throttleTime}, but the silencing\n * duration is determined by a second Observable.</span>\n *\n * <img src=\"./img/throttle.png\" width=\"100%\">\n *\n * `throttle` emits the source Observable values on the output Observable\n * when its internal timer is disabled, and ignores source values when the timer\n * is enabled. Initially, the timer is disabled. As soon as the first source\n * value arrives, it is forwarded to the output Observable, and then the timer\n * is enabled by calling the `durationSelector` function with the source value,\n * which returns the \"duration\" Observable. When the duration Observable emits a\n * value or completes, the timer is disabled, and this process repeats for the\n * next source value.\n *\n * @example <caption>Emit clicks at a rate of at most one click per second</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = clicks.throttle(ev => Rx.Observable.interval(1000));\n * result.subscribe(x => console.log(x));\n *\n * @see {@link audit}\n * @see {@link debounce}\n * @see {@link delayWhen}\n * @see {@link sample}\n * @see {@link throttleTime}\n *\n * @param {function(value: T): SubscribableOrPromise} durationSelector A function\n * that receives a value from the source Observable, for computing the silencing\n * duration for each source value, returned as an Observable or a Promise.\n * @param {Object} config a configuration object to define `leading` and `trailing` behavior. Defaults\n * to `{ leading: true, trailing: false }`.\n * @return {Observable<T>} An Observable that performs the throttle operation to\n * limit the rate of emissions from the source.\n * @method throttle\n * @owner Observable\n */\nexport function throttle<T>(durationSelector: (value: T) => SubscribableOrPromise<number>,\n                            config: ThrottleConfig = defaultThrottleConfig): MonoTypeOperatorFunction<T> {\n  return (source: Observable<T>) => source.lift(new ThrottleOperator(durationSelector, config.leading, config.trailing));\n}\n\nclass ThrottleOperator<T> implements Operator<T, T> {\n  constructor(private durationSelector: (value: T) => SubscribableOrPromise<number>,\n              private leading: boolean,\n              private trailing: boolean) {\n  }\n\n  call(subscriber: Subscriber<T>, source: any): TeardownLogic {\n    return source.subscribe(\n      new ThrottleSubscriber(subscriber, this.durationSelector, this.leading, this.trailing)\n    );\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc\n * @ignore\n * @extends {Ignored}\n */\nclass ThrottleSubscriber<T, R> extends OuterSubscriber<T, R> {\n  private throttled: Subscription;\n  private _trailingValue: T;\n  private _hasTrailingValue = false;\n\n  constructor(protected destination: Subscriber<T>,\n              private durationSelector: (value: T) => SubscribableOrPromise<number>,\n              private _leading: boolean,\n              private _trailing: boolean) {\n    super(destination);\n  }\n\n  protected _next(value: T): void {\n    if (this.throttled) {\n      if (this._trailing) {\n        this._hasTrailingValue = true;\n        this._trailingValue = value;\n      }\n    } else {\n      const duration = this.tryDurationSelector(value);\n      if (duration) {\n        this.add(this.throttled = subscribeToResult(this, duration));\n      }\n      if (this._leading) {\n        this.destination.next(value);\n        if (this._trailing) {\n          this._hasTrailingValue = true;\n          this._trailingValue = value;\n        }\n      }\n    }\n  }\n\n  private tryDurationSelector(value: T): SubscribableOrPromise<any> {\n    try {\n      return this.durationSelector(value);\n    } catch (err) {\n      this.destination.error(err);\n      return null;\n    }\n  }\n\n  /** @deprecated internal use only */ _unsubscribe() {\n    const { throttled, _trailingValue, _hasTrailingValue, _trailing } = this;\n\n    this._trailingValue = null;\n    this._hasTrailingValue = false;\n\n    if (throttled) {\n      this.remove(throttled);\n      this.throttled = null;\n      throttled.unsubscribe();\n    }\n  }\n\n  private _sendTrailing() {\n    const { destination, throttled, _trailing, _trailingValue, _hasTrailingValue } = this;\n    if (throttled && _trailing && _hasTrailingValue) {\n      destination.next(_trailingValue);\n      this._trailingValue = null;\n      this._hasTrailingValue = false;\n    }\n  }\n\n  notifyNext(outerValue: T, innerValue: R,\n             outerIndex: number, innerIndex: number,\n             innerSub: InnerSubscriber<T, R>): void {\n    this._sendTrailing();\n    this._unsubscribe();\n  }\n\n  notifyComplete(): void {\n    this._sendTrailing();\n    this._unsubscribe();\n  }\n}\n"],"sourceRoot":""},"metadata":{},"sourceType":"script"}