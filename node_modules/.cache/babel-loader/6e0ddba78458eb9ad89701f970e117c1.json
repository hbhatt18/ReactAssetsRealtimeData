{"ast":null,"code":"\"use strict\";\n\nvar publishReplay_1 = require('../operators/publishReplay');\n/* tslint:enable:max-line-length */\n\n/**\n * @param bufferSize\n * @param windowTime\n * @param selectorOrScheduler\n * @param scheduler\n * @return {Observable<T> | ConnectableObservable<T>}\n * @method publishReplay\n * @owner Observable\n */\n\n\nfunction publishReplay(bufferSize, windowTime, selectorOrScheduler, scheduler) {\n  return publishReplay_1.publishReplay(bufferSize, windowTime, selectorOrScheduler, scheduler)(this);\n}\n\nexports.publishReplay = publishReplay;","map":{"version":3,"sources":["../../src/operator/publishReplay.ts"],"names":[],"mappings":";;AAGA,IAAA,eAAA,GAAA,OAAA,CAA6C,4BAA7C,CAAA;AAOA;;AAEA;;;;;;;;;;;AASA,SAAA,aAAA,CAAyD,UAAzD,EACoC,UADpC,EAEoC,mBAFpC,EAGoC,SAHpC,EAG0D;AAExD,SAAO,eAAA,CAAA,aAAA,CAAkB,UAAlB,EAA8B,UAA9B,EAA0C,mBAA1C,EAAsE,SAAtE,EAAiF,IAAjF,CAAP;AACD;;AANe,OAAA,CAAA,aAAA,GAAa,aAAb","sourcesContent":["import { Observable } from '../Observable';\nimport { IScheduler } from '../Scheduler';\nimport { ConnectableObservable } from '../observable/ConnectableObservable';\nimport { publishReplay as higherOrder } from '../operators/publishReplay';\nimport { OperatorFunction, MonoTypeOperatorFunction } from '../interfaces';\n\n/* tslint:disable:max-line-length */\nexport function publishReplay<T>(this: Observable<T>, bufferSize?: number, windowTime?: number, scheduler?: IScheduler): ConnectableObservable<T>;\nexport function publishReplay<T>(this: Observable<T>, bufferSize?: number, windowTime?: number, selector?: MonoTypeOperatorFunction<T>, scheduler?: IScheduler): Observable<T>;\nexport function publishReplay<T, R>(this: Observable<T>, bufferSize?: number, windowTime?: number, selector?: OperatorFunction<T, R>): Observable<R>;\n/* tslint:enable:max-line-length */\n\n/**\n * @param bufferSize\n * @param windowTime\n * @param selectorOrScheduler\n * @param scheduler\n * @return {Observable<T> | ConnectableObservable<T>}\n * @method publishReplay\n * @owner Observable\n */\nexport function publishReplay<T, R>(this: Observable<T>, bufferSize?: number,\n                                    windowTime?: number,\n                                    selectorOrScheduler?: IScheduler | OperatorFunction<T, R>,\n                                    scheduler?: IScheduler): Observable<R> | ConnectableObservable<R> {\n\n  return higherOrder<T, R>(bufferSize, windowTime, selectorOrScheduler as any, scheduler)(this);\n}\n"],"sourceRoot":""},"metadata":{},"sourceType":"script"}