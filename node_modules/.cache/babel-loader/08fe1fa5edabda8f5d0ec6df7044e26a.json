{"ast":null,"code":"\"use strict\";\n\nvar ignoreElements_1 = require('../operators/ignoreElements');\n/**\n * Ignores all items emitted by the source Observable and only passes calls of `complete` or `error`.\n *\n * <img src=\"./img/ignoreElements.png\" width=\"100%\">\n *\n * @return {Observable} An empty Observable that only calls `complete`\n * or `error`, based on which one is called by the source Observable.\n * @method ignoreElements\n * @owner Observable\n */\n\n\nfunction ignoreElements() {\n  return ignoreElements_1.ignoreElements()(this);\n}\n\nexports.ignoreElements = ignoreElements;\n;","map":{"version":3,"sources":["../../src/operator/ignoreElements.ts"],"names":[],"mappings":";;AACA,IAAA,gBAAA,GAAA,OAAA,CAA8C,6BAA9C,CAAA;AAEA;;;;;;;;;;;;AAUA,SAAA,cAAA,GAAA;AACE,SAAO,gBAAA,CAAA,cAAA,GAAc,IAAd,CAAP;AACD;;AAFe,OAAA,CAAA,cAAA,GAAc,cAAd;AAEf","sourcesContent":["import { Observable } from '../Observable';\nimport { ignoreElements as higherOrder } from '../operators/ignoreElements';\n\n/**\n * Ignores all items emitted by the source Observable and only passes calls of `complete` or `error`.\n *\n * <img src=\"./img/ignoreElements.png\" width=\"100%\">\n *\n * @return {Observable} An empty Observable that only calls `complete`\n * or `error`, based on which one is called by the source Observable.\n * @method ignoreElements\n * @owner Observable\n */\nexport function ignoreElements<T>(this: Observable<T>): Observable<T> {\n  return higherOrder()(this) as Observable<T>;\n};\n"],"sourceRoot":""},"metadata":{},"sourceType":"script"}