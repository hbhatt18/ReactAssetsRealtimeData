{"ast":null,"code":"\"use strict\";\n\nvar shareReplay_1 = require('../operators/shareReplay');\n/**\n * @method shareReplay\n * @owner Observable\n */\n\n\nfunction shareReplay(bufferSize, windowTime, scheduler) {\n  return shareReplay_1.shareReplay(bufferSize, windowTime, scheduler)(this);\n}\n\nexports.shareReplay = shareReplay;\n;","map":{"version":3,"sources":["../../src/operator/shareReplay.ts"],"names":[],"mappings":";;AAEA,IAAA,aAAA,GAAA,OAAA,CAA2C,0BAA3C,CAAA;AAEA;;;;;;AAIA,SAAA,WAAA,CAAoD,UAApD,EAAyE,UAAzE,EAA8F,SAA9F,EAAoH;AAElH,SAAO,aAAA,CAAA,WAAA,CAAY,UAAZ,EAAwB,UAAxB,EAAoC,SAApC,EAA+C,IAA/C,CAAP;AACD;;AAHe,OAAA,CAAA,WAAA,GAAW,WAAX;AAGf","sourcesContent":["import { Observable } from '../Observable';\nimport { IScheduler } from '../Scheduler';\nimport { shareReplay as higherOrder } from '../operators/shareReplay';\n\n/**\n * @method shareReplay\n * @owner Observable\n */\nexport function shareReplay<T>(this: Observable<T>, bufferSize?: number, windowTime?: number, scheduler?: IScheduler):\n  Observable<T> {\n  return higherOrder(bufferSize, windowTime, scheduler)(this) as Observable<T>;\n};"],"sourceRoot":""},"metadata":{},"sourceType":"script"}