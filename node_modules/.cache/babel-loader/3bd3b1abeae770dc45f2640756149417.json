{"ast":null,"code":"\"use strict\";\n\nvar root_1 = require('./root');\n\nfunction minimalSetImpl() {\n  // THIS IS NOT a full impl of Set, this is just the minimum\n  // bits of functionality we need for this library.\n  return function () {\n    function MinimalSet() {\n      this._values = [];\n    }\n\n    MinimalSet.prototype.add = function (value) {\n      if (!this.has(value)) {\n        this._values.push(value);\n      }\n    };\n\n    MinimalSet.prototype.has = function (value) {\n      return this._values.indexOf(value) !== -1;\n    };\n\n    Object.defineProperty(MinimalSet.prototype, \"size\", {\n      get: function () {\n        return this._values.length;\n      },\n      enumerable: true,\n      configurable: true\n    });\n\n    MinimalSet.prototype.clear = function () {\n      this._values.length = 0;\n    };\n\n    return MinimalSet;\n  }();\n}\n\nexports.minimalSetImpl = minimalSetImpl;\nexports.Set = root_1.root.Set || minimalSetImpl();","map":{"version":3,"sources":["../../src/util/Set.ts"],"names":[],"mappings":";;AAAA,IAAA,MAAA,GAAA,OAAA,CAAqB,QAArB,CAAA;;AAaA,SAAA,cAAA,GAAA;AACE;AACA;AACA,SAAO,YAAA;AAAA,aAAA,UAAA,GAAA;AACG,WAAA,OAAA,GAAe,EAAf;AAmBT;;AAjBC,IAAA,UAAA,CAAA,SAAA,CAAA,GAAA,GAAA,UAAI,KAAJ,EAAY;AACV,UAAI,CAAC,KAAK,GAAL,CAAS,KAAT,CAAL,EAAsB;AACpB,aAAK,OAAL,CAAa,IAAb,CAAkB,KAAlB;AACD;AACF,KAJD;;AAMA,IAAA,UAAA,CAAA,SAAA,CAAA,GAAA,GAAA,UAAI,KAAJ,EAAY;AACV,aAAO,KAAK,OAAL,CAAa,OAAb,CAAqB,KAArB,MAAgC,CAAC,CAAxC;AACD,KAFD;;AAIA,IAAA,MAAA,CAAA,cAAA,CAAI,UAAA,CAAA,SAAJ,EAAI,MAAJ,EAAQ;WAAR,YAAA;AACE,eAAO,KAAK,OAAL,CAAa,MAApB;AACD,OAFO;sBAAA;;AAAA,KAAR;;AAIA,IAAA,UAAA,CAAA,SAAA,CAAA,KAAA,GAAA,YAAA;AACE,WAAK,OAAL,CAAa,MAAb,GAAsB,CAAtB;AACD,KAFD;;AAGF,WAAA,UAAA;AAAC,GApBM,EAAP;AAqBD;;AAxBe,OAAA,CAAA,cAAA,GAAc,cAAd;AA0BH,OAAA,CAAA,GAAA,GAAgB,MAAA,CAAA,IAAA,CAAK,GAAL,IAAY,cAAc,EAA1C","sourcesContent":["import { root } from './root';\n\nexport interface ISetCtor {\n  new<T>(): ISet<T>;\n}\n\nexport interface ISet<T> {\n  add(value: T): void;\n  has(value: T): boolean;\n  size: number;\n  clear(): void;\n}\n\nexport function minimalSetImpl<T>(): ISetCtor {\n  // THIS IS NOT a full impl of Set, this is just the minimum\n  // bits of functionality we need for this library.\n  return class MinimalSet<T> implements ISet<T> {\n    private _values: T[] = [];\n\n    add(value: T): void {\n      if (!this.has(value)) {\n        this._values.push(value);\n      }\n    }\n\n    has(value: T): boolean {\n      return this._values.indexOf(value) !== -1;\n    }\n\n    get size(): number {\n      return this._values.length;\n    }\n\n    clear(): void {\n      this._values.length = 0;\n    }\n  };\n}\n\nexport const Set: ISetCtor = root.Set || minimalSetImpl();"],"sourceRoot":""},"metadata":{},"sourceType":"script"}