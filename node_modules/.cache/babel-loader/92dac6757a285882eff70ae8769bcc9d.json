{"ast":null,"code":"\"use strict\";\n\nvar reduce_1 = require('./reduce');\n\nfunction toArrayReducer(arr, item, index) {\n  if (index === 0) {\n    return [item];\n  }\n\n  arr.push(item);\n  return arr;\n}\n\nfunction toArray() {\n  return reduce_1.reduce(toArrayReducer, []);\n}\n\nexports.toArray = toArray;","map":{"version":3,"sources":["../../src/operators/toArray.ts"],"names":[],"mappings":";;AAAA,IAAA,QAAA,GAAA,OAAA,CAAuB,UAAvB,CAAA;;AAGA,SAAA,cAAA,CAA2B,GAA3B,EAAqC,IAArC,EAA8C,KAA9C,EAA2D;AACzD,MAAI,KAAK,KAAK,CAAd,EAAiB;AACf,WAAO,CAAC,IAAD,CAAP;AACD;;AACD,EAAA,GAAG,CAAC,IAAJ,CAAS,IAAT;AACA,SAAO,GAAP;AACD;;AAED,SAAA,OAAA,GAAA;AACE,SAAO,QAAA,CAAA,MAAA,CAAO,cAAP,EAAuB,EAAvB,CAAP;AACD;;AAFe,OAAA,CAAA,OAAA,GAAO,OAAP","sourcesContent":["import { reduce } from './reduce';\nimport { OperatorFunction } from '../interfaces';\n\nfunction toArrayReducer<T>(arr: T[], item: T, index: number) {\n  if (index === 0) {\n    return [item];\n  }\n  arr.push(item);\n  return arr;\n}\n\nexport function toArray<T>(): OperatorFunction<T, T[]> {\n  return reduce(toArrayReducer, []) as OperatorFunction<T, T[]>;\n}\n"],"sourceRoot":""},"metadata":{},"sourceType":"script"}