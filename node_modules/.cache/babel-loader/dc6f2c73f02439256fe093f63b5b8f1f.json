{"ast":null,"code":"\"use strict\";\n\nvar finalize_1 = require('../operators/finalize');\n/**\n * Returns an Observable that mirrors the source Observable, but will call a specified function when\n * the source terminates on complete or error.\n * @param {function} callback Function to be called when source terminates.\n * @return {Observable} An Observable that mirrors the source, but will call the specified function on termination.\n * @method finally\n * @owner Observable\n */\n\n\nfunction _finally(callback) {\n  return finalize_1.finalize(callback)(this);\n}\n\nexports._finally = _finally;","map":{"version":3,"sources":["../../src/operator/finally.ts"],"names":[],"mappings":";;AAEA,IAAA,UAAA,GAAA,OAAA,CAAyB,uBAAzB,CAAA;AAEA;;;;;;;;;;AAQA,SAAA,QAAA,CAAiD,QAAjD,EAAqE;AACnE,SAAO,UAAA,CAAA,QAAA,CAAS,QAAT,EAAmB,IAAnB,CAAP;AACD;;AAFe,OAAA,CAAA,QAAA,GAAQ,QAAR","sourcesContent":["\nimport { Observable } from '../Observable';\nimport { finalize } from '../operators/finalize';\n\n/**\n * Returns an Observable that mirrors the source Observable, but will call a specified function when\n * the source terminates on complete or error.\n * @param {function} callback Function to be called when source terminates.\n * @return {Observable} An Observable that mirrors the source, but will call the specified function on termination.\n * @method finally\n * @owner Observable\n */\nexport function _finally<T>(this: Observable<T>, callback: () => void): Observable<T> {\n  return finalize(callback)(this) as Observable<T>;\n}\n"],"sourceRoot":""},"metadata":{},"sourceType":"script"}