{"ast":null,"code":"\"use strict\";\n\nvar __extends = this && this.__extends || function (d, b) {\n  for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n\n  function __() {\n    this.constructor = d;\n  }\n\n  d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\n\nvar Subject_1 = require('./Subject');\n\nvar Subscription_1 = require('./Subscription');\n/**\n * @class AsyncSubject<T>\n */\n\n\nvar AsyncSubject = function (_super) {\n  __extends(AsyncSubject, _super);\n\n  function AsyncSubject() {\n    _super.apply(this, arguments);\n\n    this.value = null;\n    this.hasNext = false;\n    this.hasCompleted = false;\n  }\n  /** @deprecated internal use only */\n\n\n  AsyncSubject.prototype._subscribe = function (subscriber) {\n    if (this.hasError) {\n      subscriber.error(this.thrownError);\n      return Subscription_1.Subscription.EMPTY;\n    } else if (this.hasCompleted && this.hasNext) {\n      subscriber.next(this.value);\n      subscriber.complete();\n      return Subscription_1.Subscription.EMPTY;\n    }\n\n    return _super.prototype._subscribe.call(this, subscriber);\n  };\n\n  AsyncSubject.prototype.next = function (value) {\n    if (!this.hasCompleted) {\n      this.value = value;\n      this.hasNext = true;\n    }\n  };\n\n  AsyncSubject.prototype.error = function (error) {\n    if (!this.hasCompleted) {\n      _super.prototype.error.call(this, error);\n    }\n  };\n\n  AsyncSubject.prototype.complete = function () {\n    this.hasCompleted = true;\n\n    if (this.hasNext) {\n      _super.prototype.next.call(this, this.value);\n    }\n\n    _super.prototype.complete.call(this);\n  };\n\n  return AsyncSubject;\n}(Subject_1.Subject);\n\nexports.AsyncSubject = AsyncSubject;","map":{"version":3,"sources":["../src/AsyncSubject.ts"],"names":[],"mappings":";;;;;;;;;;;;AAAA,IAAA,SAAA,GAAA,OAAA,CAAwB,WAAxB,CAAA;;AAEA,IAAA,cAAA,GAAA,OAAA,CAA6B,gBAA7B,CAAA;AAEA;;;;;AAGA,IAAA,YAAA,GAAA,UAAA,MAAA,EAAA;AAAqC,EAAA,SAAA,CAAA,YAAA,EAAA,MAAA,CAAA;;AAArC,WAAA,YAAA,GAAA;AAAqC,IAAA,MAAA,CAAA,KAAA,CAAA,IAAA,EAAA,SAAA;;AAC3B,SAAA,KAAA,GAAW,IAAX;AACA,SAAA,OAAA,GAAmB,KAAnB;AACA,SAAA,YAAA,GAAwB,KAAxB;AAkCT;AAhCC;;;AAAqC,EAAA,YAAA,CAAA,SAAA,CAAA,UAAA,GAAA,UAAW,UAAX,EAAsC;AACzE,QAAI,KAAK,QAAT,EAAmB;AACjB,MAAA,UAAU,CAAC,KAAX,CAAiB,KAAK,WAAtB;AACA,aAAO,cAAA,CAAA,YAAA,CAAa,KAApB;AACD,KAHD,MAGO,IAAI,KAAK,YAAL,IAAqB,KAAK,OAA9B,EAAuC;AAC5C,MAAA,UAAU,CAAC,IAAX,CAAgB,KAAK,KAArB;AACA,MAAA,UAAU,CAAC,QAAX;AACA,aAAO,cAAA,CAAA,YAAA,CAAa,KAApB;AACD;;AACD,WAAO,MAAA,CAAA,SAAA,CAAM,UAAN,CAAgB,IAAhB,CAAgB,IAAhB,EAAiB,UAAjB,CAAP;AACD,GAVoC;;AAYrC,EAAA,YAAA,CAAA,SAAA,CAAA,IAAA,GAAA,UAAK,KAAL,EAAa;AACX,QAAI,CAAC,KAAK,YAAV,EAAwB;AACtB,WAAK,KAAL,GAAa,KAAb;AACA,WAAK,OAAL,GAAe,IAAf;AACD;AACF,GALD;;AAOA,EAAA,YAAA,CAAA,SAAA,CAAA,KAAA,GAAA,UAAM,KAAN,EAAgB;AACd,QAAI,CAAC,KAAK,YAAV,EAAwB;AACtB,MAAA,MAAA,CAAA,SAAA,CAAM,KAAN,CAAW,IAAX,CAAW,IAAX,EAAY,KAAZ;AACD;AACF,GAJD;;AAMA,EAAA,YAAA,CAAA,SAAA,CAAA,QAAA,GAAA,YAAA;AACE,SAAK,YAAL,GAAoB,IAApB;;AACA,QAAI,KAAK,OAAT,EAAkB;AAChB,MAAA,MAAA,CAAA,SAAA,CAAM,IAAN,CAAU,IAAV,CAAU,IAAV,EAAW,KAAK,KAAhB;AACD;;AACD,IAAA,MAAA,CAAA,SAAA,CAAM,QAAN,CAAc,IAAd,CAAc,IAAd;AACD,GAND;;AAOF,SAAA,YAAA;AAAC,CArCD,CAAqC,SAAA,CAAA,OAArC,CAAA;;AAAa,OAAA,CAAA,YAAA,GAAY,YAAZ","sourcesContent":["import { Subject } from './Subject';\nimport { Subscriber } from './Subscriber';\nimport { Subscription } from './Subscription';\n\n/**\n * @class AsyncSubject<T>\n */\nexport class AsyncSubject<T> extends Subject<T> {\n  private value: T = null;\n  private hasNext: boolean = false;\n  private hasCompleted: boolean = false;\n\n  /** @deprecated internal use only */ _subscribe(subscriber: Subscriber<any>): Subscription {\n    if (this.hasError) {\n      subscriber.error(this.thrownError);\n      return Subscription.EMPTY;\n    } else if (this.hasCompleted && this.hasNext) {\n      subscriber.next(this.value);\n      subscriber.complete();\n      return Subscription.EMPTY;\n    }\n    return super._subscribe(subscriber);\n  }\n\n  next(value: T): void {\n    if (!this.hasCompleted) {\n      this.value = value;\n      this.hasNext = true;\n    }\n  }\n\n  error(error: any): void {\n    if (!this.hasCompleted) {\n      super.error(error);\n    }\n  }\n\n  complete(): void {\n    this.hasCompleted = true;\n    if (this.hasNext) {\n      super.next(this.value);\n    }\n    super.complete();\n  }\n}\n"],"sourceRoot":""},"metadata":{},"sourceType":"script"}