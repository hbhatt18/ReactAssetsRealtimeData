{"ast":null,"code":"\"use strict\";\n\nvar __extends = this && this.__extends || function (d, b) {\n  for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n\n  function __() {\n    this.constructor = d;\n  }\n\n  d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\n\nvar Subscriber_1 = require('../Subscriber');\n\nvar Subscription_1 = require('../Subscription');\n/**\n * Returns an Observable that mirrors the source Observable, but will call a specified function when\n * the source terminates on complete or error.\n * @param {function} callback Function to be called when source terminates.\n * @return {Observable} An Observable that mirrors the source, but will call the specified function on termination.\n * @method finally\n * @owner Observable\n */\n\n\nfunction finalize(callback) {\n  return function (source) {\n    return source.lift(new FinallyOperator(callback));\n  };\n}\n\nexports.finalize = finalize;\n\nvar FinallyOperator = function () {\n  function FinallyOperator(callback) {\n    this.callback = callback;\n  }\n\n  FinallyOperator.prototype.call = function (subscriber, source) {\n    return source.subscribe(new FinallySubscriber(subscriber, this.callback));\n  };\n\n  return FinallyOperator;\n}();\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\n\n\nvar FinallySubscriber = function (_super) {\n  __extends(FinallySubscriber, _super);\n\n  function FinallySubscriber(destination, callback) {\n    _super.call(this, destination);\n\n    this.add(new Subscription_1.Subscription(callback));\n  }\n\n  return FinallySubscriber;\n}(Subscriber_1.Subscriber);","map":{"version":3,"sources":["../../src/operators/finalize.ts"],"names":[],"mappings":";;;;;;;;;;;;AACA,IAAA,YAAA,GAAA,OAAA,CAA2B,eAA3B,CAAA;;AACA,IAAA,cAAA,GAAA,OAAA,CAA4C,iBAA5C,CAAA;AAIA;;;;;;;;;;AAQA,SAAA,QAAA,CAA4B,QAA5B,EAAgD;AAC9C,SAAO,UAAC,MAAD,EAAsB;AAAK,WAAA,MAAM,CAAC,IAAP,CAAY,IAAI,eAAJ,CAAZ,QAAY,CAAZ,CAAA;AAA0C,GAA5E;AACD;;AAFe,OAAA,CAAA,QAAA,GAAQ,QAAR;;AAIhB,IAAA,eAAA,GAAA,YAAA;AACE,WAAA,eAAA,CAAoB,QAApB,EAAwC;AAApB,SAAA,QAAA,GAAA,QAAA;AACnB;;AAED,EAAA,eAAA,CAAA,SAAA,CAAA,IAAA,GAAA,UAAK,UAAL,EAAgC,MAAhC,EAA2C;AACzC,WAAO,MAAM,CAAC,SAAP,CAAiB,IAAI,iBAAJ,CAAsB,UAAtB,EAAkC,KAAK,QAAvC,CAAjB,CAAP;AACD,GAFD;;AAGF,SAAA,eAAA;AAAC,CAPD,EAAA;AASA;;;;;;;AAKA,IAAA,iBAAA,GAAA,UAAA,MAAA,EAAA;AAAmC,EAAA,SAAA,CAAA,iBAAA,EAAA,MAAA,CAAA;;AACjC,WAAA,iBAAA,CAAY,WAAZ,EAAwC,QAAxC,EAA4D;AAC1D,IAAA,MAAA,CAAA,IAAA,CAAA,IAAA,EAAM,WAAN;;AACA,SAAK,GAAL,CAAS,IAAI,cAAA,CAAA,YAAJ,CAAiB,QAAjB,CAAT;AACD;;AACH,SAAA,iBAAA;AAAC,CALD,CAAmC,YAAA,CAAA,UAAnC,CAAA","sourcesContent":["import { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { Subscription, TeardownLogic } from '../Subscription';\nimport { Observable } from '../Observable';\nimport { MonoTypeOperatorFunction } from '../interfaces';\n\n/**\n * Returns an Observable that mirrors the source Observable, but will call a specified function when\n * the source terminates on complete or error.\n * @param {function} callback Function to be called when source terminates.\n * @return {Observable} An Observable that mirrors the source, but will call the specified function on termination.\n * @method finally\n * @owner Observable\n */\nexport function finalize<T>(callback: () => void): MonoTypeOperatorFunction<T> {\n  return (source: Observable<T>) => source.lift(new FinallyOperator(callback));\n}\n\nclass FinallyOperator<T> implements Operator<T, T> {\n  constructor(private callback: () => void) {\n  }\n\n  call(subscriber: Subscriber<T>, source: any): TeardownLogic {\n    return source.subscribe(new FinallySubscriber(subscriber, this.callback));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass FinallySubscriber<T> extends Subscriber<T> {\n  constructor(destination: Subscriber<T>, callback: () => void) {\n    super(destination);\n    this.add(new Subscription(callback));\n  }\n}\n"],"sourceRoot":""},"metadata":{},"sourceType":"script"}