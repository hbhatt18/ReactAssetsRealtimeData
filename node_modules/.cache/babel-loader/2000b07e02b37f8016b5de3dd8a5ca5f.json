{"ast":null,"code":"\"use strict\";\n\nvar repeat_1 = require('../operators/repeat');\n/**\n * Returns an Observable that repeats the stream of items emitted by the source Observable at most count times.\n *\n * <img src=\"./img/repeat.png\" width=\"100%\">\n *\n * @param {number} [count] The number of times the source Observable items are repeated, a count of 0 will yield\n * an empty Observable.\n * @return {Observable} An Observable that repeats the stream of items emitted by the source Observable at most\n * count times.\n * @method repeat\n * @owner Observable\n */\n\n\nfunction repeat(count) {\n  if (count === void 0) {\n    count = -1;\n  }\n\n  return repeat_1.repeat(count)(this);\n}\n\nexports.repeat = repeat;","map":{"version":3,"sources":["../../src/operator/repeat.ts"],"names":[],"mappings":";;AAEA,IAAA,QAAA,GAAA,OAAA,CAAsC,qBAAtC,CAAA;AAEA;;;;;;;;;;;;;;AAYA,SAAA,MAAA,CAA+C,KAA/C,EAAiE;AAAlB,MAAA,KAAA,KAAA,KAAA,CAAA,EAAkB;AAAlB,IAAA,KAAA,GAAA,CAAiB,CAAjB;AAAkB;;AAC/D,SAAO,QAAA,CAAA,MAAA,CAAY,KAAZ,EAAmB,IAAnB,CAAP;AACD;;AAFe,OAAA,CAAA,MAAA,GAAM,MAAN","sourcesContent":["\nimport { Observable } from '../Observable';\nimport { repeat as higherOrder } from '../operators/repeat';\n\n/**\n * Returns an Observable that repeats the stream of items emitted by the source Observable at most count times.\n *\n * <img src=\"./img/repeat.png\" width=\"100%\">\n *\n * @param {number} [count] The number of times the source Observable items are repeated, a count of 0 will yield\n * an empty Observable.\n * @return {Observable} An Observable that repeats the stream of items emitted by the source Observable at most\n * count times.\n * @method repeat\n * @owner Observable\n */\nexport function repeat<T>(this: Observable<T>, count: number = -1): Observable<T> {\n  return higherOrder(count)(this) as Observable<T>;\n}\n"],"sourceRoot":""},"metadata":{},"sourceType":"script"}