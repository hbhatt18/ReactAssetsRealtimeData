{"ast":null,"code":"\"use strict\";\n\nvar __extends = this && this.__extends || function (d, b) {\n  for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n\n  function __() {\n    this.constructor = d;\n  }\n\n  d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\n\nvar Subject_1 = require('../Subject');\n\nvar tryCatch_1 = require('../util/tryCatch');\n\nvar errorObject_1 = require('../util/errorObject');\n\nvar OuterSubscriber_1 = require('../OuterSubscriber');\n\nvar subscribeToResult_1 = require('../util/subscribeToResult');\n/**\n * Returns an Observable that mirrors the source Observable with the exception of a `complete`. If the source\n * Observable calls `complete`, this method will emit to the Observable returned from `notifier`. If that Observable\n * calls `complete` or `error`, then this method will call `complete` or `error` on the child subscription. Otherwise\n * this method will resubscribe to the source Observable.\n *\n * <img src=\"./img/repeatWhen.png\" width=\"100%\">\n *\n * @param {function(notifications: Observable): Observable} notifier - Receives an Observable of notifications with\n * which a user can `complete` or `error`, aborting the repetition.\n * @return {Observable} The source Observable modified with repeat logic.\n * @method repeatWhen\n * @owner Observable\n */\n\n\nfunction repeatWhen(notifier) {\n  return function (source) {\n    return source.lift(new RepeatWhenOperator(notifier));\n  };\n}\n\nexports.repeatWhen = repeatWhen;\n\nvar RepeatWhenOperator = function () {\n  function RepeatWhenOperator(notifier) {\n    this.notifier = notifier;\n  }\n\n  RepeatWhenOperator.prototype.call = function (subscriber, source) {\n    return source.subscribe(new RepeatWhenSubscriber(subscriber, this.notifier, source));\n  };\n\n  return RepeatWhenOperator;\n}();\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\n\n\nvar RepeatWhenSubscriber = function (_super) {\n  __extends(RepeatWhenSubscriber, _super);\n\n  function RepeatWhenSubscriber(destination, notifier, source) {\n    _super.call(this, destination);\n\n    this.notifier = notifier;\n    this.source = source;\n    this.sourceIsBeingSubscribedTo = true;\n  }\n\n  RepeatWhenSubscriber.prototype.notifyNext = function (outerValue, innerValue, outerIndex, innerIndex, innerSub) {\n    this.sourceIsBeingSubscribedTo = true;\n    this.source.subscribe(this);\n  };\n\n  RepeatWhenSubscriber.prototype.notifyComplete = function (innerSub) {\n    if (this.sourceIsBeingSubscribedTo === false) {\n      return _super.prototype.complete.call(this);\n    }\n  };\n\n  RepeatWhenSubscriber.prototype.complete = function () {\n    this.sourceIsBeingSubscribedTo = false;\n\n    if (!this.isStopped) {\n      if (!this.retries) {\n        this.subscribeToRetries();\n      }\n\n      if (!this.retriesSubscription || this.retriesSubscription.closed) {\n        return _super.prototype.complete.call(this);\n      }\n\n      this._unsubscribeAndRecycle();\n\n      this.notifications.next();\n    }\n  };\n  /** @deprecated internal use only */\n\n\n  RepeatWhenSubscriber.prototype._unsubscribe = function () {\n    var _a = this,\n        notifications = _a.notifications,\n        retriesSubscription = _a.retriesSubscription;\n\n    if (notifications) {\n      notifications.unsubscribe();\n      this.notifications = null;\n    }\n\n    if (retriesSubscription) {\n      retriesSubscription.unsubscribe();\n      this.retriesSubscription = null;\n    }\n\n    this.retries = null;\n  };\n  /** @deprecated internal use only */\n\n\n  RepeatWhenSubscriber.prototype._unsubscribeAndRecycle = function () {\n    var _a = this,\n        notifications = _a.notifications,\n        retries = _a.retries,\n        retriesSubscription = _a.retriesSubscription;\n\n    this.notifications = null;\n    this.retries = null;\n    this.retriesSubscription = null;\n\n    _super.prototype._unsubscribeAndRecycle.call(this);\n\n    this.notifications = notifications;\n    this.retries = retries;\n    this.retriesSubscription = retriesSubscription;\n    return this;\n  };\n\n  RepeatWhenSubscriber.prototype.subscribeToRetries = function () {\n    this.notifications = new Subject_1.Subject();\n    var retries = tryCatch_1.tryCatch(this.notifier)(this.notifications);\n\n    if (retries === errorObject_1.errorObject) {\n      return _super.prototype.complete.call(this);\n    }\n\n    this.retries = retries;\n    this.retriesSubscription = subscribeToResult_1.subscribeToResult(this, retries);\n  };\n\n  return RepeatWhenSubscriber;\n}(OuterSubscriber_1.OuterSubscriber);","map":{"version":3,"sources":["../../src/operators/repeatWhen.ts"],"names":[],"mappings":"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","sourcesContent":["import { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { Observable } from '../Observable';\nimport { Subject } from '../Subject';\nimport { Subscription, TeardownLogic } from '../Subscription';\nimport { tryCatch } from '../util/tryCatch';\nimport { errorObject } from '../util/errorObject';\n\nimport { OuterSubscriber } from '../OuterSubscriber';\nimport { InnerSubscriber } from '../InnerSubscriber';\nimport { subscribeToResult } from '../util/subscribeToResult';\n\nimport { MonoTypeOperatorFunction } from '../interfaces';\n\n/**\n * Returns an Observable that mirrors the source Observable with the exception of a `complete`. If the source\n * Observable calls `complete`, this method will emit to the Observable returned from `notifier`. If that Observable\n * calls `complete` or `error`, then this method will call `complete` or `error` on the child subscription. Otherwise\n * this method will resubscribe to the source Observable.\n *\n * <img src=\"./img/repeatWhen.png\" width=\"100%\">\n *\n * @param {function(notifications: Observable): Observable} notifier - Receives an Observable of notifications with\n * which a user can `complete` or `error`, aborting the repetition.\n * @return {Observable} The source Observable modified with repeat logic.\n * @method repeatWhen\n * @owner Observable\n */\nexport function repeatWhen<T>(notifier: (notifications: Observable<any>) => Observable<any>): MonoTypeOperatorFunction<T> {\n  return (source: Observable<T>) => source.lift(new RepeatWhenOperator(notifier));\n}\n\nclass RepeatWhenOperator<T> implements Operator<T, T> {\n  constructor(protected notifier: (notifications: Observable<any>) => Observable<any>) {\n  }\n\n  call(subscriber: Subscriber<T>, source: any): TeardownLogic {\n    return source.subscribe(new RepeatWhenSubscriber(subscriber, this.notifier, source));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass RepeatWhenSubscriber<T, R> extends OuterSubscriber<T, R> {\n\n  private notifications: Subject<any>;\n  private retries: Observable<any>;\n  private retriesSubscription: Subscription;\n  private sourceIsBeingSubscribedTo: boolean = true;\n\n  constructor(destination: Subscriber<R>,\n              private notifier: (notifications: Observable<any>) => Observable<any>,\n              private source: Observable<T>) {\n    super(destination);\n  }\n\n  notifyNext(outerValue: T, innerValue: R,\n             outerIndex: number, innerIndex: number,\n             innerSub: InnerSubscriber<T, R>): void {\n    this.sourceIsBeingSubscribedTo = true;\n    this.source.subscribe(this);\n  }\n\n  notifyComplete(innerSub: InnerSubscriber<T, R>): void {\n    if (this.sourceIsBeingSubscribedTo === false) {\n      return super.complete();\n    }\n  }\n\n  complete() {\n    this.sourceIsBeingSubscribedTo = false;\n\n    if (!this.isStopped) {\n      if (!this.retries) {\n        this.subscribeToRetries();\n      }\n      if (!this.retriesSubscription || this.retriesSubscription.closed) {\n        return super.complete();\n      }\n\n      this._unsubscribeAndRecycle();\n      this.notifications.next();\n    }\n  }\n\n  /** @deprecated internal use only */ _unsubscribe() {\n    const { notifications, retriesSubscription } = this;\n    if (notifications) {\n      notifications.unsubscribe();\n      this.notifications = null;\n    }\n    if (retriesSubscription) {\n      retriesSubscription.unsubscribe();\n      this.retriesSubscription = null;\n    }\n    this.retries = null;\n  }\n\n  /** @deprecated internal use only */ _unsubscribeAndRecycle(): Subscriber<T> {\n    const { notifications, retries, retriesSubscription } = this;\n    this.notifications = null;\n    this.retries = null;\n    this.retriesSubscription = null;\n    super._unsubscribeAndRecycle();\n    this.notifications = notifications;\n    this.retries = retries;\n    this.retriesSubscription = retriesSubscription;\n    return this;\n  }\n\n  private subscribeToRetries() {\n    this.notifications = new Subject();\n    const retries = tryCatch(this.notifier)(this.notifications);\n    if (retries === errorObject) {\n      return super.complete();\n    }\n    this.retries = retries;\n    this.retriesSubscription = subscribeToResult(this, retries);\n  }\n}\n"],"sourceRoot":""},"metadata":{},"sourceType":"script"}