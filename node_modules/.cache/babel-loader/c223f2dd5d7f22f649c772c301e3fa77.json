{"ast":null,"code":"\"use strict\";\n\nvar SubscriptionLog_1 = require('./SubscriptionLog');\n\nvar SubscriptionLoggable = function () {\n  function SubscriptionLoggable() {\n    this.subscriptions = [];\n  }\n\n  SubscriptionLoggable.prototype.logSubscribedFrame = function () {\n    this.subscriptions.push(new SubscriptionLog_1.SubscriptionLog(this.scheduler.now()));\n    return this.subscriptions.length - 1;\n  };\n\n  SubscriptionLoggable.prototype.logUnsubscribedFrame = function (index) {\n    var subscriptionLogs = this.subscriptions;\n    var oldSubscriptionLog = subscriptionLogs[index];\n    subscriptionLogs[index] = new SubscriptionLog_1.SubscriptionLog(oldSubscriptionLog.subscribedFrame, this.scheduler.now());\n  };\n\n  return SubscriptionLoggable;\n}();\n\nexports.SubscriptionLoggable = SubscriptionLoggable;","map":{"version":3,"sources":["../../src/testing/SubscriptionLoggable.ts"],"names":[],"mappings":";;AACA,IAAA,iBAAA,GAAA,OAAA,CAAgC,mBAAhC,CAAA;;AAEA,IAAA,oBAAA,GAAA,YAAA;AAAA,WAAA,oBAAA,GAAA;AACS,SAAA,aAAA,GAAmC,EAAnC;AAgBR;;AAbC,EAAA,oBAAA,CAAA,SAAA,CAAA,kBAAA,GAAA,YAAA;AACE,SAAK,aAAL,CAAmB,IAAnB,CAAwB,IAAI,iBAAA,CAAA,eAAJ,CAAoB,KAAK,SAAL,CAAe,GAAf,EAApB,CAAxB;AACA,WAAO,KAAK,aAAL,CAAmB,MAAnB,GAA4B,CAAnC;AACD,GAHD;;AAKA,EAAA,oBAAA,CAAA,SAAA,CAAA,oBAAA,GAAA,UAAqB,KAArB,EAAkC;AAChC,QAAM,gBAAgB,GAAG,KAAK,aAA9B;AACA,QAAM,kBAAkB,GAAG,gBAAgB,CAAC,KAAD,CAA3C;AACA,IAAA,gBAAgB,CAAC,KAAD,CAAhB,GAA0B,IAAI,iBAAA,CAAA,eAAJ,CACxB,kBAAkB,CAAC,eADK,EAExB,KAAK,SAAL,CAAe,GAAf,EAFwB,CAA1B;AAID,GAPD;;AAQF,SAAA,oBAAA;AAAC,CAjBD,EAAA;;AAAa,OAAA,CAAA,oBAAA,GAAoB,oBAApB","sourcesContent":["import { Scheduler } from '../Scheduler';\nimport { SubscriptionLog } from './SubscriptionLog';\n\nexport class SubscriptionLoggable {\n  public subscriptions: SubscriptionLog[] = [];\n  scheduler: Scheduler;\n\n  logSubscribedFrame(): number {\n    this.subscriptions.push(new SubscriptionLog(this.scheduler.now()));\n    return this.subscriptions.length - 1;\n  }\n\n  logUnsubscribedFrame(index: number) {\n    const subscriptionLogs = this.subscriptions;\n    const oldSubscriptionLog = subscriptionLogs[index];\n    subscriptionLogs[index] = new SubscriptionLog(\n      oldSubscriptionLog.subscribedFrame,\n      this.scheduler.now()\n    );\n  }\n}\n"],"sourceRoot":""},"metadata":{},"sourceType":"script"}