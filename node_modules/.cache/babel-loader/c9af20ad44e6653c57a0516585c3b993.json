{"ast":null,"code":"\"use strict\";\n\nvar race_1 = require('../operators/race'); // NOTE: to support backwards compatability with 5.4.* and lower\n\n\nvar race_2 = require('../observable/race');\n\nexports.raceStatic = race_2.race;\n/* tslint:enable:max-line-length */\n\n/**\n * Returns an Observable that mirrors the first source Observable to emit an item\n * from the combination of this Observable and supplied Observables.\n * @param {...Observables} ...observables Sources used to race for which Observable emits first.\n * @return {Observable} An Observable that mirrors the output of the first Observable to emit an item.\n * @method race\n * @owner Observable\n */\n\nfunction race() {\n  var observables = [];\n\n  for (var _i = 0; _i < arguments.length; _i++) {\n    observables[_i - 0] = arguments[_i];\n  }\n\n  return race_1.race.apply(void 0, observables)(this);\n}\n\nexports.race = race;","map":{"version":3,"sources":["../../src/operator/race.ts"],"names":[],"mappings":";;AACA,IAAA,MAAA,GAAA,OAAA,CAAoC,mBAApC,CAAA,C,CAEA;;;AACA,IAAA,MAAA,GAAA,OAAA,CAAmC,oBAAnC,CAAA;;AAAS,OAAA,CAAA,UAAA,GAAA,MAAA,CAAA,IAAA;AAOT;;AAEA;;;;;;;;;AAQA,SAAA,IAAA,GAAA;AAA6C,MAAA,WAAA,GAAA,EAAA;;OAAA,IAAA,EAAA,GAAA,C,EAAA,EAAA,GAAA,SAAA,CAAA,M,EAAA,EAAA,E,EAA2D;AAA3D,IAAA,WAAA,CAAA,EAAA,GAAA,CAAA,CAAA,GAAA,SAAA,CAAA,EAAA,CAAA;;;AAC3C,SAAO,MAAA,CAAA,IAAA,CAAW,KAAX,CAAW,KAAA,CAAX,EAAe,WAAf,EAA4B,IAA5B,CAAP;AACD;;AAFe,OAAA,CAAA,IAAA,GAAI,IAAJ","sourcesContent":["import { Observable } from '../Observable';\nimport { race as higherOrder } from '../operators/race';\n\n// NOTE: to support backwards compatability with 5.4.* and lower\nexport { race as raceStatic } from '../observable/race';\n\n/* tslint:disable:max-line-length */\nexport function race<T>(this: Observable<T>, observables: Array<Observable<T>>): Observable<T>;\nexport function race<T, R>(this: Observable<T>, observables: Array<Observable<T>>): Observable<R>;\nexport function race<T>(this: Observable<T>, ...observables: Array<Observable<T> | Array<Observable<T>>>): Observable<T>;\nexport function race<T, R>(this: Observable<T>, ...observables: Array<Observable<any> | Array<Observable<any>>>): Observable<R>;\n/* tslint:enable:max-line-length */\n\n/**\n * Returns an Observable that mirrors the first source Observable to emit an item\n * from the combination of this Observable and supplied Observables.\n * @param {...Observables} ...observables Sources used to race for which Observable emits first.\n * @return {Observable} An Observable that mirrors the output of the first Observable to emit an item.\n * @method race\n * @owner Observable\n */\nexport function race<T>(this: Observable<T>, ...observables: Array<Observable<T> | Array<Observable<T>>>): Observable<T> {\n  return higherOrder(...observables)(this);\n}\n"],"sourceRoot":""},"metadata":{},"sourceType":"script"}