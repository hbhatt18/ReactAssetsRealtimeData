{"ast":null,"code":"\"use strict\";\n\nvar __extends = this && this.__extends || function (d, b) {\n  for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n\n  function __() {\n    this.constructor = d;\n  }\n\n  d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\n\nvar Subscriber_1 = require('../Subscriber');\n\nvar EmptyObservable_1 = require('../observable/EmptyObservable');\n/**\n * Returns an Observable that repeats the stream of items emitted by the source Observable at most count times.\n *\n * <img src=\"./img/repeat.png\" width=\"100%\">\n *\n * @param {number} [count] The number of times the source Observable items are repeated, a count of 0 will yield\n * an empty Observable.\n * @return {Observable} An Observable that repeats the stream of items emitted by the source Observable at most\n * count times.\n * @method repeat\n * @owner Observable\n */\n\n\nfunction repeat(count) {\n  if (count === void 0) {\n    count = -1;\n  }\n\n  return function (source) {\n    if (count === 0) {\n      return new EmptyObservable_1.EmptyObservable();\n    } else if (count < 0) {\n      return source.lift(new RepeatOperator(-1, source));\n    } else {\n      return source.lift(new RepeatOperator(count - 1, source));\n    }\n  };\n}\n\nexports.repeat = repeat;\n\nvar RepeatOperator = function () {\n  function RepeatOperator(count, source) {\n    this.count = count;\n    this.source = source;\n  }\n\n  RepeatOperator.prototype.call = function (subscriber, source) {\n    return source.subscribe(new RepeatSubscriber(subscriber, this.count, this.source));\n  };\n\n  return RepeatOperator;\n}();\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\n\n\nvar RepeatSubscriber = function (_super) {\n  __extends(RepeatSubscriber, _super);\n\n  function RepeatSubscriber(destination, count, source) {\n    _super.call(this, destination);\n\n    this.count = count;\n    this.source = source;\n  }\n\n  RepeatSubscriber.prototype.complete = function () {\n    if (!this.isStopped) {\n      var _a = this,\n          source = _a.source,\n          count = _a.count;\n\n      if (count === 0) {\n        return _super.prototype.complete.call(this);\n      } else if (count > -1) {\n        this.count = count - 1;\n      }\n\n      source.subscribe(this._unsubscribeAndRecycle());\n    }\n  };\n\n  return RepeatSubscriber;\n}(Subscriber_1.Subscriber);","map":{"version":3,"sources":["../../src/operators/repeat.ts"],"names":[],"mappings":";;;;;;;;;;;;AACA,IAAA,YAAA,GAAA,OAAA,CAA2B,eAA3B,CAAA;;AAEA,IAAA,iBAAA,GAAA,OAAA,CAAgC,+BAAhC,CAAA;AAIA;;;;;;;;;;;;;;AAYA,SAAA,MAAA,CAA0B,KAA1B,EAA4C;AAAlB,MAAA,KAAA,KAAA,KAAA,CAAA,EAAkB;AAAlB,IAAA,KAAA,GAAA,CAAiB,CAAjB;AAAkB;;AAC1C,SAAO,UAAC,MAAD,EAAsB;AAC3B,QAAI,KAAK,KAAK,CAAd,EAAiB;AACf,aAAO,IAAI,iBAAA,CAAA,eAAJ,EAAP;AACD,KAFD,MAEO,IAAI,KAAK,GAAG,CAAZ,EAAe;AACpB,aAAO,MAAM,CAAC,IAAP,CAAY,IAAI,cAAJ,CAAmB,CAAC,CAApB,EAAuB,MAAvB,CAAZ,CAAP;AACD,KAFM,MAEA;AACL,aAAO,MAAM,CAAC,IAAP,CAAY,IAAI,cAAJ,CAAmB,KAAK,GAAG,CAA3B,EAA8B,MAA9B,CAAZ,CAAP;AACD;AACF,GARD;AASD;;AAVe,OAAA,CAAA,MAAA,GAAM,MAAN;;AAYhB,IAAA,cAAA,GAAA,YAAA;AACE,WAAA,cAAA,CAAoB,KAApB,EACoB,MADpB,EACyC;AADrB,SAAA,KAAA,GAAA,KAAA;AACA,SAAA,MAAA,GAAA,MAAA;AACnB;;AACD,EAAA,cAAA,CAAA,SAAA,CAAA,IAAA,GAAA,UAAK,UAAL,EAAgC,MAAhC,EAA2C;AACzC,WAAO,MAAM,CAAC,SAAP,CAAiB,IAAI,gBAAJ,CAAqB,UAArB,EAAiC,KAAK,KAAtC,EAA6C,KAAK,MAAlD,CAAjB,CAAP;AACD,GAFD;;AAGF,SAAA,cAAA;AAAC,CAPD,EAAA;AASA;;;;;;;AAKA,IAAA,gBAAA,GAAA,UAAA,MAAA,EAAA;AAAkC,EAAA,SAAA,CAAA,gBAAA,EAAA,MAAA,CAAA;;AAChC,WAAA,gBAAA,CAAY,WAAZ,EACoB,KADpB,EAEoB,MAFpB,EAEyC;AACvC,IAAA,MAAA,CAAA,IAAA,CAAA,IAAA,EAAM,WAAN;;AAFkB,SAAA,KAAA,GAAA,KAAA;AACA,SAAA,MAAA,GAAA,MAAA;AAEnB;;AACD,EAAA,gBAAA,CAAA,SAAA,CAAA,QAAA,GAAA,YAAA;AACE,QAAI,CAAC,KAAK,SAAV,EAAqB;AACnB,UAAA,EAAA,GAAA,IAAA;AAAA,UAAQ,MAAA,GAAA,EAAA,CAAA,MAAR;AAAA,UAAgB,KAAA,GAAA,EAAA,CAAA,KAAhB;;AACA,UAAI,KAAK,KAAK,CAAd,EAAiB;AACf,eAAO,MAAA,CAAA,SAAA,CAAM,QAAN,CAAc,IAAd,CAAc,IAAd,CAAP;AACD,OAFD,MAEO,IAAI,KAAK,GAAG,CAAC,CAAb,EAAgB;AACrB,aAAK,KAAL,GAAa,KAAK,GAAG,CAArB;AACD;;AACD,MAAA,MAAM,CAAC,SAAP,CAAiB,KAAK,sBAAL,EAAjB;AACD;AACF,GAVD;;AAWF,SAAA,gBAAA;AAAC,CAjBD,CAAkC,YAAA,CAAA,UAAlC,CAAA","sourcesContent":["import { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { Observable } from '../Observable';\nimport { EmptyObservable } from '../observable/EmptyObservable';\nimport { TeardownLogic } from '../Subscription';\nimport { MonoTypeOperatorFunction } from '../interfaces';\n\n/**\n * Returns an Observable that repeats the stream of items emitted by the source Observable at most count times.\n *\n * <img src=\"./img/repeat.png\" width=\"100%\">\n *\n * @param {number} [count] The number of times the source Observable items are repeated, a count of 0 will yield\n * an empty Observable.\n * @return {Observable} An Observable that repeats the stream of items emitted by the source Observable at most\n * count times.\n * @method repeat\n * @owner Observable\n */\nexport function repeat<T>(count: number = -1): MonoTypeOperatorFunction<T> {\n  return (source: Observable<T>) => {\n    if (count === 0) {\n      return new EmptyObservable<T>();\n    } else if (count < 0) {\n      return source.lift(new RepeatOperator(-1, source));\n    } else {\n      return source.lift(new RepeatOperator(count - 1, source));\n    }\n  };\n}\n\nclass RepeatOperator<T> implements Operator<T, T> {\n  constructor(private count: number,\n              private source: Observable<T>) {\n  }\n  call(subscriber: Subscriber<T>, source: any): TeardownLogic {\n    return source.subscribe(new RepeatSubscriber(subscriber, this.count, this.source));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass RepeatSubscriber<T> extends Subscriber<T> {\n  constructor(destination: Subscriber<any>,\n              private count: number,\n              private source: Observable<T>) {\n    super(destination);\n  }\n  complete() {\n    if (!this.isStopped) {\n      const { source, count } = this;\n      if (count === 0) {\n        return super.complete();\n      } else if (count > -1) {\n        this.count = count - 1;\n      }\n      source.subscribe(this._unsubscribeAndRecycle());\n    }\n  }\n}\n"],"sourceRoot":""},"metadata":{},"sourceType":"script"}