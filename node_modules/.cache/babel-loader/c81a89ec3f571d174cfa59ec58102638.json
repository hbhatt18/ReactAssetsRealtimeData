{"ast":null,"code":"\"use strict\";\n\nvar __extends = this && this.__extends || function (d, b) {\n  for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n\n  function __() {\n    this.constructor = d;\n  }\n\n  d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\n\nvar AsyncAction_1 = require('./AsyncAction');\n\nvar AnimationFrame_1 = require('../util/AnimationFrame');\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\n\n\nvar AnimationFrameAction = function (_super) {\n  __extends(AnimationFrameAction, _super);\n\n  function AnimationFrameAction(scheduler, work) {\n    _super.call(this, scheduler, work);\n\n    this.scheduler = scheduler;\n    this.work = work;\n  }\n\n  AnimationFrameAction.prototype.requestAsyncId = function (scheduler, id, delay) {\n    if (delay === void 0) {\n      delay = 0;\n    } // If delay is greater than 0, request as an async action.\n\n\n    if (delay !== null && delay > 0) {\n      return _super.prototype.requestAsyncId.call(this, scheduler, id, delay);\n    } // Push the action to the end of the scheduler queue.\n\n\n    scheduler.actions.push(this); // If an animation frame has already been requested, don't request another\n    // one. If an animation frame hasn't been requested yet, request one. Return\n    // the current animation frame request id.\n\n    return scheduler.scheduled || (scheduler.scheduled = AnimationFrame_1.AnimationFrame.requestAnimationFrame(scheduler.flush.bind(scheduler, null)));\n  };\n\n  AnimationFrameAction.prototype.recycleAsyncId = function (scheduler, id, delay) {\n    if (delay === void 0) {\n      delay = 0;\n    } // If delay exists and is greater than 0, or if the delay is null (the\n    // action wasn't rescheduled) but was originally scheduled as an async\n    // action, then recycle as an async action.\n\n\n    if (delay !== null && delay > 0 || delay === null && this.delay > 0) {\n      return _super.prototype.recycleAsyncId.call(this, scheduler, id, delay);\n    } // If the scheduler queue is empty, cancel the requested animation frame and\n    // set the scheduled flag to undefined so the next AnimationFrameAction will\n    // request its own.\n\n\n    if (scheduler.actions.length === 0) {\n      AnimationFrame_1.AnimationFrame.cancelAnimationFrame(id);\n      scheduler.scheduled = undefined;\n    } // Return undefined so the action knows to request a new async id if it's rescheduled.\n\n\n    return undefined;\n  };\n\n  return AnimationFrameAction;\n}(AsyncAction_1.AsyncAction);\n\nexports.AnimationFrameAction = AnimationFrameAction;","map":{"version":3,"sources":["../../src/scheduler/AnimationFrameAction.ts"],"names":[],"mappings":";;;;;;;;;;;;AAAA,IAAA,aAAA,GAAA,OAAA,CAA4B,eAA5B,CAAA;;AACA,IAAA,gBAAA,GAAA,OAAA,CAA+B,wBAA/B,CAAA;AAGA;;;;;;;AAKA,IAAA,oBAAA,GAAA,UAAA,MAAA,EAAA;AAA6C,EAAA,SAAA,CAAA,oBAAA,EAAA,MAAA,CAAA;;AAE3C,WAAA,oBAAA,CAAsB,SAAtB,EACsB,IADtB,EAC8E;AAC5E,IAAA,MAAA,CAAA,IAAA,CAAA,IAAA,EAAM,SAAN,EAAiB,IAAjB;;AAFoB,SAAA,SAAA,GAAA,SAAA;AACA,SAAA,IAAA,GAAA,IAAA;AAErB;;AAES,EAAA,oBAAA,CAAA,SAAA,CAAA,cAAA,GAAV,UAAyB,SAAzB,EAA6D,EAA7D,EAAuE,KAAvE,EAAwF;AAAjB,QAAA,KAAA,KAAA,KAAA,CAAA,EAAiB;AAAjB,MAAA,KAAA,GAAA,CAAA;AAAiB,KAAA,CACtF;;;AACA,QAAI,KAAK,KAAK,IAAV,IAAkB,KAAK,GAAG,CAA9B,EAAiC;AAC/B,aAAO,MAAA,CAAA,SAAA,CAAM,cAAN,CAAoB,IAApB,CAAoB,IAApB,EAAqB,SAArB,EAAgC,EAAhC,EAAoC,KAApC,CAAP;AACD,KAJqF,CAKtF;;;AACA,IAAA,SAAS,CAAC,OAAV,CAAkB,IAAlB,CAAuB,IAAvB,EANsF,CAOtF;AACA;AACA;;AACA,WAAO,SAAS,CAAC,SAAV,KAAwB,SAAS,CAAC,SAAV,GAAsB,gBAAA,CAAA,cAAA,CAAe,qBAAf,CACnD,SAAS,CAAC,KAAV,CAAgB,IAAhB,CAAqB,SAArB,EAAgC,IAAhC,CADmD,CAA9C,CAAP;AAGD,GAbS;;AAcA,EAAA,oBAAA,CAAA,SAAA,CAAA,cAAA,GAAV,UAAyB,SAAzB,EAA6D,EAA7D,EAAuE,KAAvE,EAAwF;AAAjB,QAAA,KAAA,KAAA,KAAA,CAAA,EAAiB;AAAjB,MAAA,KAAA,GAAA,CAAA;AAAiB,KAAA,CACtF;AACA;AACA;;;AACA,QAAK,KAAK,KAAK,IAAV,IAAkB,KAAK,GAAG,CAA3B,IAAkC,KAAK,KAAK,IAAV,IAAkB,KAAK,KAAL,GAAa,CAArE,EAAyE;AACvE,aAAO,MAAA,CAAA,SAAA,CAAM,cAAN,CAAoB,IAApB,CAAoB,IAApB,EAAqB,SAArB,EAAgC,EAAhC,EAAoC,KAApC,CAAP;AACD,KANqF,CAOtF;AACA;AACA;;;AACA,QAAI,SAAS,CAAC,OAAV,CAAkB,MAAlB,KAA6B,CAAjC,EAAoC;AAClC,MAAA,gBAAA,CAAA,cAAA,CAAe,oBAAf,CAAoC,EAApC;AACA,MAAA,SAAS,CAAC,SAAV,GAAsB,SAAtB;AACD,KAbqF,CActF;;;AACA,WAAO,SAAP;AACD,GAhBS;;AAiBZ,SAAA,oBAAA;AAAC,CAtCD,CAA6C,aAAA,CAAA,WAA7C,CAAA;;AAAa,OAAA,CAAA,oBAAA,GAAoB,oBAApB","sourcesContent":["import { AsyncAction } from './AsyncAction';\nimport { AnimationFrame } from '../util/AnimationFrame';\nimport { AnimationFrameScheduler } from './AnimationFrameScheduler';\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nexport class AnimationFrameAction<T> extends AsyncAction<T> {\n\n  constructor(protected scheduler: AnimationFrameScheduler,\n              protected work: (this: AnimationFrameAction<T>, state?: T) => void) {\n    super(scheduler, work);\n  }\n\n  protected requestAsyncId(scheduler: AnimationFrameScheduler, id?: any, delay: number = 0): any {\n    // If delay is greater than 0, request as an async action.\n    if (delay !== null && delay > 0) {\n      return super.requestAsyncId(scheduler, id, delay);\n    }\n    // Push the action to the end of the scheduler queue.\n    scheduler.actions.push(this);\n    // If an animation frame has already been requested, don't request another\n    // one. If an animation frame hasn't been requested yet, request one. Return\n    // the current animation frame request id.\n    return scheduler.scheduled || (scheduler.scheduled = AnimationFrame.requestAnimationFrame(\n      scheduler.flush.bind(scheduler, null)\n    ));\n  }\n  protected recycleAsyncId(scheduler: AnimationFrameScheduler, id?: any, delay: number = 0): any {\n    // If delay exists and is greater than 0, or if the delay is null (the\n    // action wasn't rescheduled) but was originally scheduled as an async\n    // action, then recycle as an async action.\n    if ((delay !== null && delay > 0) || (delay === null && this.delay > 0)) {\n      return super.recycleAsyncId(scheduler, id, delay);\n    }\n    // If the scheduler queue is empty, cancel the requested animation frame and\n    // set the scheduled flag to undefined so the next AnimationFrameAction will\n    // request its own.\n    if (scheduler.actions.length === 0) {\n      AnimationFrame.cancelAnimationFrame(id);\n      scheduler.scheduled = undefined;\n    }\n    // Return undefined so the action knows to request a new async id if it's rescheduled.\n    return undefined;\n  }\n}\n"],"sourceRoot":""},"metadata":{},"sourceType":"script"}