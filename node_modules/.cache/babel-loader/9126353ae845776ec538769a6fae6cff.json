{"ast":null,"code":"\"use strict\";\n\nvar __extends = this && this.__extends || function (d, b) {\n  for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n\n  function __() {\n    this.constructor = d;\n  }\n\n  d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\n\nvar Subscriber_1 = require('../Subscriber');\n\nvar EmptyError_1 = require('../util/EmptyError');\n/* tslint:enable:max-line-length */\n\n/**\n * Returns an Observable that emits only the last item emitted by the source Observable.\n * It optionally takes a predicate function as a parameter, in which case, rather than emitting\n * the last item from the source Observable, the resulting Observable will emit the last item\n * from the source Observable that satisfies the predicate.\n *\n * <img src=\"./img/last.png\" width=\"100%\">\n *\n * @throws {EmptyError} Delivers an EmptyError to the Observer's `error`\n * callback if the Observable completes before any `next` notification was sent.\n * @param {function} predicate - The condition any source emitted item has to satisfy.\n * @return {Observable} An Observable that emits only the last item satisfying the given condition\n * from the source, or an NoSuchElementException if no such items are emitted.\n * @throws - Throws if no items that match the predicate are emitted by the source Observable.\n * @method last\n * @owner Observable\n */\n\n\nfunction last(predicate, resultSelector, defaultValue) {\n  return function (source) {\n    return source.lift(new LastOperator(predicate, resultSelector, defaultValue, source));\n  };\n}\n\nexports.last = last;\n\nvar LastOperator = function () {\n  function LastOperator(predicate, resultSelector, defaultValue, source) {\n    this.predicate = predicate;\n    this.resultSelector = resultSelector;\n    this.defaultValue = defaultValue;\n    this.source = source;\n  }\n\n  LastOperator.prototype.call = function (observer, source) {\n    return source.subscribe(new LastSubscriber(observer, this.predicate, this.resultSelector, this.defaultValue, this.source));\n  };\n\n  return LastOperator;\n}();\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\n\n\nvar LastSubscriber = function (_super) {\n  __extends(LastSubscriber, _super);\n\n  function LastSubscriber(destination, predicate, resultSelector, defaultValue, source) {\n    _super.call(this, destination);\n\n    this.predicate = predicate;\n    this.resultSelector = resultSelector;\n    this.defaultValue = defaultValue;\n    this.source = source;\n    this.hasValue = false;\n    this.index = 0;\n\n    if (typeof defaultValue !== 'undefined') {\n      this.lastValue = defaultValue;\n      this.hasValue = true;\n    }\n  }\n\n  LastSubscriber.prototype._next = function (value) {\n    var index = this.index++;\n\n    if (this.predicate) {\n      this._tryPredicate(value, index);\n    } else {\n      if (this.resultSelector) {\n        this._tryResultSelector(value, index);\n\n        return;\n      }\n\n      this.lastValue = value;\n      this.hasValue = true;\n    }\n  };\n\n  LastSubscriber.prototype._tryPredicate = function (value, index) {\n    var result;\n\n    try {\n      result = this.predicate(value, index, this.source);\n    } catch (err) {\n      this.destination.error(err);\n      return;\n    }\n\n    if (result) {\n      if (this.resultSelector) {\n        this._tryResultSelector(value, index);\n\n        return;\n      }\n\n      this.lastValue = value;\n      this.hasValue = true;\n    }\n  };\n\n  LastSubscriber.prototype._tryResultSelector = function (value, index) {\n    var result;\n\n    try {\n      result = this.resultSelector(value, index);\n    } catch (err) {\n      this.destination.error(err);\n      return;\n    }\n\n    this.lastValue = result;\n    this.hasValue = true;\n  };\n\n  LastSubscriber.prototype._complete = function () {\n    var destination = this.destination;\n\n    if (this.hasValue) {\n      destination.next(this.lastValue);\n      destination.complete();\n    } else {\n      destination.error(new EmptyError_1.EmptyError());\n    }\n  };\n\n  return LastSubscriber;\n}(Subscriber_1.Subscriber);","map":{"version":3,"sources":["../../src/operators/last.ts"],"names":[],"mappings":"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","sourcesContent":["import { Observable } from '../Observable';\nimport { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { EmptyError } from '../util/EmptyError';\nimport { OperatorFunction, MonoTypeOperatorFunction } from '../interfaces';\n\n/* tslint:disable:max-line-length */\nexport function last<T, S extends T>(predicate: (value: T, index: number, source: Observable<T>) => value is S): OperatorFunction<T, S>;\nexport function last<T, S extends T, R>(predicate: (value: T | S, index: number, source: Observable<T>) => value is S,\n                                        resultSelector: (value: S, index: number) => R, defaultValue?: R): OperatorFunction<T, R>;\nexport function last<T, S extends T>(predicate: (value: T, index: number, source: Observable<T>) => value is S,\n                                     resultSelector: void,\n                                     defaultValue?: S): OperatorFunction<T, S>;\nexport function last<T>(predicate?: (value: T, index: number, source: Observable<T>) => boolean): MonoTypeOperatorFunction<T>;\nexport function last<T, R>(predicate: (value: T, index: number, source: Observable<T>) => boolean,\n                           resultSelector?: (value: T, index: number) => R,\n                           defaultValue?: R): OperatorFunction<T, R>;\nexport function last<T>(predicate: (value: T, index: number, source: Observable<T>) => boolean,\n                        resultSelector: void,\n                        defaultValue?: T): MonoTypeOperatorFunction<T>;\n/* tslint:enable:max-line-length */\n\n/**\n * Returns an Observable that emits only the last item emitted by the source Observable.\n * It optionally takes a predicate function as a parameter, in which case, rather than emitting\n * the last item from the source Observable, the resulting Observable will emit the last item\n * from the source Observable that satisfies the predicate.\n *\n * <img src=\"./img/last.png\" width=\"100%\">\n *\n * @throws {EmptyError} Delivers an EmptyError to the Observer's `error`\n * callback if the Observable completes before any `next` notification was sent.\n * @param {function} predicate - The condition any source emitted item has to satisfy.\n * @return {Observable} An Observable that emits only the last item satisfying the given condition\n * from the source, or an NoSuchElementException if no such items are emitted.\n * @throws - Throws if no items that match the predicate are emitted by the source Observable.\n * @method last\n * @owner Observable\n */\nexport function last<T, R>(predicate?: (value: T, index: number, source: Observable<T>) => boolean,\n                           resultSelector?: ((value: T, index: number) => R) | void,\n                           defaultValue?: R): OperatorFunction<T, T | R> {\n  return (source: Observable<T>) => source.lift(new LastOperator(predicate, resultSelector, defaultValue, source));\n}\n\nclass LastOperator<T, R> implements Operator<T, R> {\n  constructor(private predicate?: (value: T, index: number, source: Observable<T>) => boolean,\n              private resultSelector?: ((value: T, index: number) => R) | void,\n              private defaultValue?: any,\n              private source?: Observable<T>) {\n  }\n\n  call(observer: Subscriber<R>, source: any): any {\n    return source.subscribe(new LastSubscriber(observer, this.predicate, this.resultSelector, this.defaultValue, this.source));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass LastSubscriber<T, R> extends Subscriber<T> {\n  private lastValue: T | R;\n  private hasValue: boolean = false;\n  private index: number = 0;\n\n  constructor(destination: Subscriber<R>,\n              private predicate?: (value: T, index: number, source: Observable<T>) => boolean,\n              private resultSelector?: ((value: T, index: number) => R) | void,\n              private defaultValue?: any,\n              private source?: Observable<T>) {\n    super(destination);\n    if (typeof defaultValue !== 'undefined') {\n      this.lastValue = defaultValue;\n      this.hasValue = true;\n    }\n  }\n\n  protected _next(value: T): void {\n    const index = this.index++;\n    if (this.predicate) {\n      this._tryPredicate(value, index);\n    } else {\n      if (this.resultSelector) {\n        this._tryResultSelector(value, index);\n        return;\n      }\n      this.lastValue = value;\n      this.hasValue = true;\n    }\n  }\n\n  private _tryPredicate(value: T, index: number) {\n    let result: any;\n    try {\n      result = this.predicate(value, index, this.source);\n    } catch (err) {\n      this.destination.error(err);\n      return;\n    }\n    if (result) {\n      if (this.resultSelector) {\n        this._tryResultSelector(value, index);\n        return;\n      }\n      this.lastValue = value;\n      this.hasValue = true;\n    }\n  }\n\n  private _tryResultSelector(value: T, index: number) {\n    let result: any;\n    try {\n      result = (<any>this).resultSelector(value, index);\n    } catch (err) {\n      this.destination.error(err);\n      return;\n    }\n    this.lastValue = result;\n    this.hasValue = true;\n  }\n\n  protected _complete(): void {\n    const destination = this.destination;\n    if (this.hasValue) {\n      destination.next(this.lastValue);\n      destination.complete();\n    } else {\n      destination.error(new EmptyError);\n    }\n  }\n}\n"],"sourceRoot":""},"metadata":{},"sourceType":"script"}