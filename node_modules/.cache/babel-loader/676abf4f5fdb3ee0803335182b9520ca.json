{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\het\\\\ReactProject\\\\ch02\\\\02_02\\\\start\\\\Exercise-senior-front-end-master\\\\src\\\\index.js\";\nimport React, { Component } from 'react';\nimport ReactDOM from 'react-dom';\nimport assetPrices from './assetPrices.js';\nimport { render } from 'react-dom';\nimport './index.css';\nimport * as serviceWorker from './serviceWorker'; //import TableData from './Table.js';\n\nimport './App.css';\nconst elements = [];\n\nconst createAsset = (id, type) => {\n  return {\n    id: id,\n    assetName: type === 'Stock' ? ['AAPL', 'GOOGL', 'FB', 'TSLA', 'MSFT'][Math.floor(Math.random() * 4)] : ['EUR', 'USD', 'GBP', 'NIS', 'AUD'][Math.floor(Math.random() * 4)],\n    price: Math.random() * 10,\n    lastUpdate: new Date(Date.now()).toString().slice(3, 24),\n    type: type\n  };\n};\n\nconst getAllAssets = n => {\n  const result = [];\n\n  for (let i = 0; i < n; i++) {\n    result.push(createAsset(i, 'Stock'));\n    result.push(createAsset(i + n, 'Currency'));\n  }\n\n  return result;\n};\n\nconst assets = getAllAssets(200);\n\nclass Table extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.lastUpdatedAt = lastUpdate => {\n      let time_diff = Date.now() - Number(lastUpdate.slice(-1)[0].time);\n\n      if (time_diff <= 4000) {\n        // stays 'just now' until this function is called again: WRONG\n        return 'just now';\n      } else if (time_diff > 4000 && time_diff < 60000) {\n        return 'few seconds ago';\n      } else {\n        return Date.now(lastUpdate.slice(-1)[0].time).toLocaleString(undefined, {\n          hour: 'numeric',\n          minute: 'numeric'\n        });\n      }\n    };\n\n    this.state = {\n      assets: getAllAssets(200)\n      /*[\r\n      { id: i, assetName: 'Apple', price: 21, lastUpdate: 'yesterday', type:'Stock' },\r\n      { id: i, assetName: 'Samsung', price: 19, lastUpdate: 'yesterday', type:'Stock' },\r\n      { id: 3, assetName: 'USD', price: 16, lastUpdate: 'yesterday', type:'Currency' },\r\n      { id: 4, assetName: 'INR', price: 25, lastUpdate: 'yesterday', type:'Currency' }\r\n      ]*/\n\n    };\n  }\n  /*  const Table. getAllAssets = (n) => {\r\n     const result = [];\r\n     for (let i = 0; i < n; i++) {\r\n       result.push(createAsset(i, 'Stock'));\r\n       result.push(createAsset(i+n, 'Currency'));\r\n     }\r\n     return result;\r\n   }*/\n  // make this better\n\n\n  renderTableHeader() {\n    let header = Object.keys(this.state.assets[0]);\n    return header.map((key, index) => {\n      if (key == \"lastUpdate\") return /*#__PURE__*/React.createElement(\"th\", {\n        padding: \"15px\",\n        colSpan: \"51\",\n        key: index,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 81,\n          columnNumber: 40\n        }\n      }, key.toUpperCase());else return /*#__PURE__*/React.createElement(\"th\", {\n        padding: \"15px\",\n        key: index,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 82,\n          columnNumber: 22\n        }\n      }, key.toUpperCase());\n    });\n  }\n\n  renderTableData() {\n    return this.state.assets.map((asset, index) => {\n      const {\n        id,\n        assetName,\n        price,\n        lastUpdate,\n        type\n      } = asset; //destructuring\n\n      return /*#__PURE__*/React.createElement(\"tr\", {\n        key: id,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 90,\n          columnNumber: 12\n        }\n      }, /*#__PURE__*/React.createElement(\"td\", {\n        padding: \"15px\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 91,\n          columnNumber: 15\n        }\n      }, id), /*#__PURE__*/React.createElement(\"td\", {\n        padding: \"15px\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 92,\n          columnNumber: 15\n        }\n      }, assetName), /*#__PURE__*/React.createElement(\"td\", {\n        padding: \"15px\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 93,\n          columnNumber: 15\n        }\n      }, price), /*#__PURE__*/React.createElement(\"td\", {\n        padding: \"15px\",\n        colSpan: \"6\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 94,\n          columnNumber: 15\n        }\n      }, lastUpdate), /*#__PURE__*/React.createElement(\"td\", {\n        padding: \"15px\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 95,\n          columnNumber: 15\n        }\n      }, type));\n    });\n  }\n  /*\r\n                /*<td className=\"updated_at\">{this.lastUpdatedAt(lastUpdate)}</td>\r\n              {lastUpdate.slice(-1)[0].time }\r\n                  <assetPrices\r\n                    key={index} assetName={assetName}\r\n                    assetData={assetName}\r\n                  />\r\n              </td>*\r\n    */\n\n\n  render() {\n    return /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 115,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(\"h1\", {\n      id: \"title\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 116,\n        columnNumber: 12\n      }\n    }, \"React Dynamic Table\"), /*#__PURE__*/React.createElement(\"table\", {\n      id: \"assets\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 117,\n        columnNumber: 12\n      }\n    }, /*#__PURE__*/React.createElement(\"tbody\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 118,\n        columnNumber: 15\n      }\n    }, /*#__PURE__*/React.createElement(\"tr\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 119,\n        columnNumber: 18\n      }\n    }, this.renderTableHeader()), this.renderTableData())));\n  }\n\n}\n\nReactDOM.render( /*#__PURE__*/React.createElement(Table, {\n  __self: this,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 128,\n    columnNumber: 17\n  }\n}), document.getElementById('root'));\nserviceWorker.unregister();","map":{"version":3,"sources":["C:/Users/het/ReactProject/ch02/02_02/start/Exercise-senior-front-end-master/src/index.js"],"names":["React","Component","ReactDOM","assetPrices","render","serviceWorker","elements","createAsset","id","type","assetName","Math","floor","random","price","lastUpdate","Date","now","toString","slice","getAllAssets","n","result","i","push","assets","Table","constructor","props","lastUpdatedAt","time_diff","Number","time","toLocaleString","undefined","hour","minute","state","renderTableHeader","header","Object","keys","map","key","index","toUpperCase","renderTableData","asset","document","getElementById","unregister"],"mappings":"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","sourcesContent":["import React, { Component } from 'react'\r\nimport ReactDOM from 'react-dom';\r\nimport assetPrices from './assetPrices.js'\r\nimport { render } from 'react-dom'\r\nimport './index.css'\r\nimport * as serviceWorker from './serviceWorker'\r\n//import TableData from './Table.js';\r\nimport './App.css';\r\n\r\nconst elements = []\r\n\r\nconst createAsset = (id, type) => {\r\n   return {\r\n     id: id,\r\n     assetName: type === 'Stock' ? ['AAPL','GOOGL','FB', 'TSLA', 'MSFT'][Math.floor(Math.random() * 4)] : ['EUR','USD','GBP', 'NIS', 'AUD'][Math.floor(Math.random() * 4)],\r\n     price: Math.random()*10,\r\n     lastUpdate: new Date(Date.now()).toString().slice(3,24),\r\n     type: type\r\n   }\r\n };\r\n \r\n const getAllAssets = (n) => {\r\n   const result = [];\r\n   for (let i = 0; i < n; i++) {\r\n     result.push(createAsset(i, 'Stock'));\r\n     result.push(createAsset(i+n, 'Currency'));\r\n   }\r\n   return result;\r\n }\r\n \r\n const assets = getAllAssets(200);\r\n\r\n\r\n\r\nclass Table extends React.Component {\r\n  constructor(props) {\r\n     super(props)\r\n     this.state = {\r\n        assets: getAllAssets(200)/*[\r\n           { id: i, assetName: 'Apple', price: 21, lastUpdate: 'yesterday', type:'Stock' },\r\n           { id: i, assetName: 'Samsung', price: 19, lastUpdate: 'yesterday', type:'Stock' },\r\n           { id: 3, assetName: 'USD', price: 16, lastUpdate: 'yesterday', type:'Currency' },\r\n           { id: 4, assetName: 'INR', price: 25, lastUpdate: 'yesterday', type:'Currency' }\r\n        ]*/\r\n     }\r\n  }\r\n\r\n\r\n\r\n\r\n\r\n\r\n/*  const Table. getAllAssets = (n) => {\r\n   const result = [];\r\n   for (let i = 0; i < n; i++) {\r\n     result.push(createAsset(i, 'Stock'));\r\n     result.push(createAsset(i+n, 'Currency'));\r\n   }\r\n   return result;\r\n }*/\r\n\r\n\r\n  // make this better\r\n  lastUpdatedAt = (lastUpdate) => {\r\n   let time_diff = Date.now() - Number(lastUpdate.slice(-1)[0].time);\r\n   if(time_diff <= 4000){\r\n     // stays 'just now' until this function is called again: WRONG\r\n     return 'just now'\r\n   }\r\n   else if(time_diff > 4000 && time_diff <60000){\r\n      return 'few seconds ago'\r\n   }\r\n   else{\r\n      return Date.now(lastUpdate.slice(-1)[0].time).toLocaleString(undefined, {hour: 'numeric', minute: 'numeric'})\r\n   }\r\n }\r\n\r\n  renderTableHeader() {\r\n     let header = Object.keys(this.state.assets[0])\r\n     return header.map((key, index) => {\r\n        if(key == \"lastUpdate\") return <th padding=\"15px\" colSpan=\"51\" key={index}>{key.toUpperCase()}</th>\r\n         else return <th padding=\"15px\" key={index}>{key.toUpperCase()}</th>\r\n     })\r\n  }\r\n\r\n  renderTableData() {\r\n     return this.state.assets.map((asset, index) => {\r\n        const { id, assetName, price, lastUpdate, type } = asset //destructuring\r\n        return (\r\n           <tr key={id}>\r\n              <td padding=\"15px\">{id}</td>\r\n              <td padding=\"15px\">{assetName}</td>\r\n              <td padding=\"15px\">{price}</td>\r\n              <td padding=\"15px\" colSpan=\"6\">{lastUpdate}</td>\r\n              <td padding=\"15px\">{type}</td>\r\n           </tr>\r\n        )\r\n     })\r\n  }\r\n\r\n\r\n  /*\r\n                /*<td className=\"updated_at\">{this.lastUpdatedAt(lastUpdate)}</td>\r\n              {lastUpdate.slice(-1)[0].time }\r\n                  <assetPrices\r\n                    key={index} assetName={assetName}\r\n                    assetData={assetName}\r\n                  />\r\n              </td>*\r\n\r\n  */\r\n\r\n  render() {\r\n     return (\r\n        <div>\r\n           <h1 id='title'>React Dynamic Table</h1>\r\n           <table id='assets'>\r\n              <tbody>\r\n                 <tr>{this.renderTableHeader()}</tr>\r\n                 {this.renderTableData()}\r\n              </tbody>\r\n           </table>\r\n        </div>\r\n     )\r\n  }\r\n}\r\n\r\nReactDOM.render(<Table />, document.getElementById('root'));\r\n\r\nserviceWorker.unregister()"]},"metadata":{},"sourceType":"module"}